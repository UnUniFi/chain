// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ecosystem-incentive/genesis.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// At first, we go with this one type.
// NFTMARKET_FRONTEND type reward will be disributed for the creators of frontend of UnUniFi's services.
type RewardType int32

const (
	RewardType_NFTMARKET_FRONTEND RewardType = 0
)

var RewardType_name = map[int32]string{
	0: "NFTMARKET_FRONTEND",
}

var RewardType_value = map[string]int32{
	"NFTMARKET_FRONTEND": 0,
}

func (x RewardType) String() string {
	return proto.EnumName(RewardType_name, int32(x))
}

func (RewardType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4d7eb5fafa53d668, []int{0}
}

// Params defines the parameters for the module.
type Params struct {
	RewardParams []*RewardParams `protobuf:"bytes,1,rep,name=reward_params,json=rewardParams,proto3" json:"reward_params,omitempty" yaml:"reward_params"`
	RewardTypes  []RewardType    `protobuf:"varint,2,rep,packed,name=reward_types,json=rewardTypes,proto3,enum=ununifi.ecosystemincentive.RewardType" json:"reward_types,omitempty" yaml:"reward_types"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d7eb5fafa53d668, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetRewardParams() []*RewardParams {
	if m != nil {
		return m.RewardParams
	}
	return nil
}

func (m *Params) GetRewardTypes() []RewardType {
	if m != nil {
		return m.RewardTypes
	}
	return nil
}

type RewardParams struct {
	ModuleName string       `protobuf:"bytes,1,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty" yaml:"module_name"`
	RewardRate []RewardRate `protobuf:"bytes,2,rep,name=reward_rate,json=rewardRate,proto3" json:"reward_rate" yaml:"reward_rate"`
}

func (m *RewardParams) Reset()         { *m = RewardParams{} }
func (m *RewardParams) String() string { return proto.CompactTextString(m) }
func (*RewardParams) ProtoMessage()    {}
func (*RewardParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d7eb5fafa53d668, []int{1}
}
func (m *RewardParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardParams.Merge(m, src)
}
func (m *RewardParams) XXX_Size() int {
	return m.Size()
}
func (m *RewardParams) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardParams.DiscardUnknown(m)
}

var xxx_messageInfo_RewardParams proto.InternalMessageInfo

func (m *RewardParams) GetModuleName() string {
	if m != nil {
		return m.ModuleName
	}
	return ""
}

func (m *RewardParams) GetRewardRate() []RewardRate {
	if m != nil {
		return m.RewardRate
	}
	return nil
}

// RewardRate defines the ratio to take reward for a specific reward_type.
// The total sum of reward_rate in a module cannot be exceed 1
type RewardRate struct {
	RewardType RewardType                             `protobuf:"varint,1,opt,name=reward_type,json=rewardType,proto3,enum=ununifi.ecosystemincentive.RewardType" json:"reward_type,omitempty"`
	Rate       github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=rate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"rate" yaml:"reward_rate"`
}

func (m *RewardRate) Reset()         { *m = RewardRate{} }
func (m *RewardRate) String() string { return proto.CompactTextString(m) }
func (*RewardRate) ProtoMessage()    {}
func (*RewardRate) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d7eb5fafa53d668, []int{2}
}
func (m *RewardRate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardRate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardRate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardRate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardRate.Merge(m, src)
}
func (m *RewardRate) XXX_Size() int {
	return m.Size()
}
func (m *RewardRate) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardRate.DiscardUnknown(m)
}

var xxx_messageInfo_RewardRate proto.InternalMessageInfo

func (m *RewardRate) GetRewardType() RewardType {
	if m != nil {
		return m.RewardType
	}
	return RewardType_NFTMARKET_FRONTEND
}

// GenesisState defines the ecosystemincentive module's genesis state.
type GenesisState struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d7eb5fafa53d668, []int{3}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func init() {
	proto.RegisterEnum("ununifi.ecosystemincentive.RewardType", RewardType_name, RewardType_value)
	proto.RegisterType((*Params)(nil), "ununifi.ecosystemincentive.Params")
	proto.RegisterType((*RewardParams)(nil), "ununifi.ecosystemincentive.RewardParams")
	proto.RegisterType((*RewardRate)(nil), "ununifi.ecosystemincentive.RewardRate")
	proto.RegisterType((*GenesisState)(nil), "ununifi.ecosystemincentive.GenesisState")
}

func init() { proto.RegisterFile("ecosystem-incentive/genesis.proto", fileDescriptor_4d7eb5fafa53d668) }

var fileDescriptor_4d7eb5fafa53d668 = []byte{
	// 463 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x41, 0x6b, 0xd4, 0x40,
	0x14, 0xc7, 0x33, 0xb6, 0x2c, 0x38, 0x59, 0x45, 0xc6, 0x52, 0x97, 0x3d, 0x24, 0xeb, 0x20, 0x25,
	0x08, 0x4d, 0x60, 0x15, 0x04, 0x4f, 0x1a, 0xb6, 0xdb, 0x83, 0x18, 0xcb, 0xb8, 0x05, 0xf1, 0x12,
	0x66, 0xb3, 0x63, 0x3a, 0xd8, 0xcc, 0x2c, 0x99, 0x59, 0x75, 0xbf, 0x85, 0x1f, 0x44, 0xf0, 0x6b,
	0xf4, 0xd8, 0x8b, 0x20, 0x1e, 0x82, 0xec, 0x7e, 0x83, 0xfd, 0x04, 0x92, 0x49, 0x9a, 0xa6, 0x60,
	0xb5, 0xa7, 0xcc, 0x64, 0xfe, 0xef, 0xff, 0x7e, 0xef, 0xf1, 0x1e, 0x7c, 0xc8, 0x12, 0xa9, 0x96,
	0x4a, 0xb3, 0x6c, 0x9f, 0x8b, 0x84, 0x09, 0xcd, 0x3f, 0xb1, 0x20, 0x65, 0x82, 0x29, 0xae, 0xfc,
	0x79, 0x2e, 0xb5, 0x44, 0xfd, 0x85, 0x58, 0x08, 0xfe, 0x81, 0xfb, 0x8d, 0xb4, 0x51, 0xf6, 0x77,
	0x52, 0x99, 0x4a, 0x23, 0x0b, 0xca, 0x53, 0x15, 0x81, 0x7f, 0x00, 0xd8, 0x39, 0xa2, 0x39, 0xcd,
	0x14, 0x4a, 0xe1, 0x9d, 0x9c, 0x7d, 0xa6, 0xf9, 0x2c, 0x9e, 0x9b, 0x1f, 0x3d, 0x30, 0xd8, 0xf2,
	0xec, 0xa1, 0xe7, 0x5f, 0x6f, 0xea, 0x13, 0x13, 0x50, 0x19, 0x84, 0xbd, 0x4d, 0xe1, 0xee, 0x2c,
	0x69, 0x76, 0xfa, 0x1c, 0x5f, 0x31, 0xc2, 0xa4, 0x9b, 0xb7, 0x74, 0x68, 0x0a, 0xeb, 0x7b, 0xac,
	0x97, 0x73, 0xa6, 0x7a, 0xb7, 0x06, 0x5b, 0xde, 0xdd, 0xe1, 0xde, 0xff, 0xf3, 0x4c, 0x96, 0x73,
	0x16, 0x3e, 0xd8, 0x14, 0xee, 0xfd, 0x2b, 0x59, 0x8c, 0x0b, 0x26, 0x76, 0xde, 0x88, 0x14, 0xfe,
	0x06, 0x60, 0xb7, 0x0d, 0x87, 0x9e, 0x41, 0x3b, 0x93, 0xb3, 0xc5, 0x29, 0x8b, 0x05, 0xcd, 0x58,
	0x0f, 0x0c, 0x80, 0x77, 0x3b, 0xdc, 0xdd, 0x14, 0x2e, 0xaa, 0xbc, 0x5a, 0x8f, 0x98, 0xc0, 0xea,
	0x16, 0xd1, 0x8c, 0xa1, 0x04, 0xd6, 0xc6, 0x71, 0x4e, 0x35, 0x33, 0xb0, 0xf6, 0x4d, 0x60, 0x09,
	0xd5, 0x2c, 0xec, 0x9f, 0x15, 0xae, 0x75, 0x99, 0xa4, 0x65, 0x84, 0x09, 0xcc, 0x1b, 0x1d, 0xfe,
	0x0e, 0x20, 0xbc, 0x0c, 0x43, 0x87, 0x4d, 0xce, 0xb2, 0x36, 0x03, 0x7b, 0xe3, 0x06, 0x5d, 0xf8,
	0x96, 0x67, 0xf4, 0x0e, 0x6e, 0xd7, 0xd4, 0x65, 0xb9, 0xa3, 0x92, 0xe6, 0x57, 0xe1, 0xee, 0xa5,
	0x5c, 0x9f, 0x2c, 0xa6, 0x7e, 0x22, 0xb3, 0x20, 0x91, 0x2a, 0x93, 0xaa, 0xfe, 0xec, 0xab, 0xd9,
	0xc7, 0xc0, 0xb4, 0xd3, 0x1f, 0xb1, 0xe4, 0x1a, 0x6e, 0xe3, 0x88, 0x8f, 0x60, 0xf7, 0xb0, 0x9a,
	0xbd, 0xb7, 0xba, 0x44, 0x7e, 0x01, 0x3b, 0xcd, 0xd8, 0x00, 0xcf, 0x1e, 0xe2, 0x7f, 0xd1, 0xd6,
	0x03, 0xb3, 0x5d, 0xf2, 0x90, 0x3a, 0xee, 0xf1, 0xa3, 0x8b, 0x16, 0x18, 0xf2, 0x5d, 0x88, 0xa2,
	0xf1, 0xe4, 0xf5, 0x4b, 0xf2, 0xea, 0x60, 0x12, 0x8f, 0xc9, 0x9b, 0x68, 0x72, 0x10, 0x8d, 0xee,
	0x59, 0x61, 0x74, 0xb6, 0x72, 0xc0, 0xf9, 0xca, 0x01, 0xbf, 0x57, 0x0e, 0xf8, 0xba, 0x76, 0xac,
	0xf3, 0xb5, 0x63, 0xfd, 0x5c, 0x3b, 0xd6, 0xfb, 0xa7, 0xad, 0xaa, 0x8e, 0xc5, 0xb1, 0xe0, 0x63,
	0x1e, 0x24, 0x27, 0x94, 0x8b, 0xe0, 0x4b, 0xf0, 0xb7, 0xd5, 0x31, 0x75, 0x4e, 0x3b, 0x66, 0x0f,
	0x9e, 0xfc, 0x09, 0x00, 0x00, 0xff, 0xff, 0x88, 0x94, 0x3b, 0xe4, 0x5e, 0x03, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardTypes) > 0 {
		dAtA2 := make([]byte, len(m.RewardTypes)*10)
		var j1 int
		for _, num := range m.RewardTypes {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintGenesis(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RewardParams) > 0 {
		for iNdEx := len(m.RewardParams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardParams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RewardParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardRate) > 0 {
		for iNdEx := len(m.RewardRate) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardRate[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ModuleName) > 0 {
		i -= len(m.ModuleName)
		copy(dAtA[i:], m.ModuleName)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ModuleName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RewardRate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardRate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardRate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Rate.Size()
		i -= size
		if _, err := m.Rate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.RewardType != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.RewardType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RewardParams) > 0 {
		for _, e := range m.RewardParams {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.RewardTypes) > 0 {
		l = 0
		for _, e := range m.RewardTypes {
			l += sovGenesis(uint64(e))
		}
		n += 1 + sovGenesis(uint64(l)) + l
	}
	return n
}

func (m *RewardParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ModuleName)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.RewardRate) > 0 {
		for _, e := range m.RewardRate {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *RewardRate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RewardType != 0 {
		n += 1 + sovGenesis(uint64(m.RewardType))
	}
	l = m.Rate.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardParams = append(m.RewardParams, &RewardParams{})
			if err := m.RewardParams[len(m.RewardParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v RewardType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenesis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= RewardType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RewardTypes = append(m.RewardTypes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenesis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGenesis
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGenesis
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.RewardTypes) == 0 {
					m.RewardTypes = make([]RewardType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v RewardType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= RewardType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RewardTypes = append(m.RewardTypes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardTypes", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardRate = append(m.RewardRate, RewardRate{})
			if err := m.RewardRate[len(m.RewardRate)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardRate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardRate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardRate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardType", wireType)
			}
			m.RewardType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardType |= RewardType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
