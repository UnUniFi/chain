// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ethereum/signdoc.proto

package ante

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	tx "github.com/cosmos/cosmos-sdk/types/tx"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SignDocForMetamask struct {
	Body          *tx.TxBody   `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	AuthInfo      *tx.AuthInfo `protobuf:"bytes,2,opt,name=auth_info,json=authInfo,proto3" json:"auth_info,omitempty"`
	ChainId       string       `protobuf:"bytes,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	AccountNumber uint64       `protobuf:"varint,4,opt,name=account_number,json=accountNumber,proto3" json:"account_number,omitempty"`
}

func (m *SignDocForMetamask) Reset()         { *m = SignDocForMetamask{} }
func (m *SignDocForMetamask) String() string { return proto.CompactTextString(m) }
func (*SignDocForMetamask) ProtoMessage()    {}
func (*SignDocForMetamask) Descriptor() ([]byte, []int) {
	return fileDescriptor_67bea9b6d79dd3b6, []int{0}
}
func (m *SignDocForMetamask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignDocForMetamask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignDocForMetamask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignDocForMetamask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignDocForMetamask.Merge(m, src)
}
func (m *SignDocForMetamask) XXX_Size() int {
	return m.Size()
}
func (m *SignDocForMetamask) XXX_DiscardUnknown() {
	xxx_messageInfo_SignDocForMetamask.DiscardUnknown(m)
}

var xxx_messageInfo_SignDocForMetamask proto.InternalMessageInfo

func (m *SignDocForMetamask) GetBody() *tx.TxBody {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *SignDocForMetamask) GetAuthInfo() *tx.AuthInfo {
	if m != nil {
		return m.AuthInfo
	}
	return nil
}

func (m *SignDocForMetamask) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *SignDocForMetamask) GetAccountNumber() uint64 {
	if m != nil {
		return m.AccountNumber
	}
	return 0
}

func init() {
	proto.RegisterType((*SignDocForMetamask)(nil), "ununifi.ethereum.SignDocForMetamask")
}

func init() { proto.RegisterFile("ethereum/signdoc.proto", fileDescriptor_67bea9b6d79dd3b6) }

var fileDescriptor_67bea9b6d79dd3b6 = []byte{
	// 331 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x18, 0x84, 0x6b, 0xa8, 0xa0, 0x0d, 0x02, 0xa1, 0x08, 0xa1, 0xb4, 0x48, 0xa1, 0x42, 0x42, 0x74,
	0x21, 0x56, 0x61, 0x61, 0x6d, 0x85, 0x2a, 0x75, 0x80, 0x21, 0xd0, 0x85, 0xa5, 0x72, 0x6c, 0xc7,
	0xb1, 0xa8, 0xfd, 0x47, 0x89, 0x0d, 0xe9, 0x5b, 0xf0, 0x46, 0xac, 0x8c, 0x1d, 0x19, 0x51, 0xfb,
	0x22, 0x08, 0x37, 0x30, 0xb1, 0xfd, 0x77, 0xdf, 0xdd, 0x0d, 0xbf, 0x77, 0xcc, 0x4d, 0xc6, 0x0b,
	0x6e, 0x15, 0x2e, 0xa5, 0xd0, 0x0c, 0x68, 0x94, 0x17, 0x60, 0xc0, 0x3f, 0xb4, 0xda, 0x6a, 0x99,
	0xca, 0xe8, 0x97, 0x77, 0x8f, 0x04, 0x08, 0x70, 0x10, 0xff, 0x5c, 0x9b, 0x5c, 0xf7, 0x54, 0x00,
	0x88, 0x39, 0xc7, 0x4e, 0x25, 0x36, 0xc5, 0x46, 0x2a, 0x5e, 0x1a, 0xa2, 0xf2, 0x3a, 0x10, 0x52,
	0x28, 0x15, 0x94, 0x38, 0x21, 0x25, 0xc7, 0x2f, 0x83, 0x84, 0x1b, 0x32, 0xc0, 0x14, 0xa4, 0xae,
	0x79, 0xb7, 0xe6, 0xa6, 0xfa, 0xa3, 0xa6, 0xda, 0xb0, 0xb3, 0x77, 0xe4, 0xf9, 0x0f, 0x52, 0xe8,
	0x5b, 0xa0, 0x63, 0x28, 0xee, 0xb8, 0x21, 0x8a, 0x94, 0xcf, 0xfe, 0xa5, 0xd7, 0x4c, 0x80, 0x2d,
	0x02, 0xd4, 0x43, 0xfd, 0xbd, 0xab, 0x4e, 0xb4, 0x59, 0x88, 0x4c, 0x15, 0xd5, 0x0b, 0xd1, 0x63,
	0x35, 0x02, 0xb6, 0x88, 0x5d, 0xcc, 0xbf, 0xf1, 0xda, 0xc4, 0x9a, 0x6c, 0x26, 0x75, 0x0a, 0xc1,
	0x96, 0xeb, 0x9c, 0xfc, 0xd3, 0x19, 0x5a, 0x93, 0x4d, 0x74, 0x0a, 0x71, 0x8b, 0xd4, 0x97, 0xdf,
	0xf1, 0x5a, 0x34, 0x23, 0x52, 0xcf, 0x24, 0x0b, 0xb6, 0x7b, 0xa8, 0xdf, 0x8e, 0x77, 0x9d, 0x9e,
	0x30, 0xff, 0xdc, 0x3b, 0x20, 0x94, 0x82, 0xd5, 0x66, 0xa6, 0xad, 0x4a, 0x78, 0x11, 0x34, 0x7b,
	0xa8, 0xdf, 0x8c, 0xf7, 0x6b, 0xf7, 0xde, 0x99, 0xa3, 0xe1, 0xc7, 0x2a, 0x44, 0xcb, 0x55, 0x88,
	0xbe, 0x56, 0x21, 0x7a, 0x5b, 0x87, 0x8d, 0xe5, 0x3a, 0x6c, 0x7c, 0xae, 0xc3, 0xc6, 0xd3, 0x85,
	0x90, 0x26, 0xb3, 0x49, 0x44, 0x41, 0xe1, 0xa9, 0x9e, 0x6a, 0x39, 0x96, 0xd8, 0x8d, 0x63, 0x92,
	0xe7, 0x58, 0x49, 0xc6, 0xe6, 0xfc, 0x95, 0x14, 0x3c, 0xd9, 0x71, 0xbf, 0xb8, 0xfe, 0x0e, 0x00,
	0x00, 0xff, 0xff, 0xc4, 0x87, 0x39, 0xa4, 0xaa, 0x01, 0x00, 0x00,
}

func (m *SignDocForMetamask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignDocForMetamask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignDocForMetamask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AccountNumber != 0 {
		i = encodeVarintSigndoc(dAtA, i, uint64(m.AccountNumber))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintSigndoc(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AuthInfo != nil {
		{
			size, err := m.AuthInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSigndoc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Body != nil {
		{
			size, err := m.Body.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSigndoc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSigndoc(dAtA []byte, offset int, v uint64) int {
	offset -= sovSigndoc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SignDocForMetamask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Body != nil {
		l = m.Body.Size()
		n += 1 + l + sovSigndoc(uint64(l))
	}
	if m.AuthInfo != nil {
		l = m.AuthInfo.Size()
		n += 1 + l + sovSigndoc(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovSigndoc(uint64(l))
	}
	if m.AccountNumber != 0 {
		n += 1 + sovSigndoc(uint64(m.AccountNumber))
	}
	return n
}

func sovSigndoc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSigndoc(x uint64) (n int) {
	return sovSigndoc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SignDocForMetamask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSigndoc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignDocForMetamask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignDocForMetamask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigndoc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSigndoc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSigndoc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Body == nil {
				m.Body = &tx.TxBody{}
			}
			if err := m.Body.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigndoc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSigndoc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSigndoc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthInfo == nil {
				m.AuthInfo = &tx.AuthInfo{}
			}
			if err := m.AuthInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigndoc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSigndoc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSigndoc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountNumber", wireType)
			}
			m.AccountNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigndoc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSigndoc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSigndoc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSigndoc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSigndoc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSigndoc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSigndoc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSigndoc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSigndoc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSigndoc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSigndoc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSigndoc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSigndoc = fmt.Errorf("proto: unexpected end of group")
)
