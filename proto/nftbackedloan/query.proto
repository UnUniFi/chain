syntax = "proto3";
package ununifi.nftbackedloan;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "nftbackedloan/nftbackedloan.proto";

option go_package = "github.com/UnUniFi/chain/x/nftbackedloan/types";

// Query defines the gRPC querier service.
service Query {
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/ununifi/nftbackedloan/params";
  }
  rpc NftListing(QueryNftListingRequest) returns (QueryNftListingResponse) {
    option (google.api.http).get = "/ununifi/nftbackedloan/nft_listing/{class_id}/{nft_id}";
  }
  rpc ListedNfts(QueryListedNftsRequest) returns (QueryListedNftsResponse) {
    option (google.api.http).get = "/ununifi/nftbackedloan/listed_nfts";
  }
  rpc ListedClasses(QueryListedClassesRequest) returns (QueryListedClassesResponse) {
    option (google.api.http).get = "/ununifi/nftbackedloan/listed_classes";
  }
  rpc ListedClass(QueryListedClassRequest) returns (QueryListedClassResponse) {
    option (google.api.http).get = "/ununifi/nftbackedloan/listed_class/{class_id}/{nft_limit}";
  }

  rpc Loans(QueryLoansRequest) returns (QueryLoansResponse) {
    option (google.api.http).get = "/ununifi/nftbackedloan/loans";
  }

  rpc Loan(QueryLoanRequest) returns (QueryLoanResponse) {
    option (google.api.http).get = "/ununifi/nftbackedloan/loans/{class_id}/{nft_id}";
  }
  rpc CDPsList(QueryCDPsListRequest) returns (QueryCDPsListResponse) {
    option (google.api.http).get = "/ununifi/nftbackedloan/cdps_list";
  }
  rpc NftBids(QueryNftBidsRequest) returns (QueryNftBidsResponse) {
    option (google.api.http).get = "/ununifi/nftbackedloan/nft_bids/{class_id}/{nft_id}";
  }
  rpc BidderBids(QueryBidderBidsRequest) returns (QueryBidderBidsResponse) {
    option (google.api.http).get = "/ununifi/nftbackedloan/bidder_bids/{bidder}";
  }
  rpc PaymentStatus(QueryPaymentStatusRequest) returns (QueryPaymentStatusResponse) {
    option (google.api.http).get = "/ununifi/nftbackedloan/payment_status/{class_id}/{nft_id}/{bidder}";
  }
  rpc Rewards(QueryRewardsRequest) returns (QueryRewardsResponse) {
    option (google.api.http).get = "/ununifi/nftbackedloan/rewards/{address}";
  }
  rpc Liquidation(QueryLiquidationRequest) returns (QueryLiquidationResponse) {
    option (google.api.http).get = "/ununifi/nftbackedloan/liquidation/{class_id}/{nft_id}";
  }
}

message QueryParamsRequest {}
message QueryParamsResponse {
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryNftListingRequest {
  string class_id = 1;
  string nft_id   = 2;
}
message QueryNftListingResponse {
  NftListing listing = 1 [(gogoproto.nullable) = false];
}

message QueryListedNftsRequest {
  string owner = 1 [
    (gogoproto.moretags)  = "yaml:\"owner\"",
    (cosmos_proto.scalar) = "github.com/UnUniFi/chain/types.StringAccAddress"
  ];
}
message QueryListedClassesRequest {
  int32 nft_limit = 1;
}
message QueryListedClassRequest {
  string class_id  = 1;
  int32  nft_limit = 2;
}

message NftListingDetail {
  NftListing listing = 1 [(gogoproto.nullable) = false];
  NftInfo nft_info = 2 [(gogoproto.nullable) = false];
}
message QueryListedNftsResponse {
  repeated NftListingDetail listings = 1 [(gogoproto.nullable) = false];
}

message QueryListedClassesResponse {
  repeated QueryListedClassResponse classes = 1;
}
message QueryListedClassResponse {
  string             class_id    = 1;
  string             name        = 2;
  string             description = 3;
  string             symbol      = 4;
  string             uri         = 5;
  string             urihash     = 6;
  repeated NftInfo   nfts        = 7;
  uint64             nft_count   = 8;
}

message QueryLoansRequest {}
message QueryLoansResponse {
  repeated Loan loans = 1 [(gogoproto.nullable) = false];
}

message QueryLoanRequest {
  string class_id = 1;
  string nft_id   = 2;
}

message QueryLoanResponse {
  Loan   loan            = 1 [(gogoproto.nullable) = false];
  string borrowing_limit = 2 [
    (gogoproto.moretags)   = "yaml:\"borrowing_limit\"",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable)   = false
  ];
}

message QueryCDPsListRequest {}
message QueryCDPsListResponse {
  // List of collateral rates for each NFT secured
  // Issuing stable tokens Balance list
}

message QueryNftBidsRequest {
  string class_id = 1;
  string nft_id   = 2;
}
message QueryNftBidsResponse {
  repeated NftBid bids = 1 [(gogoproto.nullable) = false];
}
message QueryPaymentStatusRequest {
  string class_id = 1;
  string nft_id   = 2;
  string bidder   = 3 [
    (gogoproto.moretags)  = "yaml:\"bidder\"",
    (cosmos_proto.scalar) = "github.com/UnUniFi/chain/types.StringAccAddress"
  ];
}

message QueryPaymentStatusResponse {
  PaymentStatus paymentStatus = 1 [(gogoproto.nullable) = false];
}

message QueryBidderBidsRequest {
  string bidder = 1 [
    (gogoproto.moretags)  = "yaml:\"bidder\"",
    (cosmos_proto.scalar) = "github.com/UnUniFi/chain/types.StringAccAddress"
  ];
}
message QueryBidderBidsResponse {
  repeated NftBid bids = 1 [(gogoproto.nullable) = false];
}

message QueryRewardsRequest {
  uint64 address = 1;
}
message QueryRewardsResponse {
  repeated cosmos.base.v1beta1.Coin rewards = 1 [(gogoproto.nullable) = false];
}

message QueryLiquidationRequest {
  string class_id = 1;
  string nft_id   = 2;
}

message QueryLiquidationResponse {
  Liquidations liquidations = 1 [(gogoproto.nullable) = true];
}
