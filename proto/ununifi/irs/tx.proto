syntax = "proto3";
package ununifi.irs;

// this line is used by starport scaffolding # proto/tx/import
import "gogoproto/gogo.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";

import "ununifi/irs/irs.proto";
import "ununifi/irs/params.proto";

option go_package = "github.com/UnUniFi/chain/x/irs/types";

// Msg defines the Msg service.
service Msg {
  // this line is used by starport scaffolding # proto/tx/rpc
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
  rpc RegisterInterestRateSwapVault(MsgRegisterInterestRateSwapVault)
      returns (MsgRegisterInterestRateSwapVaultResponse);
  rpc DepositLiquidity(MsgDepositLiquidity) returns (MsgDepositLiquidityResponse);
  rpc WithdrawLiquidity(MsgWithdrawLiquidity) returns (MsgWithdrawLiquidityResponse);
  rpc DepositToTranche(MsgDepositToTranche) returns (MsgDepositToTrancheResponse);
  rpc WithdrawFromTranche(MsgWithdrawFromTranche) returns (MsgWithdrawFromTrancheResponse);
}

message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "sender";

  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  Params params = 2 [(gogoproto.nullable) = false];
}

message MsgUpdateParamsResponse {}

// this line is used by starport scaffolding # proto/tx/message
message MsgRegisterInterestRateSwapVault {
  option (cosmos.msg.v1.signer) = "sender";

  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string sender            = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string strategy_contract = 2;
  string name              = 3;
  string description       = 4;
  uint64 max_maturity      = 5;  // e.g. 180 days
  uint64 cycle             = 6;  // e.g. 90 days
}

message MsgRegisterInterestRateSwapVaultResponse {}

message MsgDepositLiquidity {
  option (cosmos.msg.v1.signer) = "sender";

  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string sender            = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string strategy_contract = 2;
  string amount            = 3 [
    (cosmos_proto.scalar)  = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable)   = false
  ];
}

message MsgDepositLiquidityResponse {}

message MsgWithdrawLiquidity {
  string sender            = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string strategy_contract = 2;
  string share_amount      = 3 [
    (cosmos_proto.scalar)  = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable)   = false
  ];
}
message MsgWithdrawLiquidityResponse {}

enum TrancheType {
  NORMAL_YIELD             = 0;
  FIXED_YIELD              = 1;
  LEVERAGED_VARIABLE_YIELD = 2;
}

message MsgDepositToTranche {
  option (cosmos.msg.v1.signer) = "sender";

  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string                   sender            = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string                   strategy_contract = 2;
  TrancheType              tranche_type      = 3;
  uint64                   tranche_maturity  = 4;                                 // maturity timestamp
  cosmos.base.v1beta1.Coin token             = 5 [(gogoproto.nullable) = false];  // Underlying token to be spent
  cosmos.base.v1beta1.Coin required_yt       = 6
      [(gogoproto.nullable) = false];  // Only valid for leveraged yield tranche type
}

message MsgDepositToTrancheResponse {}

message MsgWithdrawFromTranche {
  option (cosmos.msg.v1.signer) = "sender";

  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string                   sender            = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string                   strategy_contract = 2;
  TrancheType              tranche_type      = 3;
  cosmos.base.v1beta1.Coin token             = 4
      [(gogoproto.nullable) = false];  // YT if tranche type is yield, PT if tranche type is fixed yield
}

message MsgWithdrawFromTrancheResponse {}
