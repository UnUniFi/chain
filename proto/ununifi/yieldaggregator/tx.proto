syntax = "proto3";
package ununifi.yieldaggregator;

// this line is used by starport scaffolding # proto/tx/import
import "gogoproto/gogo.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";

import "ununifi/yieldaggregator/yieldaggregator.proto";
import "ununifi/yieldaggregator/params.proto";

option go_package = "github.com/UnUniFi/chain/x/yieldaggregator/types";

// Msg defines the Msg service.
service Msg {
  // this line is used by starport scaffolding # proto/tx/rpc
  rpc DepositToVault(MsgDepositToVault) returns (MsgDepositToVaultResponse);
  rpc WithdrawFromVault(MsgWithdrawFromVault) returns (MsgWithdrawFromVaultResponse);
  rpc WithdrawFromVaultWithUnbondingTime(MsgWithdrawFromVaultWithUnbondingTime)
      returns (MsgWithdrawFromVaultWithUnbondingTimeResponse);
  rpc CreateVault(MsgCreateVault) returns (MsgCreateVaultResponse);
  rpc TransferVaultOwnership(MsgTransferVaultOwnership) returns (MsgTransferVaultOwnershipResponse);
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
  rpc RegisterStrategy(MsgRegisterStrategy) returns (MsgRegisterStrategyResponse);
  rpc DeleteVault(MsgDeleteVault) returns (MsgDeleteVaultResponse);
  rpc UpdateVault(MsgUpdateVault) returns (MsgUpdateVaultResponse);
  rpc UpdateStrategy(MsgUpdateStrategy) returns (MsgUpdateStrategyResponse);
  rpc RegisterDenomInfos(MsgRegisterDenomInfos) returns (MsgRegisterDenomInfosResponse);
  rpc RegisterSymbolInfos(MsgSymbolInfos) returns (MsgSymbolInfosResponse);
  rpc SetIntermediaryAccountInfo(MsgSetIntermediaryAccountInfo) returns (MsgSetIntermediaryAccountInfoResponse);
}

// this line is used by starport scaffolding # proto/tx/message
message MsgDepositToVault {
  option (cosmos.msg.v1.signer) = "sender";

  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string                   sender   = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  uint64                   vault_id = 2;
  cosmos.base.v1beta1.Coin amount   = 3 [(gogoproto.nullable) = false];
}

message MsgDepositToVaultResponse {}

message MsgWithdrawFromVault {
  option (cosmos.msg.v1.signer) = "sender";

  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string sender          = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  uint64 vault_id        = 2;
  string lp_token_amount = 3 [
    (cosmos_proto.scalar)  = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable)   = false
  ];
}

message MsgWithdrawFromVaultResponse {}

message MsgWithdrawFromVaultWithUnbondingTime {
  string sender          = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  uint64 vault_id        = 2;
  string lp_token_amount = 3 [
    (cosmos_proto.scalar)  = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable)   = false
  ];
}
message MsgWithdrawFromVaultWithUnbondingTimeResponse {}

message MsgCreateVault {
  option (cosmos.msg.v1.signer) = "sender";

  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string sender          = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string symbol          = 2;
  string name            = 3;
  string description     = 4;
  string commission_rate = 5 [
    (cosmos_proto.scalar)  = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable)   = false
  ];
  string withdraw_reserve_rate = 6 [
    (cosmos_proto.scalar)  = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable)   = false
  ];
  repeated StrategyWeight  strategy_weights      = 7 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin fee                   = 8 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin deposit               = 9 [(gogoproto.nullable) = false];
  string                   fee_collector_address = 10;
}

message MsgCreateVaultResponse {
  uint64 id = 1;
}

message MsgUpdateVault {
  option (cosmos.msg.v1.signer) = "sender";

  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string sender                = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  uint64 id                    = 2;
  string name                  = 3;
  string description           = 4;
  string fee_collector_address = 5;
}

message MsgUpdateVaultResponse {}

message MsgTransferVaultOwnership {
  option (cosmos.msg.v1.signer) = "sender";

  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string sender    = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  uint64 vault_id  = 2;
  string recipient = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message MsgTransferVaultOwnershipResponse {}

message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "sender";

  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  Params params = 2 [(gogoproto.nullable) = false];
}

message MsgUpdateParamsResponse {}

message MsgRegisterStrategy {
  option (cosmos.msg.v1.signer) = "sender";

  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string sender           = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string denom            = 2;
  string contract_address = 3;
  string name             = 4;
  string description      = 5;
  string git_url          = 6;
}

message MsgRegisterStrategyResponse {}

message MsgUpdateStrategy {
  option (cosmos.msg.v1.signer) = "sender";

  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string sender      = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string denom       = 2;
  uint64 id          = 3;
  string name        = 4;
  string description = 5;
  string git_url     = 6;
}

message MsgUpdateStrategyResponse {}

message MsgDeleteVault {
  option (cosmos.msg.v1.signer) = "sender";

  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string sender   = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  uint64 vault_id = 2;
}

message MsgDeleteVaultResponse {}

message MsgRegisterDenomInfos {
  string             sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  repeated DenomInfo info   = 2 [(gogoproto.nullable) = false];
}
message MsgRegisterDenomInfosResponse {}

message MsgSymbolInfos {
  string              sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  repeated SymbolInfo info   = 2 [(gogoproto.nullable) = false];
}
message MsgSymbolInfosResponse {}

message MsgSetIntermediaryAccountInfo {
  string                sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  repeated ChainAddress addrs  = 2 [(gogoproto.nullable) = false];
}
message MsgSetIntermediaryAccountInfoResponse {}
