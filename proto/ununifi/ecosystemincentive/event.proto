syntax = "proto3";
package ununifi.ecosystemincentive;

import "ununifi/ecosystemincentive/ecosystemincentive.proto";
import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/UnUniFi/chain/x/ecosystemincentive/types";

message EventWithdrawAllRewards {
  string   sender                                         = 1 [(gogoproto.moretags) = "yaml:\"sender\""];
  repeated cosmos.base.v1beta1.Coin all_withdrawn_rewards = 2 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.moretags)     = "yaml:\"all_withdrawn_rewards\"",
    (gogoproto.nullable)     = false
  ];
}

message EventWithdrawReward {
  string                   sender           = 1 [(gogoproto.moretags) = "yaml:\"sender\""];
  cosmos.base.v1beta1.Coin withdrawn_reward = 2 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.moretags)     = "yaml:\"withdrawn_reward\"",
    (gogoproto.nullable)     = false
  ];
}

// message EventFailedParsingTxMemoData {
//   string class_id = 1 [(gogoproto.moretags) = "yaml:\"class_id\""];
//   string nft_id   = 2 [(gogoproto.moretags) = "yaml:\"nft_id\""];
//   string memo     = 3 [(gogoproto.moretags) = "yaml:\"memo\""];
// }

message EventRecordedRecipientWithNftId {
  string recipient = 1 [(gogoproto.moretags) = "yaml:\"recipient\""];
  string class_id  = 2 [(gogoproto.moretags) = "yaml:\"class_id\""];
  string token_id  = 3 [(gogoproto.moretags) = "yaml:\"nft_id\""];
}

message EventDeletedNftIdRecordedForFrontendReward {
  string recipient = 1 [(gogoproto.moretags) = "yaml:\"recipient\""];
  string class_id  = 2 [(gogoproto.moretags) = "yaml:\"class_id\""];
  string token_id  = 3 [(gogoproto.moretags) = "yaml:\"nft_id\""];
}

message EventNotRecordedNftId {
  string class_id = 1 [(gogoproto.moretags) = "yaml:\"class_id\""];
  string token_id   = 2 [(gogoproto.moretags) = "yaml:\"nft_id\""];
}

message EventUpdatedReward {
  string                   recipient     = 1 [(gogoproto.moretags) = "yaml:\"recipient\""];
  cosmos.base.v1beta1.Coin earned_reward = 2 [
    (gogoproto.moretags)     = "yaml:\"earned_reward\"",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.nullable)     = false
  ];
}

message EventDistributionForStakers {
  cosmos.base.v1beta1.Coin distributed_amount = 1 [
    (gogoproto.moretags)     = "yaml:\"distributed_amount\"",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.nullable)     = false
  ];
  int64 block_height = 2 [(gogoproto.moretags) = "yaml:\"block_height\""];
}

message EventVersionUnmatched {
  uint32 unmatched_version = 1 [(gogoproto.moretags) = "yaml:\"unmatched_version\""];
  string class_id          = 2 [(gogoproto.moretags) = "yaml:\"class_id\""];
  string nft_id            = 3 [(gogoproto.moretags) = "yaml:\"nft_id\""];
}
