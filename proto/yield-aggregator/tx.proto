syntax = "proto3";
package ununifi.chain.yieldaggregator;

// this line is used by starport scaffolding # proto/tx/import
import "gogoproto/gogo.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/UnUniFi/chain/x/yield-aggregator/types";

// Msg defines the Msg service.
service Msg {
    // this line is used by starport scaffolding # proto/tx/rpc
    rpc DepositToVault(MsgDepositToVault) returns (MsgDepositToVaultResponse);
    rpc WithdrawFromVault(MsgWithdrawFromVault) returns (MsgWithdrawFromVaultResponse);
}

// this line is used by starport scaffolding # proto/tx/message
message MsgDepositToVault {
  option (cosmos.msg.v1.signer) = "sender";

  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  cosmos.base.v1beta1.Coin amount = 2 [(gogoproto.nullable) = false];
}

message MsgDepositToVaultResponse {}

message MsgWithdrawFromVault {
  option (cosmos.msg.v1.signer) = "sender";

  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string vault_denom = 2;
  string lp_token_amount = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

message MsgWithdrawFromVaultResponse {}
