syntax = "proto3";
package ununifi.ecosystemincentive;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "ecosystem-incentive/genesis.proto";
import "ecosystem-incentive/ecosystem_incentive.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/UnUniFi/chain/x/ecosystem-incentive/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/ununifi/ecosystem_incentive/params";
  }
  
  rpc IncentiveUnit(QueryIncentiveUnitRequest) returns (QueryIncentiveUnitResponse) {
    option (google.api.http).get = "/ununifi/ecosystem_incentive/incentive_unit/{incentive_unit_id}";
  }

  rpc AllRewards(QueryAllRewardsRequest) returns (QueryAllRewardsResponse) {
    option (google.api.http).get = "/ununifi/ecosystem_incentive/all_rewards/{subject_addr}";
  }
   
  rpc Reward(QueryRewardRequest) returns (QueryRewardResponse) {
    option (google.api.http).get = "/ununifi/ecosystem_incentive/reward/{subject_addr}/{denom}";
  }
}

message QueryParamsRequest {}

message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [ 
    (gogoproto.moretags) = "yaml:\"params\"",
    (gogoproto.nullable) = false
  ];
}

message QueryIncentiveUnitRequest {
  string incentive_unit_id = 1 [ (gogoproto.moretags) = "yaml:\"incentive_unit_id\"" ];
}

message QueryIncentiveUnitResponse {
  IncentiveUnit incentive_unit = 1 [ (gogoproto.moretags) = "yaml:\"incentive_unit\"" ];
}

message QueryAllRewardsRequest {
  string subject_addr = 1 [ (gogoproto.moretags) = "yaml:\"subject_addr\"" ];
}

message QueryAllRewardsResponse {
  Reward rewards = 1 [
    (gogoproto.moretags) = "yaml:\"rewards\"",
    (gogoproto.nullable) = false
  ];
}

message QueryRewardRequest {
  string subject_addr = 1 [ (gogoproto.moretags) = "yaml:\"subject_addr\"" ];
  string denom = 2 [ (gogoproto.moretags) = "yaml:\"denom\"" ];
}

message QueryRewardResponse {
  cosmos.base.v1beta1.Coin reward = 1 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.moretags) = "yaml:\"reward\"",
    (gogoproto.nullable) = false
  ];
}
