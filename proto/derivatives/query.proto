syntax = "proto3";
package ununifi.derivatives;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "derivatives/derivatives.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/UnUniFi/chain/x/derivatives/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/UnUniFi/derivatives/params";
  }
  // this line is used by starport scaffolding # 2
  rpc ClaimableLiquidityProviderRewards(QueryClaimableLiquidityProviderRewardsRequest) returns (QueryClaimableLiquidityProviderRewardsResponse) {
    option (google.api.http).get = "/UnUniFi/derivatives/liquidity-providers/{address}/claimable-rewards";
  }

  rpc Positions(QueryPositionsRequest) returns (QueryPositionsResponse) {
    option (google.api.http).get = "/UnUniFi/derivatives/positions/{address}";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

// this line is used by starport scaffolding # 3
message QueryClaimableLiquidityProviderRewardsRequest {
  string address = 1 [
    (gogoproto.moretags)  = "yaml:\"address\"",
    (cosmos_proto.scalar) = "github.com/UnUniFi/chain/types.StringAccAddress"
  ];
}

message QueryClaimableLiquidityProviderRewardsResponse {
  repeated cosmos.base.v1beta1.Coin amount = 1;
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryPositionsRequest {
  string address = 1 [
    (gogoproto.moretags)  = "yaml:\"address\"",
    (cosmos_proto.scalar) = "github.com/UnUniFi/chain/types.StringAccAddress"
  ];
}

message QueryPositionsResponse {
  repeated WrappedPosition positions = 1;
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
