syntax = "proto3";
package ununifi.wrappedbank;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "wrappedbank/bank.proto";
import "cosmos_proto/cosmos.proto";
import "wrappedbank/msg.proto";
import "wrappedbank/amino.proto";

option go_package = "github.com/UnUniFi/chain/x/wrappedbank/types";

// Msg defines the bank Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // Send defines a method for sending coins from one account to another account.
  rpc Send(MsgSend) returns (MsgSendResponse);

}

// MsgSend represents a message to send coins from one account to another.
message MsgSend {
  option (cosmos.msg.v1.signer) = "from_address";
  option (amino.name)           = "cosmos-sdk/MsgSend";

  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string   from_address                    = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string   to_address                      = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  repeated cosmos.base.v1beta1.Coin amount = 3 [
    (gogoproto.nullable)     = false,
    (amino.dont_omitempty)   = true,
    (amino.encoding)         = "legacy_coins",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

// MsgSendResponse defines the Msg/Send response type.
message MsgSendResponse {}
