// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: decentralized-vault/decentralized-vault.proto

package types

import (
	fmt "fmt"
	github_com_UnUniFi_chain_types "github.com/UnUniFi/chain/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TransferRequest struct {
	Owner      string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	EthAddress string `protobuf:"bytes,2,opt,name=eth_address,json=ethAddress,proto3" json:"eth_address,omitempty"`
	NftId      string `protobuf:"bytes,3,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
}

func (m *TransferRequest) Reset()         { *m = TransferRequest{} }
func (m *TransferRequest) String() string { return proto.CompactTextString(m) }
func (*TransferRequest) ProtoMessage()    {}
func (*TransferRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_51f9ef00df39e8a2, []int{0}
}
func (m *TransferRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransferRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferRequest.Merge(m, src)
}
func (m *TransferRequest) XXX_Size() int {
	return m.Size()
}
func (m *TransferRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransferRequest proto.InternalMessageInfo

func (m *TransferRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *TransferRequest) GetEthAddress() string {
	if m != nil {
		return m.EthAddress
	}
	return ""
}

func (m *TransferRequest) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

type TransferRequestNft struct {
	Id         string                                          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Uri        string                                          `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	UriHash    string                                          `protobuf:"bytes,3,opt,name=uri_hash,json=uriHash,proto3" json:"uri_hash,omitempty"`
	Owner      github_com_UnUniFi_chain_types.StringAccAddress `protobuf:"bytes,4,opt,name=owner,proto3,customtype=github.com/UnUniFi/chain/types.StringAccAddress" json:"owner" yaml:"sender"`
	EthAddress string                                          `protobuf:"bytes,6,opt,name=ethAddress,proto3" json:"ethAddress,omitempty"`
}

func (m *TransferRequestNft) Reset()         { *m = TransferRequestNft{} }
func (m *TransferRequestNft) String() string { return proto.CompactTextString(m) }
func (*TransferRequestNft) ProtoMessage()    {}
func (*TransferRequestNft) Descriptor() ([]byte, []int) {
	return fileDescriptor_51f9ef00df39e8a2, []int{1}
}
func (m *TransferRequestNft) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferRequestNft) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferRequestNft.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransferRequestNft) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferRequestNft.Merge(m, src)
}
func (m *TransferRequestNft) XXX_Size() int {
	return m.Size()
}
func (m *TransferRequestNft) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferRequestNft.DiscardUnknown(m)
}

var xxx_messageInfo_TransferRequestNft proto.InternalMessageInfo

func (m *TransferRequestNft) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TransferRequestNft) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *TransferRequestNft) GetUriHash() string {
	if m != nil {
		return m.UriHash
	}
	return ""
}

func (m *TransferRequestNft) GetEthAddress() string {
	if m != nil {
		return m.EthAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*TransferRequest)(nil), "ununifi.decentralizedvault.TransferRequest")
	proto.RegisterType((*TransferRequestNft)(nil), "ununifi.decentralizedvault.TransferRequestNft")
}

func init() {
	proto.RegisterFile("decentralized-vault/decentralized-vault.proto", fileDescriptor_51f9ef00df39e8a2)
}

var fileDescriptor_51f9ef00df39e8a2 = []byte{
	// 351 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x51, 0xcd, 0x4e, 0xea, 0x40,
	0x18, 0x6d, 0xe1, 0x5e, 0xee, 0xbd, 0x73, 0xe3, 0x4f, 0x26, 0x98, 0x54, 0x16, 0x2d, 0xe9, 0xca,
	0x0d, 0xed, 0x42, 0x57, 0xee, 0x60, 0x61, 0x70, 0xc3, 0x02, 0x65, 0xe3, 0xc2, 0x66, 0xe8, 0x4c,
	0x3b, 0x5f, 0x02, 0x53, 0x9c, 0x1f, 0x15, 0x9f, 0xc2, 0xc7, 0x62, 0x89, 0x3b, 0xe3, 0x82, 0x18,
	0x78, 0x03, 0x9f, 0xc0, 0xd0, 0x96, 0x44, 0x09, 0xee, 0xbe, 0x39, 0x73, 0xbe, 0xef, 0x9c, 0x93,
	0x83, 0x5a, 0x94, 0xc5, 0x4c, 0x68, 0x49, 0x46, 0xf0, 0xc4, 0x68, 0xeb, 0x9e, 0x98, 0x91, 0x0e,
	0x77, 0x60, 0xc1, 0x44, 0x66, 0x3a, 0xc3, 0x0d, 0x23, 0x8c, 0x80, 0x04, 0x82, 0x6f, 0x94, 0x9c,
	0xd1, 0xa8, 0xa7, 0x59, 0x9a, 0xe5, 0xb4, 0x70, 0x3d, 0x15, 0x1b, 0x8d, 0xe6, 0x2e, 0x81, 0x09,
	0x91, 0x64, 0xac, 0x0a, 0x86, 0x1f, 0xa1, 0x83, 0x6b, 0x49, 0x84, 0x4a, 0x98, 0xec, 0xb3, 0x3b,
	0xc3, 0x94, 0xc6, 0x75, 0xf4, 0x3b, 0x7b, 0x10, 0x4c, 0x3a, 0x76, 0xd3, 0x3e, 0xf9, 0xd7, 0x2f,
	0x1e, 0xd8, 0x43, 0xff, 0x99, 0xe6, 0x11, 0xa1, 0x54, 0x32, 0xa5, 0x9c, 0x4a, 0xfe, 0x87, 0x98,
	0xe6, 0xed, 0x02, 0xc1, 0x47, 0xa8, 0x26, 0x12, 0x1d, 0x01, 0x75, 0xaa, 0xc5, 0x9e, 0x48, 0xf4,
	0x25, 0xf5, 0x5f, 0x6c, 0x84, 0xb7, 0x14, 0x7a, 0x89, 0xc6, 0xfb, 0xa8, 0x02, 0xb4, 0x54, 0xa8,
	0x00, 0xc5, 0x87, 0xa8, 0x6a, 0x24, 0x94, 0x67, 0xd7, 0x23, 0x3e, 0x46, 0x7f, 0x8d, 0x84, 0x88,
	0x13, 0xc5, 0xcb, 0x8b, 0x7f, 0x8c, 0x84, 0x2e, 0x51, 0x1c, 0xdf, 0x6e, 0x1c, 0xfe, 0x5a, 0xe3,
	0x9d, 0xee, 0x6c, 0xe1, 0x59, 0x6f, 0x0b, 0x2f, 0x4c, 0x41, 0x73, 0x33, 0x0c, 0xe2, 0x6c, 0x1c,
	0x0e, 0xc4, 0x40, 0xc0, 0x05, 0x84, 0x31, 0x27, 0x20, 0x42, 0x3d, 0x9d, 0x30, 0x15, 0x5c, 0x69,
	0x09, 0x22, 0x6d, 0xc7, 0x71, 0x69, 0xf9, 0x63, 0xe1, 0xed, 0x4d, 0xc9, 0x78, 0x74, 0xee, 0x2b,
	0x26, 0x28, 0x93, 0xfe, 0x26, 0xab, 0x8b, 0xbe, 0x04, 0x73, 0x6a, 0xdb, 0x51, 0x3b, 0xbd, 0xd9,
	0xd2, 0xb5, 0xe7, 0x4b, 0xd7, 0x7e, 0x5f, 0xba, 0xf6, 0xf3, 0xca, 0xb5, 0xe6, 0x2b, 0xd7, 0x7a,
	0x5d, 0xb9, 0xd6, 0xcd, 0xd9, 0x8f, 0x16, 0x1e, 0x77, 0x15, 0x5b, 0x18, 0x1b, 0xd6, 0xf2, 0x2e,
	0x4e, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xe7, 0x9b, 0xa9, 0x7a, 0x10, 0x02, 0x00, 0x00,
}

func (m *TransferRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransferRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintDecentralizedVault(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EthAddress) > 0 {
		i -= len(m.EthAddress)
		copy(dAtA[i:], m.EthAddress)
		i = encodeVarintDecentralizedVault(dAtA, i, uint64(len(m.EthAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintDecentralizedVault(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransferRequestNft) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferRequestNft) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransferRequestNft) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EthAddress) > 0 {
		i -= len(m.EthAddress)
		copy(dAtA[i:], m.EthAddress)
		i = encodeVarintDecentralizedVault(dAtA, i, uint64(len(m.EthAddress)))
		i--
		dAtA[i] = 0x32
	}
	{
		size := m.Owner.Size()
		i -= size
		if _, err := m.Owner.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDecentralizedVault(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.UriHash) > 0 {
		i -= len(m.UriHash)
		copy(dAtA[i:], m.UriHash)
		i = encodeVarintDecentralizedVault(dAtA, i, uint64(len(m.UriHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintDecentralizedVault(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintDecentralizedVault(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDecentralizedVault(dAtA []byte, offset int, v uint64) int {
	offset -= sovDecentralizedVault(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TransferRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovDecentralizedVault(uint64(l))
	}
	l = len(m.EthAddress)
	if l > 0 {
		n += 1 + l + sovDecentralizedVault(uint64(l))
	}
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovDecentralizedVault(uint64(l))
	}
	return n
}

func (m *TransferRequestNft) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDecentralizedVault(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovDecentralizedVault(uint64(l))
	}
	l = len(m.UriHash)
	if l > 0 {
		n += 1 + l + sovDecentralizedVault(uint64(l))
	}
	l = m.Owner.Size()
	n += 1 + l + sovDecentralizedVault(uint64(l))
	l = len(m.EthAddress)
	if l > 0 {
		n += 1 + l + sovDecentralizedVault(uint64(l))
	}
	return n
}

func sovDecentralizedVault(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDecentralizedVault(x uint64) (n int) {
	return sovDecentralizedVault(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TransferRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDecentralizedVault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecentralizedVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDecentralizedVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDecentralizedVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecentralizedVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDecentralizedVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDecentralizedVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecentralizedVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDecentralizedVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDecentralizedVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDecentralizedVault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDecentralizedVault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferRequestNft) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDecentralizedVault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferRequestNft: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferRequestNft: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecentralizedVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDecentralizedVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDecentralizedVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecentralizedVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDecentralizedVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDecentralizedVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UriHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecentralizedVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDecentralizedVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDecentralizedVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UriHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecentralizedVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDecentralizedVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDecentralizedVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecentralizedVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDecentralizedVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDecentralizedVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDecentralizedVault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDecentralizedVault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDecentralizedVault(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDecentralizedVault
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDecentralizedVault
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDecentralizedVault
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDecentralizedVault
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDecentralizedVault
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDecentralizedVault
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDecentralizedVault        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDecentralizedVault          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDecentralizedVault = fmt.Errorf("proto: unexpected end of group")
)
