// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: yield-aggregator/yield-aggregator.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StrategyWeight struct {
	StrategyId uint64                                 `protobuf:"varint,1,opt,name=strategy_id,json=strategyId,proto3" json:"strategy_id,omitempty"`
	Weight     github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=weight,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"weight"`
}

func (m *StrategyWeight) Reset()         { *m = StrategyWeight{} }
func (m *StrategyWeight) String() string { return proto.CompactTextString(m) }
func (*StrategyWeight) ProtoMessage()    {}
func (*StrategyWeight) Descriptor() ([]byte, []int) {
	return fileDescriptor_f10d0c9816d2a3d4, []int{0}
}
func (m *StrategyWeight) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StrategyWeight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StrategyWeight.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StrategyWeight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StrategyWeight.Merge(m, src)
}
func (m *StrategyWeight) XXX_Size() int {
	return m.Size()
}
func (m *StrategyWeight) XXX_DiscardUnknown() {
	xxx_messageInfo_StrategyWeight.DiscardUnknown(m)
}

var xxx_messageInfo_StrategyWeight proto.InternalMessageInfo

func (m *StrategyWeight) GetStrategyId() uint64 {
	if m != nil {
		return m.StrategyId
	}
	return 0
}

type Vault struct {
	Id                     uint64                                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Denom                  string                                 `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Owner                  string                                 `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	OwnerDeposit           types.Coin                             `protobuf:"bytes,4,opt,name=owner_deposit,json=ownerDeposit,proto3" json:"owner_deposit"`
	WithdrawCommissionRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=withdraw_commission_rate,json=withdrawCommissionRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"withdraw_commission_rate"`
	StrategyWeights        []StrategyWeight                       `protobuf:"bytes,6,rep,name=strategy_weights,json=strategyWeights,proto3" json:"strategy_weights"`
}

func (m *Vault) Reset()         { *m = Vault{} }
func (m *Vault) String() string { return proto.CompactTextString(m) }
func (*Vault) ProtoMessage()    {}
func (*Vault) Descriptor() ([]byte, []int) {
	return fileDescriptor_f10d0c9816d2a3d4, []int{1}
}
func (m *Vault) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vault) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vault.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vault) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vault.Merge(m, src)
}
func (m *Vault) XXX_Size() int {
	return m.Size()
}
func (m *Vault) XXX_DiscardUnknown() {
	xxx_messageInfo_Vault.DiscardUnknown(m)
}

var xxx_messageInfo_Vault proto.InternalMessageInfo

func (m *Vault) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Vault) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *Vault) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Vault) GetOwnerDeposit() types.Coin {
	if m != nil {
		return m.OwnerDeposit
	}
	return types.Coin{}
}

func (m *Vault) GetStrategyWeights() []StrategyWeight {
	if m != nil {
		return m.StrategyWeights
	}
	return nil
}

type Strategy struct {
	Denom           string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Id              uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	ContractAddress string `protobuf:"bytes,3,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	Name            string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *Strategy) Reset()         { *m = Strategy{} }
func (m *Strategy) String() string { return proto.CompactTextString(m) }
func (*Strategy) ProtoMessage()    {}
func (*Strategy) Descriptor() ([]byte, []int) {
	return fileDescriptor_f10d0c9816d2a3d4, []int{2}
}
func (m *Strategy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Strategy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Strategy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Strategy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Strategy.Merge(m, src)
}
func (m *Strategy) XXX_Size() int {
	return m.Size()
}
func (m *Strategy) XXX_DiscardUnknown() {
	xxx_messageInfo_Strategy.DiscardUnknown(m)
}

var xxx_messageInfo_Strategy proto.InternalMessageInfo

func (m *Strategy) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *Strategy) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Strategy) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *Strategy) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type VaultMetrics struct {
	Allocation github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=allocation,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"allocation"`
	Apy        github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=apy,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"apy"`
}

func (m *VaultMetrics) Reset()         { *m = VaultMetrics{} }
func (m *VaultMetrics) String() string { return proto.CompactTextString(m) }
func (*VaultMetrics) ProtoMessage()    {}
func (*VaultMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_f10d0c9816d2a3d4, []int{3}
}
func (m *VaultMetrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VaultMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VaultMetrics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VaultMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VaultMetrics.Merge(m, src)
}
func (m *VaultMetrics) XXX_Size() int {
	return m.Size()
}
func (m *VaultMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_VaultMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_VaultMetrics proto.InternalMessageInfo

type StrategyMetrics struct {
	Allocation github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=allocation,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"allocation"`
	Apr        github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=apr,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"apr"`
}

func (m *StrategyMetrics) Reset()         { *m = StrategyMetrics{} }
func (m *StrategyMetrics) String() string { return proto.CompactTextString(m) }
func (*StrategyMetrics) ProtoMessage()    {}
func (*StrategyMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_f10d0c9816d2a3d4, []int{4}
}
func (m *StrategyMetrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StrategyMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StrategyMetrics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StrategyMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StrategyMetrics.Merge(m, src)
}
func (m *StrategyMetrics) XXX_Size() int {
	return m.Size()
}
func (m *StrategyMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_StrategyMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_StrategyMetrics proto.InternalMessageInfo

func init() {
	proto.RegisterType((*StrategyWeight)(nil), "ununifi.chain.yieldaggregator.StrategyWeight")
	proto.RegisterType((*Vault)(nil), "ununifi.chain.yieldaggregator.Vault")
	proto.RegisterType((*Strategy)(nil), "ununifi.chain.yieldaggregator.Strategy")
	proto.RegisterType((*VaultMetrics)(nil), "ununifi.chain.yieldaggregator.VaultMetrics")
	proto.RegisterType((*StrategyMetrics)(nil), "ununifi.chain.yieldaggregator.StrategyMetrics")
}

func init() {
	proto.RegisterFile("yield-aggregator/yield-aggregator.proto", fileDescriptor_f10d0c9816d2a3d4)
}

var fileDescriptor_f10d0c9816d2a3d4 = []byte{
	// 565 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x94, 0x4f, 0x8b, 0x13, 0x3f,
	0x18, 0xc7, 0x3b, 0xfd, 0xc7, 0x6f, 0xd3, 0xfd, 0x6d, 0x97, 0x50, 0x64, 0x76, 0xc1, 0x69, 0xe9,
	0x41, 0xeb, 0xa1, 0x19, 0xba, 0x5e, 0xbd, 0xd8, 0x2d, 0x42, 0x11, 0x3d, 0xcc, 0xba, 0x0a, 0x22,
	0x0e, 0x69, 0x26, 0x4e, 0x83, 0x9d, 0xa4, 0x24, 0xe9, 0xd6, 0xbe, 0x02, 0xaf, 0xbe, 0x98, 0x3d,
	0x0a, 0x5e, 0xf7, 0xb8, 0xec, 0x49, 0x3c, 0x2c, 0xd2, 0xbe, 0x0c, 0x2f, 0xd2, 0x24, 0xed, 0x76,
	0x15, 0x04, 0xa1, 0x78, 0x9a, 0xe4, 0xc9, 0xf3, 0x7c, 0x9f, 0x3c, 0x9f, 0x6f, 0x18, 0x70, 0x7f,
	0xc6, 0xe8, 0x28, 0x69, 0xe3, 0x34, 0x95, 0x34, 0xc5, 0x5a, 0xc8, 0xf0, 0xd7, 0x00, 0x1a, 0x4b,
	0xa1, 0x05, 0xbc, 0x3b, 0xe1, 0x13, 0xce, 0xde, 0x31, 0x44, 0x86, 0x98, 0x71, 0x64, 0xb2, 0x6e,
	0x92, 0x0e, 0x6b, 0xa9, 0x48, 0x85, 0xc9, 0x0c, 0x97, 0x2b, 0x5b, 0x74, 0x78, 0x40, 0x84, 0xca,
	0x84, 0x8a, 0xed, 0x81, 0xdd, 0xb8, 0xa3, 0xc0, 0xee, 0xc2, 0x01, 0x56, 0x34, 0x3c, 0xeb, 0x0c,
	0xa8, 0xc6, 0x9d, 0x90, 0x08, 0xc6, 0xed, 0x79, 0xf3, 0xa3, 0x07, 0xf6, 0x4e, 0xb4, 0xc4, 0x9a,
	0xa6, 0xb3, 0x57, 0x94, 0xa5, 0x43, 0x0d, 0xeb, 0xa0, 0xa2, 0x5c, 0x24, 0x66, 0x89, 0xef, 0x35,
	0xbc, 0x56, 0x31, 0x02, 0xab, 0x50, 0x3f, 0x81, 0x2f, 0x40, 0x79, 0x6a, 0x52, 0xfd, 0x7c, 0xc3,
	0x6b, 0xed, 0x74, 0x1f, 0x5d, 0x5c, 0xd7, 0x73, 0xdf, 0xae, 0xeb, 0xf7, 0x52, 0xa6, 0x87, 0x93,
	0x01, 0x22, 0x22, 0x73, 0x97, 0x70, 0x9f, 0xb6, 0x4a, 0xde, 0x87, 0x7a, 0x36, 0xa6, 0x0a, 0xf5,
	0x28, 0xb9, 0x3a, 0x6f, 0x03, 0x77, 0xc7, 0x1e, 0x25, 0x91, 0xd3, 0x6a, 0xfe, 0xc8, 0x83, 0xd2,
	0x4b, 0x3c, 0x19, 0x69, 0xb8, 0x07, 0xf2, 0xeb, 0xbe, 0x79, 0x96, 0xc0, 0x1a, 0x28, 0x25, 0x94,
	0x8b, 0xcc, 0xb6, 0x8b, 0xec, 0x06, 0x22, 0x50, 0x12, 0x53, 0x4e, 0xa5, 0x5f, 0x30, 0x97, 0xf0,
	0xaf, 0xce, 0xdb, 0x35, 0x27, 0xfb, 0x38, 0x49, 0x24, 0x55, 0xea, 0x44, 0x4b, 0xc6, 0xd3, 0xc8,
	0xa6, 0xc1, 0x1e, 0xf8, 0xdf, 0x2c, 0xe2, 0x84, 0x8e, 0x85, 0x62, 0xda, 0x2f, 0x36, 0xbc, 0x56,
	0xe5, 0xe8, 0x00, 0xb9, 0xa2, 0x25, 0x21, 0xe4, 0x08, 0xa1, 0x63, 0xc1, 0x78, 0xb7, 0xb8, 0x9c,
	0x2b, 0xda, 0x35, 0x55, 0x3d, 0x5b, 0x04, 0xcf, 0x80, 0x3f, 0x65, 0x7a, 0x98, 0x48, 0x3c, 0x8d,
	0x89, 0xc8, 0x32, 0xa6, 0x14, 0x13, 0x3c, 0x5e, 0xb2, 0xf1, 0x4b, 0x5b, 0xa0, 0x71, 0x67, 0xa5,
	0x7e, 0xbc, 0x16, 0x8f, 0xb0, 0xa6, 0xf0, 0x2d, 0xd8, 0x5f, 0x9b, 0x62, 0x81, 0x29, 0xbf, 0xdc,
	0x28, 0xb4, 0x2a, 0x47, 0x6d, 0xf4, 0xc7, 0x27, 0x83, 0x6e, 0xbb, 0xeb, 0x86, 0xaa, 0xaa, 0x5b,
	0x51, 0xd5, 0x14, 0xe0, 0xbf, 0x55, 0xe2, 0x0d, 0x6f, 0x6f, 0x93, 0xb7, 0x75, 0x25, 0xbf, 0x76,
	0xe5, 0x01, 0xd8, 0x27, 0x82, 0x6b, 0x89, 0x89, 0x8e, 0xb1, 0x05, 0x6e, 0xad, 0x88, 0xaa, 0xab,
	0xb8, 0xf3, 0x01, 0x42, 0x50, 0xe4, 0x38, 0xa3, 0x86, 0xf8, 0x4e, 0x64, 0xd6, 0xcd, 0xcf, 0x1e,
	0xd8, 0x35, 0x76, 0x3f, 0xa3, 0x5a, 0x32, 0xa2, 0xe0, 0x1b, 0x00, 0xf0, 0x68, 0x24, 0x08, 0xd6,
	0x4c, 0x70, 0xdb, 0xfa, 0xaf, 0x58, 0xf6, 0xb9, 0xde, 0x60, 0xd9, 0xe7, 0x3a, 0xda, 0xd0, 0x83,
	0xcf, 0x41, 0x01, 0x8f, 0x67, 0x5b, 0x79, 0xb0, 0x4b, 0xa1, 0xe6, 0x17, 0x0f, 0x54, 0x57, 0xc0,
	0xfe, 0xe1, 0x04, 0x72, 0x5b, 0x13, 0xc8, 0xee, 0xd3, 0x8b, 0x79, 0xe0, 0x5d, 0xce, 0x03, 0xef,
	0xfb, 0x3c, 0xf0, 0x3e, 0x2d, 0x82, 0xdc, 0xe5, 0x22, 0xc8, 0x7d, 0x5d, 0x04, 0xb9, 0xd7, 0x9d,
	0x0d, 0xd1, 0x53, 0x7e, 0xca, 0xd9, 0x13, 0x16, 0x9a, 0xb7, 0x15, 0x7e, 0xf8, 0xed, 0xb7, 0x65,
	0x7b, 0x0c, 0xca, 0xe6, 0x6f, 0xf2, 0xf0, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0x90, 0x42, 0xd1,
	0x1e, 0xe8, 0x04, 0x00, 0x00,
}

func (m *StrategyWeight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StrategyWeight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StrategyWeight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Weight.Size()
		i -= size
		if _, err := m.Weight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintYieldAggregator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.StrategyId != 0 {
		i = encodeVarintYieldAggregator(dAtA, i, uint64(m.StrategyId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Vault) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StrategyWeights) > 0 {
		for iNdEx := len(m.StrategyWeights) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StrategyWeights[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintYieldAggregator(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	{
		size := m.WithdrawCommissionRate.Size()
		i -= size
		if _, err := m.WithdrawCommissionRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintYieldAggregator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.OwnerDeposit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintYieldAggregator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintYieldAggregator(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintYieldAggregator(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintYieldAggregator(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Strategy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Strategy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Strategy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintYieldAggregator(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintYieldAggregator(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintYieldAggregator(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintYieldAggregator(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VaultMetrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VaultMetrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VaultMetrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Apy.Size()
		i -= size
		if _, err := m.Apy.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintYieldAggregator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Allocation.Size()
		i -= size
		if _, err := m.Allocation.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintYieldAggregator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *StrategyMetrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StrategyMetrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StrategyMetrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Apr.Size()
		i -= size
		if _, err := m.Apr.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintYieldAggregator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Allocation.Size()
		i -= size
		if _, err := m.Allocation.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintYieldAggregator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintYieldAggregator(dAtA []byte, offset int, v uint64) int {
	offset -= sovYieldAggregator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StrategyWeight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StrategyId != 0 {
		n += 1 + sovYieldAggregator(uint64(m.StrategyId))
	}
	l = m.Weight.Size()
	n += 1 + l + sovYieldAggregator(uint64(l))
	return n
}

func (m *Vault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovYieldAggregator(uint64(m.Id))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovYieldAggregator(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovYieldAggregator(uint64(l))
	}
	l = m.OwnerDeposit.Size()
	n += 1 + l + sovYieldAggregator(uint64(l))
	l = m.WithdrawCommissionRate.Size()
	n += 1 + l + sovYieldAggregator(uint64(l))
	if len(m.StrategyWeights) > 0 {
		for _, e := range m.StrategyWeights {
			l = e.Size()
			n += 1 + l + sovYieldAggregator(uint64(l))
		}
	}
	return n
}

func (m *Strategy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovYieldAggregator(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovYieldAggregator(uint64(m.Id))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovYieldAggregator(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovYieldAggregator(uint64(l))
	}
	return n
}

func (m *VaultMetrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Allocation.Size()
	n += 1 + l + sovYieldAggregator(uint64(l))
	l = m.Apy.Size()
	n += 1 + l + sovYieldAggregator(uint64(l))
	return n
}

func (m *StrategyMetrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Allocation.Size()
	n += 1 + l + sovYieldAggregator(uint64(l))
	l = m.Apr.Size()
	n += 1 + l + sovYieldAggregator(uint64(l))
	return n
}

func sovYieldAggregator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozYieldAggregator(x uint64) (n int) {
	return sovYieldAggregator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StrategyWeight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYieldAggregator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StrategyWeight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StrategyWeight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrategyId", wireType)
			}
			m.StrategyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYieldAggregator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StrategyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYieldAggregator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYieldAggregator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYieldAggregator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Weight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYieldAggregator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYieldAggregator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vault) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYieldAggregator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vault: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vault: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYieldAggregator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYieldAggregator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYieldAggregator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYieldAggregator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYieldAggregator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYieldAggregator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYieldAggregator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerDeposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYieldAggregator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYieldAggregator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYieldAggregator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OwnerDeposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawCommissionRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYieldAggregator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYieldAggregator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYieldAggregator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WithdrawCommissionRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrategyWeights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYieldAggregator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYieldAggregator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYieldAggregator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StrategyWeights = append(m.StrategyWeights, StrategyWeight{})
			if err := m.StrategyWeights[len(m.StrategyWeights)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYieldAggregator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYieldAggregator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Strategy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYieldAggregator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Strategy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Strategy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYieldAggregator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYieldAggregator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYieldAggregator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYieldAggregator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYieldAggregator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYieldAggregator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYieldAggregator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYieldAggregator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYieldAggregator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYieldAggregator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYieldAggregator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYieldAggregator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VaultMetrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYieldAggregator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VaultMetrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VaultMetrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allocation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYieldAggregator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYieldAggregator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYieldAggregator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Allocation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Apy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYieldAggregator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYieldAggregator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYieldAggregator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Apy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYieldAggregator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYieldAggregator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StrategyMetrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYieldAggregator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StrategyMetrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StrategyMetrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allocation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYieldAggregator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYieldAggregator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYieldAggregator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Allocation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Apr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYieldAggregator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYieldAggregator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYieldAggregator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Apr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYieldAggregator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYieldAggregator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipYieldAggregator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowYieldAggregator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowYieldAggregator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowYieldAggregator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthYieldAggregator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupYieldAggregator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthYieldAggregator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthYieldAggregator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowYieldAggregator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupYieldAggregator = fmt.Errorf("proto: unexpected end of group")
)
