// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ecosystem-incentive/event.proto

package types

import (
	fmt "fmt"
	github_com_UnUniFi_chain_types "github.com/UnUniFi/chain/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventRegister struct {
	IncentiveUnitId string        `protobuf:"bytes,1,opt,name=incentive_unit_id,json=incentiveUnitId,proto3" json:"incentive_unit_id,omitempty" yaml:"incentive_unit_id"`
	SubjectInfoList []SubjectInfo `protobuf:"bytes,2,rep,name=subject_info_list,json=subjectInfoList,proto3" json:"subject_info_list" yaml:"subject_info_lists"`
}

func (m *EventRegister) Reset()         { *m = EventRegister{} }
func (m *EventRegister) String() string { return proto.CompactTextString(m) }
func (*EventRegister) ProtoMessage()    {}
func (*EventRegister) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2b67b0578f1794f, []int{0}
}
func (m *EventRegister) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventRegister) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventRegister.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventRegister) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRegister.Merge(m, src)
}
func (m *EventRegister) XXX_Size() int {
	return m.Size()
}
func (m *EventRegister) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRegister.DiscardUnknown(m)
}

var xxx_messageInfo_EventRegister proto.InternalMessageInfo

func (m *EventRegister) GetIncentiveUnitId() string {
	if m != nil {
		return m.IncentiveUnitId
	}
	return ""
}

func (m *EventRegister) GetSubjectInfoList() []SubjectInfo {
	if m != nil {
		return m.SubjectInfoList
	}
	return nil
}

type EventWithdrawAllRewards struct {
	Sender  github_com_UnUniFi_chain_types.StringAccAddress `protobuf:"bytes,1,opt,name=sender,proto3,customtype=github.com/UnUniFi/chain/types.StringAccAddress" json:"sender" yaml:"sender"`
	Rewards github_com_cosmos_cosmos_sdk_types.Coins        `protobuf:"bytes,2,rep,name=rewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"rewards" yaml:"all_withdrawn_rewards"`
}

func (m *EventWithdrawAllRewards) Reset()         { *m = EventWithdrawAllRewards{} }
func (m *EventWithdrawAllRewards) String() string { return proto.CompactTextString(m) }
func (*EventWithdrawAllRewards) ProtoMessage()    {}
func (*EventWithdrawAllRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2b67b0578f1794f, []int{1}
}
func (m *EventWithdrawAllRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventWithdrawAllRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventWithdrawAllRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventWithdrawAllRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventWithdrawAllRewards.Merge(m, src)
}
func (m *EventWithdrawAllRewards) XXX_Size() int {
	return m.Size()
}
func (m *EventWithdrawAllRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_EventWithdrawAllRewards.DiscardUnknown(m)
}

var xxx_messageInfo_EventWithdrawAllRewards proto.InternalMessageInfo

func (m *EventWithdrawAllRewards) GetRewards() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Rewards
	}
	return nil
}

type EventWithdrawReward struct {
	Sender github_com_UnUniFi_chain_types.StringAccAddress `protobuf:"bytes,1,opt,name=sender,proto3,customtype=github.com/UnUniFi/chain/types.StringAccAddress" json:"sender" yaml:"sender"`
	Reward types.Coin                                      `protobuf:"bytes,2,opt,name=reward,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"reward" yaml:"withdrawn_reward"`
}

func (m *EventWithdrawReward) Reset()         { *m = EventWithdrawReward{} }
func (m *EventWithdrawReward) String() string { return proto.CompactTextString(m) }
func (*EventWithdrawReward) ProtoMessage()    {}
func (*EventWithdrawReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2b67b0578f1794f, []int{2}
}
func (m *EventWithdrawReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventWithdrawReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventWithdrawReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventWithdrawReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventWithdrawReward.Merge(m, src)
}
func (m *EventWithdrawReward) XXX_Size() int {
	return m.Size()
}
func (m *EventWithdrawReward) XXX_DiscardUnknown() {
	xxx_messageInfo_EventWithdrawReward.DiscardUnknown(m)
}

var xxx_messageInfo_EventWithdrawReward proto.InternalMessageInfo

func (m *EventWithdrawReward) GetReward() types.Coin {
	if m != nil {
		return m.Reward
	}
	return types.Coin{}
}

type EventFailedParsingMemoInputs struct {
	ClassId string `protobuf:"bytes,2,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty" yaml:"class_id"`
	NftId   string `protobuf:"bytes,3,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty" yaml:"nft_id"`
	Memo    string `protobuf:"bytes,4,opt,name=memo,proto3" json:"memo,omitempty" yaml:"memo"`
}

func (m *EventFailedParsingMemoInputs) Reset()         { *m = EventFailedParsingMemoInputs{} }
func (m *EventFailedParsingMemoInputs) String() string { return proto.CompactTextString(m) }
func (*EventFailedParsingMemoInputs) ProtoMessage()    {}
func (*EventFailedParsingMemoInputs) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2b67b0578f1794f, []int{3}
}
func (m *EventFailedParsingMemoInputs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventFailedParsingMemoInputs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventFailedParsingMemoInputs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventFailedParsingMemoInputs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventFailedParsingMemoInputs.Merge(m, src)
}
func (m *EventFailedParsingMemoInputs) XXX_Size() int {
	return m.Size()
}
func (m *EventFailedParsingMemoInputs) XXX_DiscardUnknown() {
	xxx_messageInfo_EventFailedParsingMemoInputs.DiscardUnknown(m)
}

var xxx_messageInfo_EventFailedParsingMemoInputs proto.InternalMessageInfo

func (m *EventFailedParsingMemoInputs) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *EventFailedParsingMemoInputs) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

func (m *EventFailedParsingMemoInputs) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func init() {
	proto.RegisterType((*EventRegister)(nil), "ununifi.ecosystemincentive.EventRegister")
	proto.RegisterType((*EventWithdrawAllRewards)(nil), "ununifi.ecosystemincentive.EventWithdrawAllRewards")
	proto.RegisterType((*EventWithdrawReward)(nil), "ununifi.ecosystemincentive.EventWithdrawReward")
	proto.RegisterType((*EventFailedParsingMemoInputs)(nil), "ununifi.ecosystemincentive.EventFailedParsingMemoInputs")
}

func init() { proto.RegisterFile("ecosystem-incentive/event.proto", fileDescriptor_c2b67b0578f1794f) }

var fileDescriptor_c2b67b0578f1794f = []byte{
	// 586 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x94, 0x41, 0x6f, 0xd3, 0x3c,
	0x18, 0xc7, 0x9b, 0x6e, 0x6f, 0xf7, 0xe2, 0x69, 0xaa, 0x96, 0x21, 0xad, 0x9b, 0xaa, 0xa4, 0x98,
	0xc3, 0x7a, 0xa9, 0xa3, 0x01, 0x27, 0x6e, 0x2d, 0x62, 0x5a, 0x11, 0xa0, 0x29, 0x53, 0x85, 0xc4,
	0x25, 0xa4, 0x89, 0x9b, 0x1a, 0x12, 0xbb, 0x8a, 0x9d, 0x96, 0x1e, 0x38, 0x21, 0xee, 0x7c, 0x01,
	0xbe, 0x00, 0x9f, 0x64, 0xc7, 0x71, 0x43, 0x1c, 0x02, 0x6a, 0xbf, 0x41, 0x0f, 0x9c, 0x51, 0x6c,
	0xb7, 0x03, 0xb6, 0x21, 0x4e, 0x9c, 0x62, 0x3d, 0x7e, 0xfc, 0x7f, 0xfe, 0xbf, 0xe7, 0xb1, 0x03,
	0x6c, 0x1c, 0x30, 0x3e, 0xe5, 0x02, 0x27, 0x2d, 0x42, 0x03, 0x4c, 0x05, 0x19, 0x63, 0x07, 0x8f,
	0x31, 0x15, 0x68, 0x94, 0x32, 0xc1, 0xcc, 0xfd, 0x8c, 0x66, 0x94, 0x0c, 0x08, 0x5a, 0x25, 0xae,
	0xf2, 0xf6, 0x5b, 0x57, 0x1e, 0x5e, 0xc6, 0xbc, 0x55, 0x4c, 0x49, 0xed, 0xdf, 0x8c, 0x58, 0xc4,
	0xe4, 0xd2, 0x29, 0x56, 0x3a, 0x6a, 0x05, 0x8c, 0x27, 0x8c, 0x3b, 0x7d, 0x9f, 0x63, 0x67, 0x7c,
	0xd8, 0xc7, 0xc2, 0x3f, 0x74, 0x02, 0x46, 0xa8, 0xda, 0x87, 0x9f, 0x0c, 0xb0, 0xf5, 0xb0, 0x30,
	0xe4, 0xe2, 0x88, 0x70, 0x81, 0x53, 0xf3, 0x18, 0x6c, 0xaf, 0xa4, 0xbd, 0x8c, 0x12, 0xe1, 0x91,
	0xb0, 0x66, 0x34, 0x8c, 0xe6, 0x8d, 0x4e, 0x7d, 0x91, 0xdb, 0xb5, 0xa9, 0x9f, 0xc4, 0xf7, 0xe1,
	0xa5, 0x14, 0xe8, 0x56, 0x57, 0xb1, 0x1e, 0x25, 0xa2, 0x1b, 0x9a, 0x63, 0xb0, 0xcd, 0xb3, 0xfe,
	0x4b, 0x1c, 0x08, 0x8f, 0xd0, 0x01, 0xf3, 0x62, 0xc2, 0x45, 0xad, 0xdc, 0x58, 0x6b, 0x6e, 0xde,
	0x39, 0x40, 0xd7, 0x83, 0xa3, 0x53, 0x75, 0xa8, 0x4b, 0x07, 0xac, 0x73, 0xeb, 0x2c, 0xb7, 0x4b,
	0x8b, 0xdc, 0xde, 0x53, 0x65, 0x2f, 0xe9, 0x71, 0xe8, 0x56, 0xf9, 0x45, 0xfe, 0x63, 0xc2, 0x05,
	0x7c, 0x5b, 0x06, 0xbb, 0x92, 0xe9, 0x19, 0x11, 0xc3, 0x30, 0xf5, 0x27, 0xed, 0x38, 0x76, 0xf1,
	0xc4, 0x4f, 0x43, 0x6e, 0xbe, 0x00, 0x15, 0x8e, 0x69, 0x88, 0x53, 0x8d, 0x74, 0x5c, 0xe8, 0x7f,
	0xc9, 0x6d, 0x27, 0x22, 0x62, 0x98, 0xf5, 0x51, 0xc0, 0x12, 0xa7, 0x47, 0x7b, 0x94, 0x1c, 0x11,
	0x27, 0x18, 0xfa, 0x84, 0x3a, 0x62, 0x3a, 0xc2, 0x1c, 0x9d, 0x8a, 0x94, 0xd0, 0xa8, 0x1d, 0x04,
	0xed, 0x30, 0x4c, 0x31, 0xe7, 0x8b, 0xdc, 0xde, 0xd2, 0x96, 0xa4, 0x1c, 0x74, 0xb5, 0xae, 0xf9,
	0xce, 0x00, 0x1b, 0xa9, 0xaa, 0xa6, 0x61, 0xf7, 0x90, 0x1a, 0x02, 0x2a, 0x86, 0x80, 0xf4, 0x10,
	0xd0, 0x03, 0x46, 0x68, 0xe7, 0x44, 0xe3, 0xd5, 0x95, 0x96, 0x1f, 0xc7, 0xde, 0x44, 0x9b, 0xa6,
	0x9e, 0x56, 0x81, 0x1f, 0xbf, 0xda, 0xcd, 0x9f, 0xec, 0xe9, 0x89, 0xaa, 0x4f, 0x8b, 0x87, 0xaf,
	0xb4, 0xc5, 0x42, 0x90, 0xbb, 0xcb, 0xda, 0xf0, 0xbb, 0x01, 0x76, 0x7e, 0xe9, 0x82, 0x6a, 0xc1,
	0x3f, 0xe8, 0xc0, 0x1b, 0x50, 0x51, 0x26, 0x6a, 0xe5, 0x86, 0xf1, 0x67, 0xfe, 0x47, 0x9a, 0x7f,
	0x57, 0x29, 0xfd, 0xce, 0x5e, 0xa0, 0x1f, 0xfc, 0x25, 0xba, 0xab, 0x8b, 0xc2, 0x0f, 0x06, 0xa8,
	0x4b, 0xf0, 0x23, 0x9f, 0xc4, 0x38, 0x3c, 0xf1, 0x53, 0x4e, 0x68, 0xf4, 0x04, 0x27, 0xac, 0x4b,
	0x47, 0x99, 0xe0, 0x26, 0x02, 0xff, 0x07, 0xb1, 0xcf, 0x79, 0x71, 0xb1, 0xcb, 0xb2, 0x07, 0x3b,
	0x8b, 0xdc, 0xae, 0x2a, 0x0b, 0xcb, 0x1d, 0xe8, 0x6e, 0xc8, 0x65, 0x37, 0x34, 0x9b, 0xa0, 0x42,
	0x07, 0xf2, 0x19, 0xac, 0xc9, 0xec, 0xed, 0x0b, 0x74, 0x15, 0x87, 0xee, 0x7f, 0x74, 0x50, 0xdc,
	0xf8, 0xdb, 0x60, 0x3d, 0xc1, 0x09, 0xab, 0xad, 0xcb, 0xbc, 0xea, 0x22, 0xb7, 0x37, 0x55, 0x5e,
	0x11, 0x85, 0xae, 0xdc, 0xec, 0x3c, 0x3d, 0x9b, 0x59, 0xc6, 0xf9, 0xcc, 0x32, 0xbe, 0xcd, 0x2c,
	0xe3, 0xfd, 0xdc, 0x2a, 0x9d, 0xcf, 0xad, 0xd2, 0xe7, 0xb9, 0x55, 0x7a, 0x7e, 0xef, 0xda, 0x11,
	0xbc, 0x76, 0xae, 0xfa, 0x19, 0x48, 0xf8, 0x7e, 0x45, 0xbe, 0xe4, 0xbb, 0x3f, 0x02, 0x00, 0x00,
	0xff, 0xff, 0xcc, 0xaf, 0xf9, 0x53, 0x6d, 0x04, 0x00, 0x00,
}

func (m *EventRegister) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventRegister) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventRegister) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubjectInfoList) > 0 {
		for iNdEx := len(m.SubjectInfoList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SubjectInfoList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.IncentiveUnitId) > 0 {
		i -= len(m.IncentiveUnitId)
		copy(dAtA[i:], m.IncentiveUnitId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.IncentiveUnitId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventWithdrawAllRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventWithdrawAllRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventWithdrawAllRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size := m.Sender.Size()
		i -= size
		if _, err := m.Sender.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EventWithdrawReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventWithdrawReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventWithdrawReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Reward.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Sender.Size()
		i -= size
		if _, err := m.Sender.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EventFailedParsingMemoInputs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventFailedParsingMemoInputs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventFailedParsingMemoInputs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Memo) > 0 {
		i -= len(m.Memo)
		copy(dAtA[i:], m.Memo)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Memo)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventRegister) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IncentiveUnitId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if len(m.SubjectInfoList) > 0 {
		for _, e := range m.SubjectInfoList {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	return n
}

func (m *EventWithdrawAllRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Sender.Size()
	n += 1 + l + sovEvent(uint64(l))
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	return n
}

func (m *EventWithdrawReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Sender.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.Reward.Size()
	n += 1 + l + sovEvent(uint64(l))
	return n
}

func (m *EventFailedParsingMemoInputs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventRegister) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventRegister: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventRegister: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncentiveUnitId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IncentiveUnitId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectInfoList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectInfoList = append(m.SubjectInfoList, SubjectInfo{})
			if err := m.SubjectInfoList[len(m.SubjectInfoList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventWithdrawAllRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventWithdrawAllRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventWithdrawAllRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, types.Coin{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventWithdrawReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventWithdrawReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventWithdrawReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Reward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventFailedParsingMemoInputs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventFailedParsingMemoInputs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventFailedParsingMemoInputs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
