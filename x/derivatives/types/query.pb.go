// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: derivatives/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e622b2562178c0b, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e622b2562178c0b, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// this line is used by starport scaffolding # 3
type QueryPoolRequest struct {
}

func (m *QueryPoolRequest) Reset()         { *m = QueryPoolRequest{} }
func (m *QueryPoolRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPoolRequest) ProtoMessage()    {}
func (*QueryPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e622b2562178c0b, []int{2}
}
func (m *QueryPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolRequest.Merge(m, src)
}
func (m *QueryPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolRequest proto.InternalMessageInfo

type QueryPoolResponse struct {
	MetricsQuoteTicker string                                  `protobuf:"bytes,1,opt,name=metrics_quote_ticker,json=metricsQuoteTicker,proto3" json:"metrics_quote_ticker,omitempty" yaml:"metrics_quote_ticker"`
	PoolMarketCap      *PoolMarketCap                          `protobuf:"bytes,2,opt,name=pool_market_cap,json=poolMarketCap,proto3" json:"pool_market_cap,omitempty" yaml:"pool_market_cap"`
	Volume_24Hours     *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=volume_24hours,json=volume24hours,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"volume_24hours,omitempty" yaml:"volume_24hours"`
	Fees_24Hours       *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=fees_24hours,json=fees24hours,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"fees_24hours,omitempty" yaml:"fees_24hours"`
}

func (m *QueryPoolResponse) Reset()         { *m = QueryPoolResponse{} }
func (m *QueryPoolResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPoolResponse) ProtoMessage()    {}
func (*QueryPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e622b2562178c0b, []int{3}
}
func (m *QueryPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolResponse.Merge(m, src)
}
func (m *QueryPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolResponse proto.InternalMessageInfo

func (m *QueryPoolResponse) GetMetricsQuoteTicker() string {
	if m != nil {
		return m.MetricsQuoteTicker
	}
	return ""
}

func (m *QueryPoolResponse) GetPoolMarketCap() *PoolMarketCap {
	if m != nil {
		return m.PoolMarketCap
	}
	return nil
}

type QueryLiquidityProviderTokenRealAPYRequest struct {
	BeforeHeight int64 `protobuf:"varint,1,opt,name=before_height,json=beforeHeight,proto3" json:"before_height,omitempty" yaml:"before_height"`
	AfterHeight  int64 `protobuf:"varint,2,opt,name=after_height,json=afterHeight,proto3" json:"after_height,omitempty" yaml:"after_height"`
}

func (m *QueryLiquidityProviderTokenRealAPYRequest) Reset() {
	*m = QueryLiquidityProviderTokenRealAPYRequest{}
}
func (m *QueryLiquidityProviderTokenRealAPYRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryLiquidityProviderTokenRealAPYRequest) ProtoMessage() {}
func (*QueryLiquidityProviderTokenRealAPYRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e622b2562178c0b, []int{4}
}
func (m *QueryLiquidityProviderTokenRealAPYRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidityProviderTokenRealAPYRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidityProviderTokenRealAPYRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidityProviderTokenRealAPYRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidityProviderTokenRealAPYRequest.Merge(m, src)
}
func (m *QueryLiquidityProviderTokenRealAPYRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidityProviderTokenRealAPYRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidityProviderTokenRealAPYRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidityProviderTokenRealAPYRequest proto.InternalMessageInfo

func (m *QueryLiquidityProviderTokenRealAPYRequest) GetBeforeHeight() int64 {
	if m != nil {
		return m.BeforeHeight
	}
	return 0
}

func (m *QueryLiquidityProviderTokenRealAPYRequest) GetAfterHeight() int64 {
	if m != nil {
		return m.AfterHeight
	}
	return 0
}

type QueryLiquidityProviderTokenRealAPYResponse struct {
	Apy *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=apy,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"apy,omitempty" yaml:"apy"`
}

func (m *QueryLiquidityProviderTokenRealAPYResponse) Reset() {
	*m = QueryLiquidityProviderTokenRealAPYResponse{}
}
func (m *QueryLiquidityProviderTokenRealAPYResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryLiquidityProviderTokenRealAPYResponse) ProtoMessage() {}
func (*QueryLiquidityProviderTokenRealAPYResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e622b2562178c0b, []int{5}
}
func (m *QueryLiquidityProviderTokenRealAPYResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidityProviderTokenRealAPYResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidityProviderTokenRealAPYResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidityProviderTokenRealAPYResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidityProviderTokenRealAPYResponse.Merge(m, src)
}
func (m *QueryLiquidityProviderTokenRealAPYResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidityProviderTokenRealAPYResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidityProviderTokenRealAPYResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidityProviderTokenRealAPYResponse proto.InternalMessageInfo

type QueryLiquidityProviderTokenNominalAPYRequest struct {
	BeforeHeight int64 `protobuf:"varint,1,opt,name=before_height,json=beforeHeight,proto3" json:"before_height,omitempty" yaml:"before_height"`
	AfterHeight  int64 `protobuf:"varint,2,opt,name=after_height,json=afterHeight,proto3" json:"after_height,omitempty" yaml:"after_height"`
}

func (m *QueryLiquidityProviderTokenNominalAPYRequest) Reset() {
	*m = QueryLiquidityProviderTokenNominalAPYRequest{}
}
func (m *QueryLiquidityProviderTokenNominalAPYRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryLiquidityProviderTokenNominalAPYRequest) ProtoMessage() {}
func (*QueryLiquidityProviderTokenNominalAPYRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e622b2562178c0b, []int{6}
}
func (m *QueryLiquidityProviderTokenNominalAPYRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidityProviderTokenNominalAPYRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidityProviderTokenNominalAPYRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidityProviderTokenNominalAPYRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidityProviderTokenNominalAPYRequest.Merge(m, src)
}
func (m *QueryLiquidityProviderTokenNominalAPYRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidityProviderTokenNominalAPYRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidityProviderTokenNominalAPYRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidityProviderTokenNominalAPYRequest proto.InternalMessageInfo

func (m *QueryLiquidityProviderTokenNominalAPYRequest) GetBeforeHeight() int64 {
	if m != nil {
		return m.BeforeHeight
	}
	return 0
}

func (m *QueryLiquidityProviderTokenNominalAPYRequest) GetAfterHeight() int64 {
	if m != nil {
		return m.AfterHeight
	}
	return 0
}

type QueryLiquidityProviderTokenNominalAPYResponse struct {
	Apy *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=apy,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"apy,omitempty" yaml:"apy"`
}

func (m *QueryLiquidityProviderTokenNominalAPYResponse) Reset() {
	*m = QueryLiquidityProviderTokenNominalAPYResponse{}
}
func (m *QueryLiquidityProviderTokenNominalAPYResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryLiquidityProviderTokenNominalAPYResponse) ProtoMessage() {}
func (*QueryLiquidityProviderTokenNominalAPYResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e622b2562178c0b, []int{7}
}
func (m *QueryLiquidityProviderTokenNominalAPYResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidityProviderTokenNominalAPYResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidityProviderTokenNominalAPYResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidityProviderTokenNominalAPYResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidityProviderTokenNominalAPYResponse.Merge(m, src)
}
func (m *QueryLiquidityProviderTokenNominalAPYResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidityProviderTokenNominalAPYResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidityProviderTokenNominalAPYResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidityProviderTokenNominalAPYResponse proto.InternalMessageInfo

type QueryPerpetualFuturesRequest struct {
}

func (m *QueryPerpetualFuturesRequest) Reset()         { *m = QueryPerpetualFuturesRequest{} }
func (m *QueryPerpetualFuturesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPerpetualFuturesRequest) ProtoMessage()    {}
func (*QueryPerpetualFuturesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e622b2562178c0b, []int{8}
}
func (m *QueryPerpetualFuturesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPerpetualFuturesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPerpetualFuturesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPerpetualFuturesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPerpetualFuturesRequest.Merge(m, src)
}
func (m *QueryPerpetualFuturesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPerpetualFuturesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPerpetualFuturesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPerpetualFuturesRequest proto.InternalMessageInfo

type QueryPerpetualFuturesResponse struct {
	MetricsQuoteTicker string                                  `protobuf:"bytes,2,opt,name=metrics_quote_ticker,json=metricsQuoteTicker,proto3" json:"metrics_quote_ticker,omitempty" yaml:"metrics_quote_ticker"`
	Volume_24Hours     *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=volume_24hours,json=volume24hours,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"volume_24hours,omitempty" yaml:"volume_24hours"`
	Fees_24Hours       *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=fees_24hours,json=fees24hours,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"fees_24hours,omitempty" yaml:"fees_24hours"`
	LongPositions      types.Coin                              `protobuf:"bytes,5,opt,name=long_positions,json=longPositions,proto3" json:"long_positions" yaml:"long_positions"`
	ShortPositions     types.Coin                              `protobuf:"bytes,6,opt,name=short_positions,json=shortPositions,proto3" json:"short_positions" yaml:"short_positions"`
}

func (m *QueryPerpetualFuturesResponse) Reset()         { *m = QueryPerpetualFuturesResponse{} }
func (m *QueryPerpetualFuturesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPerpetualFuturesResponse) ProtoMessage()    {}
func (*QueryPerpetualFuturesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e622b2562178c0b, []int{9}
}
func (m *QueryPerpetualFuturesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPerpetualFuturesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPerpetualFuturesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPerpetualFuturesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPerpetualFuturesResponse.Merge(m, src)
}
func (m *QueryPerpetualFuturesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPerpetualFuturesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPerpetualFuturesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPerpetualFuturesResponse proto.InternalMessageInfo

func (m *QueryPerpetualFuturesResponse) GetMetricsQuoteTicker() string {
	if m != nil {
		return m.MetricsQuoteTicker
	}
	return ""
}

func (m *QueryPerpetualFuturesResponse) GetLongPositions() types.Coin {
	if m != nil {
		return m.LongPositions
	}
	return types.Coin{}
}

func (m *QueryPerpetualFuturesResponse) GetShortPositions() types.Coin {
	if m != nil {
		return m.ShortPositions
	}
	return types.Coin{}
}

type QueryPerpetualFuturesMarketRequest struct {
	BaseDenom  string `protobuf:"bytes,1,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty" yaml:"base_denom"`
	QuoteDenom string `protobuf:"bytes,2,opt,name=quote_denom,json=quoteDenom,proto3" json:"quote_denom,omitempty" yaml:"quote_denom"`
}

func (m *QueryPerpetualFuturesMarketRequest) Reset()         { *m = QueryPerpetualFuturesMarketRequest{} }
func (m *QueryPerpetualFuturesMarketRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPerpetualFuturesMarketRequest) ProtoMessage()    {}
func (*QueryPerpetualFuturesMarketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e622b2562178c0b, []int{10}
}
func (m *QueryPerpetualFuturesMarketRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPerpetualFuturesMarketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPerpetualFuturesMarketRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPerpetualFuturesMarketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPerpetualFuturesMarketRequest.Merge(m, src)
}
func (m *QueryPerpetualFuturesMarketRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPerpetualFuturesMarketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPerpetualFuturesMarketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPerpetualFuturesMarketRequest proto.InternalMessageInfo

func (m *QueryPerpetualFuturesMarketRequest) GetBaseDenom() string {
	if m != nil {
		return m.BaseDenom
	}
	return ""
}

func (m *QueryPerpetualFuturesMarketRequest) GetQuoteDenom() string {
	if m != nil {
		return m.QuoteDenom
	}
	return ""
}

type QueryPerpetualFuturesMarketResponse struct {
	Price              *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=price,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"price,omitempty" yaml:"price"`
	MetricsQuoteTicker string                                  `protobuf:"bytes,2,opt,name=metrics_quote_ticker,json=metricsQuoteTicker,proto3" json:"metrics_quote_ticker,omitempty" yaml:"metrics_quote_ticker"`
	Volume_24Hours     *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=volume_24hours,json=volume24hours,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"volume_24hours,omitempty" yaml:"volume_24hours"`
	Fees_24Hours       *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=fees_24hours,json=fees24hours,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"fees_24hours,omitempty" yaml:"fees_24hours"`
	LongPositions      *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=long_positions,json=longPositions,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"long_positions,omitempty" yaml:"long_positions"`
	ShortPositions     *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=short_positions,json=shortPositions,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"short_positions,omitempty" yaml:"short_positions"`
}

func (m *QueryPerpetualFuturesMarketResponse) Reset()         { *m = QueryPerpetualFuturesMarketResponse{} }
func (m *QueryPerpetualFuturesMarketResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPerpetualFuturesMarketResponse) ProtoMessage()    {}
func (*QueryPerpetualFuturesMarketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e622b2562178c0b, []int{11}
}
func (m *QueryPerpetualFuturesMarketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPerpetualFuturesMarketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPerpetualFuturesMarketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPerpetualFuturesMarketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPerpetualFuturesMarketResponse.Merge(m, src)
}
func (m *QueryPerpetualFuturesMarketResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPerpetualFuturesMarketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPerpetualFuturesMarketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPerpetualFuturesMarketResponse proto.InternalMessageInfo

func (m *QueryPerpetualFuturesMarketResponse) GetMetricsQuoteTicker() string {
	if m != nil {
		return m.MetricsQuoteTicker
	}
	return ""
}

type QueryPerpetualOptionsRequest struct {
}

func (m *QueryPerpetualOptionsRequest) Reset()         { *m = QueryPerpetualOptionsRequest{} }
func (m *QueryPerpetualOptionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPerpetualOptionsRequest) ProtoMessage()    {}
func (*QueryPerpetualOptionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e622b2562178c0b, []int{12}
}
func (m *QueryPerpetualOptionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPerpetualOptionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPerpetualOptionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPerpetualOptionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPerpetualOptionsRequest.Merge(m, src)
}
func (m *QueryPerpetualOptionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPerpetualOptionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPerpetualOptionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPerpetualOptionsRequest proto.InternalMessageInfo

type QueryPerpetualOptionsResponse struct {
}

func (m *QueryPerpetualOptionsResponse) Reset()         { *m = QueryPerpetualOptionsResponse{} }
func (m *QueryPerpetualOptionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPerpetualOptionsResponse) ProtoMessage()    {}
func (*QueryPerpetualOptionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e622b2562178c0b, []int{13}
}
func (m *QueryPerpetualOptionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPerpetualOptionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPerpetualOptionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPerpetualOptionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPerpetualOptionsResponse.Merge(m, src)
}
func (m *QueryPerpetualOptionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPerpetualOptionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPerpetualOptionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPerpetualOptionsResponse proto.InternalMessageInfo

type QueryPerpetualOptionsMarketRequest struct {
	BaseDenom  string `protobuf:"bytes,1,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty" yaml:"base_denom"`
	QuoteDenom string `protobuf:"bytes,2,opt,name=quote_denom,json=quoteDenom,proto3" json:"quote_denom,omitempty" yaml:"quote_denom"`
}

func (m *QueryPerpetualOptionsMarketRequest) Reset()         { *m = QueryPerpetualOptionsMarketRequest{} }
func (m *QueryPerpetualOptionsMarketRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPerpetualOptionsMarketRequest) ProtoMessage()    {}
func (*QueryPerpetualOptionsMarketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e622b2562178c0b, []int{14}
}
func (m *QueryPerpetualOptionsMarketRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPerpetualOptionsMarketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPerpetualOptionsMarketRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPerpetualOptionsMarketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPerpetualOptionsMarketRequest.Merge(m, src)
}
func (m *QueryPerpetualOptionsMarketRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPerpetualOptionsMarketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPerpetualOptionsMarketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPerpetualOptionsMarketRequest proto.InternalMessageInfo

func (m *QueryPerpetualOptionsMarketRequest) GetBaseDenom() string {
	if m != nil {
		return m.BaseDenom
	}
	return ""
}

func (m *QueryPerpetualOptionsMarketRequest) GetQuoteDenom() string {
	if m != nil {
		return m.QuoteDenom
	}
	return ""
}

type QueryPerpetualOptionsMarketResponse struct {
}

func (m *QueryPerpetualOptionsMarketResponse) Reset()         { *m = QueryPerpetualOptionsMarketResponse{} }
func (m *QueryPerpetualOptionsMarketResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPerpetualOptionsMarketResponse) ProtoMessage()    {}
func (*QueryPerpetualOptionsMarketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e622b2562178c0b, []int{15}
}
func (m *QueryPerpetualOptionsMarketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPerpetualOptionsMarketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPerpetualOptionsMarketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPerpetualOptionsMarketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPerpetualOptionsMarketResponse.Merge(m, src)
}
func (m *QueryPerpetualOptionsMarketResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPerpetualOptionsMarketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPerpetualOptionsMarketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPerpetualOptionsMarketResponse proto.InternalMessageInfo

type QueryAllPositionsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPositionsRequest) Reset()         { *m = QueryAllPositionsRequest{} }
func (m *QueryAllPositionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPositionsRequest) ProtoMessage()    {}
func (*QueryAllPositionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e622b2562178c0b, []int{16}
}
func (m *QueryAllPositionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPositionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPositionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPositionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPositionsRequest.Merge(m, src)
}
func (m *QueryAllPositionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPositionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPositionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPositionsRequest proto.InternalMessageInfo

func (m *QueryAllPositionsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPositionsResponse struct {
	Positions  []QueriedPosition   `protobuf:"bytes,1,rep,name=positions,proto3" json:"positions" yaml:"positions"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPositionsResponse) Reset()         { *m = QueryAllPositionsResponse{} }
func (m *QueryAllPositionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPositionsResponse) ProtoMessage()    {}
func (*QueryAllPositionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e622b2562178c0b, []int{17}
}
func (m *QueryAllPositionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPositionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPositionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPositionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPositionsResponse.Merge(m, src)
}
func (m *QueryAllPositionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPositionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPositionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPositionsResponse proto.InternalMessageInfo

func (m *QueryAllPositionsResponse) GetPositions() []QueriedPosition {
	if m != nil {
		return m.Positions
	}
	return nil
}

func (m *QueryAllPositionsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryPositionRequest struct {
	PositionId string `protobuf:"bytes,1,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
}

func (m *QueryPositionRequest) Reset()         { *m = QueryPositionRequest{} }
func (m *QueryPositionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPositionRequest) ProtoMessage()    {}
func (*QueryPositionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e622b2562178c0b, []int{18}
}
func (m *QueryPositionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPositionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPositionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPositionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPositionRequest.Merge(m, src)
}
func (m *QueryPositionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPositionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPositionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPositionRequest proto.InternalMessageInfo

func (m *QueryPositionRequest) GetPositionId() string {
	if m != nil {
		return m.PositionId
	}
	return ""
}

type QueryPositionResponse struct {
	Position              *Position                              `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty" yaml:"position"`
	ValuationProfit       types.Coin                             `protobuf:"bytes,2,opt,name=valuation_profit,json=valuationProfit,proto3" json:"valuation_profit" yaml:"valuation_profit"`
	MarginMaintenanceRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=margin_maintenance_rate,json=marginMaintenanceRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"margin_maintenance_rate" yaml:"margin_maintenance_rate"`
	EffectiveMargin       types.Coin                             `protobuf:"bytes,4,opt,name=effective_margin,json=effectiveMargin,proto3" json:"effective_margin" yaml:"effective_margin"`
}

func (m *QueryPositionResponse) Reset()         { *m = QueryPositionResponse{} }
func (m *QueryPositionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPositionResponse) ProtoMessage()    {}
func (*QueryPositionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e622b2562178c0b, []int{19}
}
func (m *QueryPositionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPositionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPositionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPositionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPositionResponse.Merge(m, src)
}
func (m *QueryPositionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPositionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPositionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPositionResponse proto.InternalMessageInfo

func (m *QueryPositionResponse) GetPosition() *Position {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *QueryPositionResponse) GetValuationProfit() types.Coin {
	if m != nil {
		return m.ValuationProfit
	}
	return types.Coin{}
}

func (m *QueryPositionResponse) GetEffectiveMargin() types.Coin {
	if m != nil {
		return m.EffectiveMargin
	}
	return types.Coin{}
}

type QueryPerpetualFuturesPositionSizeRequest struct {
	PositionType PositionType `protobuf:"varint,1,opt,name=position_type,json=positionType,proto3,enum=ununifi.derivatives.PositionType" json:"position_type,omitempty" yaml:"position_type"`
	Address      string       `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty" yaml:"address"`
}

func (m *QueryPerpetualFuturesPositionSizeRequest) Reset() {
	*m = QueryPerpetualFuturesPositionSizeRequest{}
}
func (m *QueryPerpetualFuturesPositionSizeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPerpetualFuturesPositionSizeRequest) ProtoMessage()    {}
func (*QueryPerpetualFuturesPositionSizeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e622b2562178c0b, []int{20}
}
func (m *QueryPerpetualFuturesPositionSizeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPerpetualFuturesPositionSizeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPerpetualFuturesPositionSizeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPerpetualFuturesPositionSizeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPerpetualFuturesPositionSizeRequest.Merge(m, src)
}
func (m *QueryPerpetualFuturesPositionSizeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPerpetualFuturesPositionSizeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPerpetualFuturesPositionSizeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPerpetualFuturesPositionSizeRequest proto.InternalMessageInfo

func (m *QueryPerpetualFuturesPositionSizeRequest) GetPositionType() PositionType {
	if m != nil {
		return m.PositionType
	}
	return PositionType_POSITION_UNKNOWN
}

func (m *QueryPerpetualFuturesPositionSizeRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryPerpetualFuturesPositionSizeResponse struct {
	TotalPositionSizeUsd types.Coin `protobuf:"bytes,1,opt,name=total_position_size_usd,json=totalPositionSizeUsd,proto3" json:"total_position_size_usd" yaml:"total_position_usd_size"`
}

func (m *QueryPerpetualFuturesPositionSizeResponse) Reset() {
	*m = QueryPerpetualFuturesPositionSizeResponse{}
}
func (m *QueryPerpetualFuturesPositionSizeResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryPerpetualFuturesPositionSizeResponse) ProtoMessage() {}
func (*QueryPerpetualFuturesPositionSizeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e622b2562178c0b, []int{21}
}
func (m *QueryPerpetualFuturesPositionSizeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPerpetualFuturesPositionSizeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPerpetualFuturesPositionSizeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPerpetualFuturesPositionSizeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPerpetualFuturesPositionSizeResponse.Merge(m, src)
}
func (m *QueryPerpetualFuturesPositionSizeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPerpetualFuturesPositionSizeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPerpetualFuturesPositionSizeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPerpetualFuturesPositionSizeResponse proto.InternalMessageInfo

func (m *QueryPerpetualFuturesPositionSizeResponse) GetTotalPositionSizeUsd() types.Coin {
	if m != nil {
		return m.TotalPositionSizeUsd
	}
	return types.Coin{}
}

type QueryAddressPositionsRequest struct {
	Address    string             `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" yaml:"address"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAddressPositionsRequest) Reset()         { *m = QueryAddressPositionsRequest{} }
func (m *QueryAddressPositionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAddressPositionsRequest) ProtoMessage()    {}
func (*QueryAddressPositionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e622b2562178c0b, []int{22}
}
func (m *QueryAddressPositionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAddressPositionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAddressPositionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAddressPositionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAddressPositionsRequest.Merge(m, src)
}
func (m *QueryAddressPositionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAddressPositionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAddressPositionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAddressPositionsRequest proto.InternalMessageInfo

func (m *QueryAddressPositionsRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryAddressPositionsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAddressPositionsResponse struct {
	Positions  []QueriedPosition   `protobuf:"bytes,1,rep,name=positions,proto3" json:"positions" yaml:"positions"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAddressPositionsResponse) Reset()         { *m = QueryAddressPositionsResponse{} }
func (m *QueryAddressPositionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAddressPositionsResponse) ProtoMessage()    {}
func (*QueryAddressPositionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e622b2562178c0b, []int{23}
}
func (m *QueryAddressPositionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAddressPositionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAddressPositionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAddressPositionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAddressPositionsResponse.Merge(m, src)
}
func (m *QueryAddressPositionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAddressPositionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAddressPositionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAddressPositionsResponse proto.InternalMessageInfo

func (m *QueryAddressPositionsResponse) GetPositions() []QueriedPosition {
	if m != nil {
		return m.Positions
	}
	return nil
}

func (m *QueryAddressPositionsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryDLPTokenRateRequest struct {
}

func (m *QueryDLPTokenRateRequest) Reset()         { *m = QueryDLPTokenRateRequest{} }
func (m *QueryDLPTokenRateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDLPTokenRateRequest) ProtoMessage()    {}
func (*QueryDLPTokenRateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e622b2562178c0b, []int{24}
}
func (m *QueryDLPTokenRateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDLPTokenRateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDLPTokenRateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDLPTokenRateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDLPTokenRateRequest.Merge(m, src)
}
func (m *QueryDLPTokenRateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDLPTokenRateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDLPTokenRateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDLPTokenRateRequest proto.InternalMessageInfo

type QueryDLPTokenRateResponse struct {
	Symbol string       `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Rates  []types.Coin `protobuf:"bytes,2,rep,name=rates,proto3" json:"rates" yaml:"dlp_rates"`
}

func (m *QueryDLPTokenRateResponse) Reset()         { *m = QueryDLPTokenRateResponse{} }
func (m *QueryDLPTokenRateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDLPTokenRateResponse) ProtoMessage()    {}
func (*QueryDLPTokenRateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e622b2562178c0b, []int{25}
}
func (m *QueryDLPTokenRateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDLPTokenRateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDLPTokenRateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDLPTokenRateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDLPTokenRateResponse.Merge(m, src)
}
func (m *QueryDLPTokenRateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDLPTokenRateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDLPTokenRateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDLPTokenRateResponse proto.InternalMessageInfo

func (m *QueryDLPTokenRateResponse) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *QueryDLPTokenRateResponse) GetRates() []types.Coin {
	if m != nil {
		return m.Rates
	}
	return nil
}

type QueryEstimateDLPTokenAmountRequest struct {
	MintDenom string `protobuf:"bytes,1,opt,name=mint_denom,json=mintDenom,proto3" json:"mint_denom,omitempty" yaml:"mint_denom"`
	Amount    string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty" yaml:"amount"`
}

func (m *QueryEstimateDLPTokenAmountRequest) Reset()         { *m = QueryEstimateDLPTokenAmountRequest{} }
func (m *QueryEstimateDLPTokenAmountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEstimateDLPTokenAmountRequest) ProtoMessage()    {}
func (*QueryEstimateDLPTokenAmountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e622b2562178c0b, []int{26}
}
func (m *QueryEstimateDLPTokenAmountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEstimateDLPTokenAmountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEstimateDLPTokenAmountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEstimateDLPTokenAmountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEstimateDLPTokenAmountRequest.Merge(m, src)
}
func (m *QueryEstimateDLPTokenAmountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEstimateDLPTokenAmountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEstimateDLPTokenAmountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEstimateDLPTokenAmountRequest proto.InternalMessageInfo

func (m *QueryEstimateDLPTokenAmountRequest) GetMintDenom() string {
	if m != nil {
		return m.MintDenom
	}
	return ""
}

func (m *QueryEstimateDLPTokenAmountRequest) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type QueryEstimateDLPTokenAmountResponse struct {
	EstimatedDlpAmount types.Coin `protobuf:"bytes,1,opt,name=estimated_dlp_amount,json=estimatedDlpAmount,proto3" json:"estimated_dlp_amount" yaml:"amount"`
	DepositFee         types.Coin `protobuf:"bytes,2,opt,name=deposit_fee,json=depositFee,proto3" json:"deposit_fee" yaml:"deposit_fee"`
}

func (m *QueryEstimateDLPTokenAmountResponse) Reset()         { *m = QueryEstimateDLPTokenAmountResponse{} }
func (m *QueryEstimateDLPTokenAmountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEstimateDLPTokenAmountResponse) ProtoMessage()    {}
func (*QueryEstimateDLPTokenAmountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e622b2562178c0b, []int{27}
}
func (m *QueryEstimateDLPTokenAmountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEstimateDLPTokenAmountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEstimateDLPTokenAmountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEstimateDLPTokenAmountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEstimateDLPTokenAmountResponse.Merge(m, src)
}
func (m *QueryEstimateDLPTokenAmountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEstimateDLPTokenAmountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEstimateDLPTokenAmountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEstimateDLPTokenAmountResponse proto.InternalMessageInfo

func (m *QueryEstimateDLPTokenAmountResponse) GetEstimatedDlpAmount() types.Coin {
	if m != nil {
		return m.EstimatedDlpAmount
	}
	return types.Coin{}
}

func (m *QueryEstimateDLPTokenAmountResponse) GetDepositFee() types.Coin {
	if m != nil {
		return m.DepositFee
	}
	return types.Coin{}
}

type QueryEstimateRedeemAmountRequest struct {
	RedeemDenom string `protobuf:"bytes,1,opt,name=redeem_denom,json=redeemDenom,proto3" json:"redeem_denom,omitempty" yaml:"redeem_denom"`
	LptAmount   string `protobuf:"bytes,2,opt,name=lpt_amount,json=lptAmount,proto3" json:"lpt_amount,omitempty" yaml:"lpt_amount"`
}

func (m *QueryEstimateRedeemAmountRequest) Reset()         { *m = QueryEstimateRedeemAmountRequest{} }
func (m *QueryEstimateRedeemAmountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEstimateRedeemAmountRequest) ProtoMessage()    {}
func (*QueryEstimateRedeemAmountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e622b2562178c0b, []int{28}
}
func (m *QueryEstimateRedeemAmountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEstimateRedeemAmountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEstimateRedeemAmountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEstimateRedeemAmountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEstimateRedeemAmountRequest.Merge(m, src)
}
func (m *QueryEstimateRedeemAmountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEstimateRedeemAmountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEstimateRedeemAmountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEstimateRedeemAmountRequest proto.InternalMessageInfo

func (m *QueryEstimateRedeemAmountRequest) GetRedeemDenom() string {
	if m != nil {
		return m.RedeemDenom
	}
	return ""
}

func (m *QueryEstimateRedeemAmountRequest) GetLptAmount() string {
	if m != nil {
		return m.LptAmount
	}
	return ""
}

type QueryEstimateRedeemAmountResponse struct {
	Amount types.Coin `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount" yaml:"amount"`
	Fee    types.Coin `protobuf:"bytes,2,opt,name=fee,proto3" json:"fee" yaml:"fee"`
}

func (m *QueryEstimateRedeemAmountResponse) Reset()         { *m = QueryEstimateRedeemAmountResponse{} }
func (m *QueryEstimateRedeemAmountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEstimateRedeemAmountResponse) ProtoMessage()    {}
func (*QueryEstimateRedeemAmountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e622b2562178c0b, []int{29}
}
func (m *QueryEstimateRedeemAmountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEstimateRedeemAmountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEstimateRedeemAmountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEstimateRedeemAmountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEstimateRedeemAmountResponse.Merge(m, src)
}
func (m *QueryEstimateRedeemAmountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEstimateRedeemAmountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEstimateRedeemAmountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEstimateRedeemAmountResponse proto.InternalMessageInfo

func (m *QueryEstimateRedeemAmountResponse) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *QueryEstimateRedeemAmountResponse) GetFee() types.Coin {
	if m != nil {
		return m.Fee
	}
	return types.Coin{}
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "ununifi.derivatives.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "ununifi.derivatives.QueryParamsResponse")
	proto.RegisterType((*QueryPoolRequest)(nil), "ununifi.derivatives.QueryPoolRequest")
	proto.RegisterType((*QueryPoolResponse)(nil), "ununifi.derivatives.QueryPoolResponse")
	proto.RegisterType((*QueryLiquidityProviderTokenRealAPYRequest)(nil), "ununifi.derivatives.QueryLiquidityProviderTokenRealAPYRequest")
	proto.RegisterType((*QueryLiquidityProviderTokenRealAPYResponse)(nil), "ununifi.derivatives.QueryLiquidityProviderTokenRealAPYResponse")
	proto.RegisterType((*QueryLiquidityProviderTokenNominalAPYRequest)(nil), "ununifi.derivatives.QueryLiquidityProviderTokenNominalAPYRequest")
	proto.RegisterType((*QueryLiquidityProviderTokenNominalAPYResponse)(nil), "ununifi.derivatives.QueryLiquidityProviderTokenNominalAPYResponse")
	proto.RegisterType((*QueryPerpetualFuturesRequest)(nil), "ununifi.derivatives.QueryPerpetualFuturesRequest")
	proto.RegisterType((*QueryPerpetualFuturesResponse)(nil), "ununifi.derivatives.QueryPerpetualFuturesResponse")
	proto.RegisterType((*QueryPerpetualFuturesMarketRequest)(nil), "ununifi.derivatives.QueryPerpetualFuturesMarketRequest")
	proto.RegisterType((*QueryPerpetualFuturesMarketResponse)(nil), "ununifi.derivatives.QueryPerpetualFuturesMarketResponse")
	proto.RegisterType((*QueryPerpetualOptionsRequest)(nil), "ununifi.derivatives.QueryPerpetualOptionsRequest")
	proto.RegisterType((*QueryPerpetualOptionsResponse)(nil), "ununifi.derivatives.QueryPerpetualOptionsResponse")
	proto.RegisterType((*QueryPerpetualOptionsMarketRequest)(nil), "ununifi.derivatives.QueryPerpetualOptionsMarketRequest")
	proto.RegisterType((*QueryPerpetualOptionsMarketResponse)(nil), "ununifi.derivatives.QueryPerpetualOptionsMarketResponse")
	proto.RegisterType((*QueryAllPositionsRequest)(nil), "ununifi.derivatives.QueryAllPositionsRequest")
	proto.RegisterType((*QueryAllPositionsResponse)(nil), "ununifi.derivatives.QueryAllPositionsResponse")
	proto.RegisterType((*QueryPositionRequest)(nil), "ununifi.derivatives.QueryPositionRequest")
	proto.RegisterType((*QueryPositionResponse)(nil), "ununifi.derivatives.QueryPositionResponse")
	proto.RegisterType((*QueryPerpetualFuturesPositionSizeRequest)(nil), "ununifi.derivatives.QueryPerpetualFuturesPositionSizeRequest")
	proto.RegisterType((*QueryPerpetualFuturesPositionSizeResponse)(nil), "ununifi.derivatives.QueryPerpetualFuturesPositionSizeResponse")
	proto.RegisterType((*QueryAddressPositionsRequest)(nil), "ununifi.derivatives.QueryAddressPositionsRequest")
	proto.RegisterType((*QueryAddressPositionsResponse)(nil), "ununifi.derivatives.QueryAddressPositionsResponse")
	proto.RegisterType((*QueryDLPTokenRateRequest)(nil), "ununifi.derivatives.QueryDLPTokenRateRequest")
	proto.RegisterType((*QueryDLPTokenRateResponse)(nil), "ununifi.derivatives.QueryDLPTokenRateResponse")
	proto.RegisterType((*QueryEstimateDLPTokenAmountRequest)(nil), "ununifi.derivatives.QueryEstimateDLPTokenAmountRequest")
	proto.RegisterType((*QueryEstimateDLPTokenAmountResponse)(nil), "ununifi.derivatives.QueryEstimateDLPTokenAmountResponse")
	proto.RegisterType((*QueryEstimateRedeemAmountRequest)(nil), "ununifi.derivatives.QueryEstimateRedeemAmountRequest")
	proto.RegisterType((*QueryEstimateRedeemAmountResponse)(nil), "ununifi.derivatives.QueryEstimateRedeemAmountResponse")
}

func init() { proto.RegisterFile("derivatives/query.proto", fileDescriptor_2e622b2562178c0b) }

var fileDescriptor_2e622b2562178c0b = []byte{
	// 2064 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x19, 0x5b, 0x6f, 0x1b, 0x59,
	0xb9, 0x93, 0xa4, 0x61, 0x73, 0x72, 0xdd, 0xd3, 0xdc, 0xea, 0x36, 0x76, 0x7a, 0x96, 0xcd, 0xa6,
	0x55, 0xed, 0xa1, 0xd9, 0xb0, 0xdd, 0xad, 0xd8, 0x5d, 0xc5, 0x0d, 0xd9, 0xed, 0xaa, 0x65, 0xdd,
	0x43, 0x8b, 0x04, 0x42, 0x1a, 0xc6, 0x9e, 0x63, 0x67, 0xb6, 0xe3, 0x39, 0xd3, 0x99, 0x71, 0x54,
	0x6f, 0x14, 0x84, 0x90, 0x90, 0xe0, 0x0d, 0x69, 0xb9, 0xbc, 0xf2, 0x02, 0xd2, 0x0a, 0x89, 0x1f,
	0xc0, 0x23, 0x42, 0xa8, 0x8f, 0x2b, 0x21, 0x21, 0x2e, 0x92, 0x05, 0x2d, 0x12, 0xcf, 0xf8, 0x05,
	0x1e, 0xd1, 0x9c, 0xf3, 0x8d, 0x3d, 0xe3, 0x8c, 0xc7, 0xe3, 0x20, 0xc4, 0x45, 0x3c, 0xc5, 0xe7,
	0x7c, 0xf7, 0xeb, 0xf9, 0xbe, 0x09, 0x5a, 0x33, 0x98, 0x6b, 0x1e, 0xe9, 0xbe, 0x79, 0xc4, 0x3c,
	0xf5, 0x71, 0x8b, 0xb9, 0xed, 0x92, 0xe3, 0x72, 0x9f, 0xe3, 0x0b, 0x2d, 0xbb, 0x65, 0x9b, 0x75,
	0xb3, 0x14, 0x41, 0xc8, 0x2d, 0x37, 0x78, 0x83, 0x0b, 0xb8, 0x1a, 0xfc, 0x92, 0xa8, 0xb9, 0xcb,
	0x0d, 0xce, 0x1b, 0x16, 0x53, 0x75, 0xc7, 0x54, 0x75, 0xdb, 0xe6, 0xbe, 0xee, 0x9b, 0xdc, 0xf6,
	0x00, 0x7a, 0xad, 0xc6, 0xbd, 0x26, 0xf7, 0xd4, 0xaa, 0xee, 0x31, 0x29, 0x41, 0x3d, 0xba, 0x51,
	0x65, 0xbe, 0x7e, 0x43, 0x75, 0xf4, 0x86, 0x69, 0x0b, 0x64, 0xc0, 0xcd, 0x47, 0x71, 0x43, 0xac,
	0x1a, 0x37, 0x43, 0xf8, 0x45, 0x09, 0xd7, 0xa4, 0x0a, 0xf2, 0x00, 0xa0, 0x8d, 0xa8, 0x21, 0x91,
	0xdf, 0x00, 0x5e, 0x8f, 0x82, 0x1d, 0xdd, 0xd5, 0x9b, 0x00, 0x21, 0xcb, 0x08, 0xdf, 0x0f, 0xb4,
	0xaa, 0x88, 0x4b, 0xca, 0x1e, 0xb7, 0x98, 0xe7, 0x93, 0x0a, 0xba, 0x10, 0xbb, 0xf5, 0x1c, 0x6e,
	0x7b, 0x0c, 0xbf, 0x81, 0xa6, 0x25, 0xf1, 0xba, 0xb2, 0xa9, 0x6c, 0xcf, 0xee, 0x5c, 0x2a, 0x25,
	0xb8, 0xa9, 0x24, 0x89, 0xca, 0x53, 0x4f, 0x3b, 0x85, 0x73, 0x14, 0x08, 0x08, 0x46, 0x4b, 0x92,
	0x23, 0xe7, 0x56, 0x28, 0xe5, 0x47, 0x93, 0xe8, 0xc5, 0xc8, 0x25, 0x08, 0xb9, 0x8f, 0x96, 0x9b,
	0xcc, 0x77, 0xcd, 0x9a, 0xa7, 0x3d, 0x6e, 0x71, 0x9f, 0x69, 0xbe, 0x59, 0x7b, 0xc4, 0x5c, 0x21,
	0x72, 0xa6, 0x5c, 0xe8, 0x76, 0x0a, 0x97, 0xda, 0x7a, 0xd3, 0xba, 0x45, 0x92, 0xb0, 0x08, 0xc5,
	0x70, 0x7d, 0x3f, 0xb8, 0x7d, 0x20, 0x2e, 0x71, 0x1d, 0x2d, 0x3a, 0x9c, 0x5b, 0x5a, 0x53, 0x77,
	0x1f, 0x31, 0x5f, 0xab, 0xe9, 0xce, 0xfa, 0x84, 0x30, 0x80, 0x24, 0x1b, 0xc0, 0xb9, 0x75, 0x4f,
	0xa0, 0xde, 0xd6, 0x9d, 0x72, 0xae, 0xdb, 0x29, 0xac, 0x4a, 0x89, 0x03, 0x4c, 0x08, 0x9d, 0x77,
	0xa2, 0xa8, 0xf8, 0x03, 0xb4, 0x70, 0xc4, 0xad, 0x56, 0x93, 0x69, 0x3b, 0xbb, 0x87, 0xbc, 0xe5,
	0x7a, 0xeb, 0x93, 0x42, 0xe9, 0xdb, 0xbf, 0xef, 0x14, 0xb6, 0x1a, 0xa6, 0x7f, 0xd8, 0xaa, 0x96,
	0x6a, 0xbc, 0x09, 0xa1, 0x83, 0x3f, 0x45, 0xcf, 0x78, 0xa4, 0xfa, 0x6d, 0x87, 0x79, 0xa5, 0x7d,
	0x56, 0xeb, 0x76, 0x0a, 0x2b, 0x52, 0x58, 0x9c, 0x13, 0xa1, 0xf3, 0xf2, 0x02, 0xce, 0xd8, 0x40,
	0x73, 0x75, 0xc6, 0xbc, 0x9e, 0xa4, 0x29, 0x21, 0x69, 0x6f, 0x2c, 0x49, 0x17, 0xa4, 0xa4, 0x28,
	0x1f, 0x42, 0x67, 0x83, 0x63, 0x78, 0xfa, 0x89, 0x82, 0xae, 0x8a, 0x10, 0xdd, 0x35, 0x1f, 0xb7,
	0x4c, 0xc3, 0xf4, 0xdb, 0x15, 0x97, 0x1f, 0x99, 0x06, 0x73, 0x1f, 0xf0, 0x47, 0xcc, 0xa6, 0x4c,
	0xb7, 0xf6, 0x2a, 0x5f, 0x86, 0x80, 0xe2, 0x37, 0xd1, 0x7c, 0x95, 0xd5, 0xb9, 0xcb, 0xb4, 0x43,
	0x66, 0x36, 0x0e, 0x7d, 0x11, 0xb3, 0xc9, 0xf2, 0x7a, 0xb7, 0x53, 0x58, 0x96, 0xa2, 0x62, 0x60,
	0x42, 0xe7, 0xe4, 0xf9, 0x5d, 0x71, 0xc4, 0xb7, 0xd0, 0x9c, 0x5e, 0xf7, 0x99, 0x1b, 0x52, 0x4f,
	0x08, 0xea, 0xb5, 0xbe, 0xa2, 0x51, 0x28, 0xa1, 0xb3, 0xe2, 0x28, 0x69, 0xc9, 0x13, 0x74, 0x2d,
	0x8b, 0x9e, 0x90, 0x63, 0xef, 0xa1, 0x49, 0xdd, 0x69, 0x43, 0x4a, 0xbd, 0x3e, 0x96, 0xcf, 0x10,
	0xa8, 0xe2, 0xb4, 0x09, 0x0d, 0x98, 0x90, 0x8f, 0x15, 0x74, 0x3d, 0x45, 0xf4, 0x17, 0x78, 0xd3,
	0xb4, 0xff, 0x53, 0xbc, 0x74, 0x8c, 0x8a, 0x19, 0x55, 0xfd, 0x17, 0x38, 0x2a, 0x8f, 0x2e, 0xcb,
	0x6a, 0x67, 0xae, 0xc3, 0xfc, 0x96, 0x6e, 0x1d, 0xb4, 0xfc, 0x96, 0xcb, 0x7a, 0x4d, 0xe7, 0x3b,
	0x53, 0x68, 0x63, 0x08, 0xc2, 0x88, 0xd6, 0x30, 0x71, 0xf6, 0xd6, 0xf0, 0x3f, 0x57, 0xb2, 0x58,
	0x43, 0x0b, 0x16, 0xb7, 0x1b, 0x9a, 0xc3, 0x3d, 0x53, 0xbc, 0x44, 0xeb, 0xe7, 0x45, 0xaf, 0xbb,
	0x58, 0x82, 0x17, 0x23, 0x78, 0x5e, 0x4a, 0xf0, 0xbc, 0x94, 0x6e, 0x73, 0xd3, 0x2e, 0x6f, 0x04,
	0xad, 0xba, 0x6f, 0x46, 0x9c, 0x9c, 0xd0, 0xf9, 0xe0, 0xa2, 0x12, 0x9e, 0x71, 0x15, 0x2d, 0x7a,
	0x87, 0xdc, 0xf5, 0x23, 0x12, 0xa6, 0x47, 0x49, 0xc8, 0x83, 0x04, 0x68, 0xa4, 0x03, 0xf4, 0x84,
	0x2e, 0x88, 0x9b, 0x9e, 0x0c, 0xf2, 0x91, 0x82, 0x48, 0x62, 0x2e, 0xc8, 0x66, 0x1b, 0x96, 0xd2,
	0x2e, 0x42, 0x81, 0x2c, 0xcd, 0x60, 0x36, 0x6f, 0x42, 0x96, 0xae, 0x74, 0x3b, 0x85, 0x17, 0xa1,
	0x8e, 0x7a, 0x30, 0x42, 0x67, 0x82, 0xc3, 0x7e, 0xf0, 0x1b, 0xdf, 0x44, 0xb3, 0x32, 0x31, 0x24,
	0x99, 0xcc, 0x9e, 0xd5, 0x6e, 0xa7, 0x80, 0x25, 0x59, 0x04, 0x48, 0x28, 0x12, 0x27, 0x41, 0x48,
	0xfe, 0x36, 0x85, 0x5e, 0x4a, 0xd5, 0x0a, 0xf2, 0xb4, 0x82, 0xce, 0x3b, 0xae, 0x59, 0x63, 0xa0,
	0xd1, 0xad, 0xb1, 0x22, 0x3c, 0x07, 0x6f, 0x4d, 0xc0, 0x80, 0x50, 0xc9, 0xe8, 0xff, 0x99, 0x9f,
	0x25, 0xf3, 0x3f, 0x48, 0xcc, 0xfc, 0x33, 0x5a, 0x34, 0xa2, 0x08, 0x9a, 0xc9, 0x45, 0x30, 0x53,
	0xde, 0x1f, 0x4b, 0x58, 0xd6, 0x7a, 0x38, 0xd5, 0x3b, 0xdf, 0x77, 0x04, 0x20, 0xec, 0x9d, 0x85,
	0xc1, 0xd6, 0xd9, 0x83, 0xcb, 0x94, 0x4c, 0x28, 0x28, 0xc0, 0xf8, 0xb7, 0x16, 0xd4, 0xcb, 0x83,
	0xf5, 0x34, 0xa0, 0x14, 0x28, 0x5f, 0x45, 0xeb, 0x02, 0x6d, 0xcf, 0xb2, 0x7a, 0x2e, 0x09, 0x35,
	0x3e, 0x40, 0xa8, 0x3f, 0x48, 0xc3, 0x5c, 0xba, 0x15, 0x6b, 0x44, 0x72, 0xae, 0x0f, 0xdb, 0x51,
	0x45, 0x6f, 0x30, 0xa0, 0xa5, 0x11, 0x4a, 0xf2, 0x0b, 0x05, 0x5d, 0x4c, 0x10, 0x02, 0x15, 0xfd,
	0x55, 0x34, 0xd3, 0x0f, 0xb4, 0xb2, 0x39, 0xb9, 0x3d, 0xbb, 0xf3, 0xe9, 0xc4, 0xd9, 0x31, 0x60,
	0x61, 0x32, 0x23, 0xe4, 0x50, 0x5e, 0x87, 0xc6, 0xb7, 0x14, 0x4e, 0x90, 0xbd, 0x10, 0xf7, 0x19,
	0xe2, 0x77, 0x62, 0x36, 0xc8, 0xd1, 0xf4, 0x95, 0x91, 0x36, 0x48, 0xd5, 0x62, 0x46, 0xdc, 0x44,
	0xcb, 0x30, 0x50, 0x4b, 0xd6, 0xa1, 0x93, 0x0a, 0x68, 0x36, 0x94, 0xa6, 0x99, 0x86, 0x8c, 0x2b,
	0x45, 0xe1, 0xd5, 0x1d, 0x83, 0xfc, 0x72, 0x12, 0xad, 0x0c, 0x50, 0x82, 0xe5, 0x14, 0xbd, 0x10,
	0xe2, 0x81, 0x77, 0x37, 0x86, 0x0c, 0xcd, 0x60, 0xf1, 0xda, 0xd3, 0x4e, 0x41, 0xe9, 0x76, 0x0a,
	0x8b, 0x71, 0x8b, 0x09, 0xed, 0xf1, 0xc1, 0x0c, 0x2d, 0x1d, 0xe9, 0x56, 0x4b, 0xe8, 0x1c, 0x6c,
	0x33, 0x75, 0xd3, 0x07, 0xab, 0x53, 0x9e, 0x90, 0x02, 0x78, 0x72, 0x0d, 0x3a, 0xce, 0x00, 0x03,
	0x42, 0x17, 0x7b, 0x57, 0x15, 0x71, 0x83, 0xbf, 0xad, 0xa0, 0xb5, 0xa6, 0xee, 0x36, 0x4c, 0x5b,
	0x6b, 0xea, 0xa6, 0xed, 0x33, 0x5b, 0xb7, 0x6b, 0x4c, 0x73, 0x75, 0x9f, 0x41, 0xaf, 0xab, 0x04,
	0x3c, 0xc7, 0x2a, 0xd8, 0x3c, 0xb4, 0xd9, 0x64, 0xb6, 0x84, 0xae, 0x48, 0xc8, 0xbd, 0x3e, 0x80,
	0xea, 0x3e, 0x0b, 0x2c, 0x66, 0xf5, 0x3a, 0xab, 0x05, 0xbe, 0xd2, 0x24, 0x8a, 0x68, 0x82, 0xe3,
	0x58, 0x3c, 0xc8, 0x80, 0xd0, 0xc5, 0xde, 0xd5, 0x3d, 0x79, 0xf3, 0x73, 0x05, 0x6d, 0x27, 0x3e,
	0x50, 0x61, 0x74, 0xbe, 0x68, 0x7e, 0x18, 0x66, 0x3f, 0xfe, 0x1a, 0x9a, 0xef, 0x25, 0x45, 0x60,
	0xa2, 0x08, 0xef, 0xc2, 0xce, 0x95, 0xd4, 0xf0, 0x3e, 0x68, 0x3b, 0x2c, 0x3a, 0xaa, 0xc6, 0x38,
	0x10, 0x3a, 0xe7, 0x44, 0xf0, 0xf0, 0x75, 0xf4, 0x29, 0xdd, 0x30, 0x5c, 0xe6, 0x79, 0xd0, 0x13,
	0x70, 0xb7, 0x53, 0x58, 0x80, 0xb9, 0x50, 0x02, 0x08, 0x0d, 0x51, 0xc8, 0x8f, 0xc3, 0x5d, 0x23,
	0x5d, 0x79, 0xc8, 0xcb, 0x27, 0x68, 0xcd, 0xe7, 0xbe, 0x6e, 0xf5, 0xba, 0xa6, 0xe6, 0x99, 0x1f,
	0x32, 0xad, 0xe5, 0x19, 0x90, 0xa6, 0x29, 0x8e, 0xdd, 0x02, 0xc7, 0x42, 0x30, 0x07, 0xf8, 0xb4,
	0x3c, 0x43, 0xf0, 0x22, 0x74, 0x59, 0x40, 0xa2, 0xe2, 0x1f, 0x7a, 0x06, 0xf9, 0x9e, 0x02, 0xcd,
	0x78, 0x4f, 0x2a, 0x7e, 0xaa, 0x25, 0x45, 0xcc, 0x56, 0x46, 0x9a, 0x3d, 0xd0, 0xc0, 0x26, 0xce,
	0xdc, 0xc0, 0x7e, 0xa5, 0xc0, 0x1b, 0x70, 0x5a, 0xad, 0xff, 0xae, 0x26, 0x96, 0x83, 0x6e, 0xbf,
	0x7f, 0xb7, 0x22, 0x97, 0x37, 0xdd, 0x0f, 0x0d, 0x26, 0x5f, 0x87, 0x26, 0x1d, 0x87, 0x81, 0x7d,
	0xab, 0x68, 0xda, 0x6b, 0x37, 0xab, 0xdc, 0x82, 0x06, 0x07, 0x27, 0x7c, 0x07, 0x9d, 0x0f, 0x8a,
	0x33, 0x48, 0xc2, 0xc9, 0xf4, 0xc4, 0x18, 0x30, 0xd4, 0xb0, 0x1c, 0x51, 0xd6, 0x1e, 0xa1, 0x92,
	0x03, 0xf9, 0x56, 0xf8, 0x8c, 0x7e, 0xde, 0xf3, 0xcd, 0xa6, 0xee, 0xb3, 0x50, 0x91, 0xbd, 0x26,
	0x6f, 0xd9, 0xd1, 0x67, 0xb4, 0x69, 0xda, 0xfe, 0xb0, 0x67, 0xb4, 0x0f, 0x23, 0x74, 0x26, 0x38,
	0xc8, 0x67, 0xf4, 0x2a, 0x9a, 0xd6, 0x05, 0x1b, 0xa8, 0x96, 0x17, 0xbb, 0x9d, 0xc2, 0x3c, 0xa4,
	0x8d, 0xb8, 0x27, 0x14, 0x10, 0xc8, 0x9f, 0x14, 0x78, 0x39, 0x87, 0xe9, 0x01, 0x2e, 0xa9, 0xa2,
	0x65, 0x06, 0x18, 0x86, 0x16, 0x98, 0x03, 0x02, 0x46, 0x96, 0xc8, 0x0a, 0x78, 0x62, 0x40, 0x3e,
	0xee, 0x71, 0xdb, 0xb7, 0x1c, 0x29, 0x0b, 0x7f, 0x09, 0xcd, 0x1a, 0x4c, 0xe4, 0x81, 0x56, 0x67,
	0x6c, 0x74, 0x23, 0xcf, 0x01, 0x6b, 0x18, 0x0e, 0x22, 0xb4, 0x84, 0x22, 0x38, 0x1d, 0x30, 0x16,
	0xd4, 0xd9, 0x66, 0xcc, 0x46, 0xca, 0x0c, 0xc6, 0x9a, 0x71, 0x4f, 0xdf, 0x42, 0x73, 0xae, 0xb8,
	0x8e, 0xf9, 0x3a, 0xb2, 0x0d, 0x47, 0xa1, 0x84, 0xce, 0xca, 0xa3, 0xf4, 0xf7, 0x2e, 0x42, 0x96,
	0xe3, 0x6b, 0x31, 0x9f, 0x47, 0xa2, 0xd4, 0x87, 0x11, 0x3a, 0x63, 0x39, 0xbe, 0x14, 0x4c, 0x7e,
	0xa6, 0xa0, 0x2b, 0x29, 0x6a, 0x81, 0xe3, 0xdf, 0xed, 0xc5, 0xf2, 0xac, 0xae, 0x06, 0x7a, 0xfc,
	0x36, 0x9a, 0xcc, 0xe4, 0x56, 0x0c, 0x6c, 0x50, 0x6f, 0x4e, 0x26, 0x34, 0xa0, 0xdc, 0xf9, 0xfb,
	0x0a, 0x3a, 0x2f, 0x14, 0xc6, 0xdf, 0x50, 0xd0, 0xb4, 0xfc, 0x3a, 0x87, 0x5f, 0x19, 0x5a, 0xf8,
	0xf1, 0x4f, 0x81, 0xb9, 0xed, 0xd1, 0x88, 0x30, 0xa5, 0xbd, 0xf4, 0xcd, 0x5f, 0xff, 0xf9, 0xa3,
	0x89, 0x0d, 0x7c, 0x49, 0x05, 0x0a, 0xf5, 0xf4, 0x57, 0x47, 0xfc, 0x04, 0x4d, 0x55, 0x38, 0xb7,
	0xf0, 0xcb, 0x29, 0x6c, 0xfb, 0x9f, 0x08, 0x73, 0x5b, 0xa3, 0xd0, 0x40, 0xf6, 0x15, 0x21, 0xfb,
	0x12, 0xbe, 0x98, 0x2c, 0x3b, 0x90, 0xf8, 0x07, 0x05, 0x6d, 0xa4, 0x7e, 0x1d, 0xc2, 0x6f, 0x0d,
	0x17, 0x96, 0xe5, 0xf3, 0x57, 0xee, 0xed, 0x33, 0xd3, 0x83, 0x15, 0x6f, 0x08, 0x2b, 0x5e, 0xc5,
	0x37, 0x12, 0xad, 0xb0, 0x42, 0x1e, 0x45, 0x07, 0x98, 0x78, 0xaa, 0xcb, 0x74, 0xab, 0xa8, 0x3b,
	0x6d, 0xfc, 0x17, 0x05, 0x6d, 0x8e, 0xfa, 0xaa, 0x83, 0xf7, 0xc6, 0x55, 0xf0, 0xd4, 0xc7, 0xab,
	0x5c, 0xf9, 0x9f, 0x61, 0x01, 0x66, 0x7e, 0x4e, 0x98, 0xf9, 0x1a, 0xde, 0xcd, 0x6c, 0xa6, 0x2d,
	0x99, 0x08, 0x4b, 0x3f, 0x56, 0xd0, 0xd2, 0xe0, 0x84, 0x80, 0x6f, 0xa4, 0xe4, 0x49, 0xf2, 0xe7,
	0xa6, 0xdc, 0xce, 0x38, 0x24, 0xa0, 0x79, 0x49, 0x68, 0xbe, 0x8d, 0xb7, 0x92, 0xd3, 0x2c, 0x24,
	0x2b, 0xd6, 0x41, 0xad, 0xdf, 0x28, 0x68, 0x35, 0xf9, 0x5b, 0x01, 0xbe, 0x99, 0x5d, 0x7c, 0x6c,
	0x45, 0xcb, 0xbd, 0x3e, 0x3e, 0x21, 0x68, 0x7f, 0x47, 0x68, 0x7f, 0x1b, 0xef, 0x65, 0xd3, 0x5e,
	0x3d, 0xee, 0xaf, 0x7b, 0x27, 0xea, 0x71, 0x64, 0x89, 0x3b, 0x89, 0x07, 0x01, 0x96, 0xb6, 0x4c,
	0x41, 0x88, 0xef, 0xad, 0x99, 0x82, 0x30, 0xb8, 0xca, 0x66, 0x0d, 0x02, 0x07, 0xb5, 0x62, 0x41,
	0x88, 0x2d, 0x98, 0x99, 0x82, 0x90, 0xb4, 0x27, 0x67, 0x0a, 0x42, 0xf2, 0x2e, 0x9b, 0x35, 0x08,
	0xa0, 0x7d, 0x5a, 0x10, 0xbe, 0xaf, 0xa0, 0xb9, 0xe8, 0xb6, 0x8a, 0x8b, 0xc3, 0xb5, 0x4a, 0x58,
	0x9d, 0x73, 0xa5, 0xac, 0xe8, 0xa0, 0xfa, 0x96, 0x50, 0x7d, 0x13, 0xe7, 0x87, 0x34, 0xd9, 0x50,
	0x8d, 0x1f, 0x2a, 0xe8, 0x85, 0x90, 0x1a, 0x5f, 0x4d, 0xeb, 0xe0, 0xb1, 0x2d, 0x35, 0x77, 0x2d,
	0x0b, 0x2a, 0xe8, 0xb2, 0x2b, 0x74, 0x29, 0xe1, 0xeb, 0xe9, 0xba, 0xa8, 0xc7, 0x91, 0xbd, 0xf7,
	0x04, 0xff, 0x55, 0x41, 0x97, 0xd3, 0xb6, 0x0b, 0xfc, 0x66, 0xf6, 0xe2, 0x4a, 0x58, 0xa9, 0x72,
	0x6f, 0x9d, 0x95, 0x1c, 0xac, 0xa2, 0xc2, 0xaa, 0xbb, 0xf8, 0xbd, 0x11, 0x56, 0x25, 0xd4, 0x6a,
	0x6c, 0x11, 0x3b, 0x51, 0x8f, 0x61, 0xbd, 0x38, 0xc1, 0x3f, 0x55, 0xd0, 0xd2, 0xe0, 0x4a, 0x90,
	0x56, 0xaa, 0x43, 0xb6, 0x9a, 0xb4, 0x52, 0x1d, 0xb6, 0x71, 0x90, 0xcf, 0x08, 0x7b, 0xae, 0xe1,
	0xed, 0x44, 0x7b, 0x7a, 0x3a, 0x46, 0x72, 0xe7, 0x07, 0x0a, 0x9a, 0x8f, 0x0e, 0xf7, 0xa9, 0x49,
	0x9d, 0xb0, 0x21, 0xa4, 0x25, 0x75, 0xd2, 0xd2, 0x30, 0x32, 0xa9, 0xb9, 0xe5, 0xa9, 0x86, 0xe5,
	0xe0, 0xdf, 0x29, 0x68, 0x35, 0x79, 0xd8, 0x4e, 0xeb, 0x22, 0xa9, 0x6b, 0x42, 0x5a, 0x17, 0x49,
	0x9f, 0xeb, 0xc9, 0x5d, 0xa1, 0xf5, 0x01, 0xde, 0x4f, 0xd4, 0x3a, 0x1c, 0xd2, 0x8b, 0x86, 0xe5,
	0x14, 0xfd, 0x80, 0xbc, 0x28, 0x87, 0x49, 0xf5, 0xb8, 0xbf, 0x7a, 0x04, 0x39, 0x22, 0x2e, 0x4f,
	0x82, 0x0e, 0xb9, 0x9c, 0x34, 0xcd, 0xe2, 0xcf, 0x8e, 0x56, 0x30, 0x61, 0x28, 0xcf, 0xbd, 0x36,
	0x2e, 0x19, 0x58, 0xf5, 0xbe, 0xb0, 0xea, 0x0e, 0x7e, 0x27, 0xdd, 0x2a, 0x39, 0xc3, 0xf7, 0x4c,
	0x8a, 0x4e, 0xf8, 0x27, 0xea, 0x71, 0x7f, 0x6c, 0x3f, 0x29, 0x1f, 0x3c, 0x7d, 0x96, 0x57, 0x3e,
	0x79, 0x96, 0x57, 0xfe, 0xf8, 0x2c, 0xaf, 0x7c, 0xf7, 0x79, 0xfe, 0xdc, 0x27, 0xcf, 0xf3, 0xe7,
	0x7e, 0xfb, 0x3c, 0x7f, 0xee, 0x2b, 0xd7, 0x23, 0x5f, 0x7c, 0x1e, 0xda, 0x0f, 0x6d, 0xf3, 0xc0,
	0x54, 0x6b, 0x87, 0xba, 0x69, 0xab, 0x4f, 0x62, 0x42, 0xc5, 0xb7, 0x9f, 0xea, 0xb4, 0xf8, 0x67,
	0xf9, 0xab, 0xff, 0x08, 0x00, 0x00, 0xff, 0xff, 0xc3, 0xaf, 0x73, 0x41, 0x30, 0x20, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// this line is used by starport scaffolding # 2
	Pool(ctx context.Context, in *QueryPoolRequest, opts ...grpc.CallOption) (*QueryPoolResponse, error)
	LiquidityProviderTokenRealAPY(ctx context.Context, in *QueryLiquidityProviderTokenRealAPYRequest, opts ...grpc.CallOption) (*QueryLiquidityProviderTokenRealAPYResponse, error)
	LiquidityProviderTokenNominalAPY(ctx context.Context, in *QueryLiquidityProviderTokenNominalAPYRequest, opts ...grpc.CallOption) (*QueryLiquidityProviderTokenNominalAPYResponse, error)
	PerpetualFutures(ctx context.Context, in *QueryPerpetualFuturesRequest, opts ...grpc.CallOption) (*QueryPerpetualFuturesResponse, error)
	PerpetualFuturesMarket(ctx context.Context, in *QueryPerpetualFuturesMarketRequest, opts ...grpc.CallOption) (*QueryPerpetualFuturesMarketResponse, error)
	PerpetualOptions(ctx context.Context, in *QueryPerpetualOptionsRequest, opts ...grpc.CallOption) (*QueryPerpetualOptionsResponse, error)
	PerpetualOptionsMarket(ctx context.Context, in *QueryPerpetualOptionsMarketRequest, opts ...grpc.CallOption) (*QueryPerpetualOptionsMarketResponse, error)
	AllPositions(ctx context.Context, in *QueryAllPositionsRequest, opts ...grpc.CallOption) (*QueryAllPositionsResponse, error)
	Position(ctx context.Context, in *QueryPositionRequest, opts ...grpc.CallOption) (*QueryPositionResponse, error)
	PerpetualFuturesPositionSize(ctx context.Context, in *QueryPerpetualFuturesPositionSizeRequest, opts ...grpc.CallOption) (*QueryPerpetualFuturesPositionSizeResponse, error)
	AddressPositions(ctx context.Context, in *QueryAddressPositionsRequest, opts ...grpc.CallOption) (*QueryAddressPositionsResponse, error)
	DLPTokenRates(ctx context.Context, in *QueryDLPTokenRateRequest, opts ...grpc.CallOption) (*QueryDLPTokenRateResponse, error)
	EstimateDLPTokenAmount(ctx context.Context, in *QueryEstimateDLPTokenAmountRequest, opts ...grpc.CallOption) (*QueryEstimateDLPTokenAmountResponse, error)
	EstimateRedeemAmount(ctx context.Context, in *QueryEstimateRedeemAmountRequest, opts ...grpc.CallOption) (*QueryEstimateRedeemAmountResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/ununifi.derivatives.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Pool(ctx context.Context, in *QueryPoolRequest, opts ...grpc.CallOption) (*QueryPoolResponse, error) {
	out := new(QueryPoolResponse)
	err := c.cc.Invoke(ctx, "/ununifi.derivatives.Query/Pool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LiquidityProviderTokenRealAPY(ctx context.Context, in *QueryLiquidityProviderTokenRealAPYRequest, opts ...grpc.CallOption) (*QueryLiquidityProviderTokenRealAPYResponse, error) {
	out := new(QueryLiquidityProviderTokenRealAPYResponse)
	err := c.cc.Invoke(ctx, "/ununifi.derivatives.Query/LiquidityProviderTokenRealAPY", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LiquidityProviderTokenNominalAPY(ctx context.Context, in *QueryLiquidityProviderTokenNominalAPYRequest, opts ...grpc.CallOption) (*QueryLiquidityProviderTokenNominalAPYResponse, error) {
	out := new(QueryLiquidityProviderTokenNominalAPYResponse)
	err := c.cc.Invoke(ctx, "/ununifi.derivatives.Query/LiquidityProviderTokenNominalAPY", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PerpetualFutures(ctx context.Context, in *QueryPerpetualFuturesRequest, opts ...grpc.CallOption) (*QueryPerpetualFuturesResponse, error) {
	out := new(QueryPerpetualFuturesResponse)
	err := c.cc.Invoke(ctx, "/ununifi.derivatives.Query/PerpetualFutures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PerpetualFuturesMarket(ctx context.Context, in *QueryPerpetualFuturesMarketRequest, opts ...grpc.CallOption) (*QueryPerpetualFuturesMarketResponse, error) {
	out := new(QueryPerpetualFuturesMarketResponse)
	err := c.cc.Invoke(ctx, "/ununifi.derivatives.Query/PerpetualFuturesMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PerpetualOptions(ctx context.Context, in *QueryPerpetualOptionsRequest, opts ...grpc.CallOption) (*QueryPerpetualOptionsResponse, error) {
	out := new(QueryPerpetualOptionsResponse)
	err := c.cc.Invoke(ctx, "/ununifi.derivatives.Query/PerpetualOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PerpetualOptionsMarket(ctx context.Context, in *QueryPerpetualOptionsMarketRequest, opts ...grpc.CallOption) (*QueryPerpetualOptionsMarketResponse, error) {
	out := new(QueryPerpetualOptionsMarketResponse)
	err := c.cc.Invoke(ctx, "/ununifi.derivatives.Query/PerpetualOptionsMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllPositions(ctx context.Context, in *QueryAllPositionsRequest, opts ...grpc.CallOption) (*QueryAllPositionsResponse, error) {
	out := new(QueryAllPositionsResponse)
	err := c.cc.Invoke(ctx, "/ununifi.derivatives.Query/AllPositions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Position(ctx context.Context, in *QueryPositionRequest, opts ...grpc.CallOption) (*QueryPositionResponse, error) {
	out := new(QueryPositionResponse)
	err := c.cc.Invoke(ctx, "/ununifi.derivatives.Query/Position", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PerpetualFuturesPositionSize(ctx context.Context, in *QueryPerpetualFuturesPositionSizeRequest, opts ...grpc.CallOption) (*QueryPerpetualFuturesPositionSizeResponse, error) {
	out := new(QueryPerpetualFuturesPositionSizeResponse)
	err := c.cc.Invoke(ctx, "/ununifi.derivatives.Query/PerpetualFuturesPositionSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AddressPositions(ctx context.Context, in *QueryAddressPositionsRequest, opts ...grpc.CallOption) (*QueryAddressPositionsResponse, error) {
	out := new(QueryAddressPositionsResponse)
	err := c.cc.Invoke(ctx, "/ununifi.derivatives.Query/AddressPositions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DLPTokenRates(ctx context.Context, in *QueryDLPTokenRateRequest, opts ...grpc.CallOption) (*QueryDLPTokenRateResponse, error) {
	out := new(QueryDLPTokenRateResponse)
	err := c.cc.Invoke(ctx, "/ununifi.derivatives.Query/DLPTokenRates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EstimateDLPTokenAmount(ctx context.Context, in *QueryEstimateDLPTokenAmountRequest, opts ...grpc.CallOption) (*QueryEstimateDLPTokenAmountResponse, error) {
	out := new(QueryEstimateDLPTokenAmountResponse)
	err := c.cc.Invoke(ctx, "/ununifi.derivatives.Query/EstimateDLPTokenAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EstimateRedeemAmount(ctx context.Context, in *QueryEstimateRedeemAmountRequest, opts ...grpc.CallOption) (*QueryEstimateRedeemAmountResponse, error) {
	out := new(QueryEstimateRedeemAmountResponse)
	err := c.cc.Invoke(ctx, "/ununifi.derivatives.Query/EstimateRedeemAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// this line is used by starport scaffolding # 2
	Pool(context.Context, *QueryPoolRequest) (*QueryPoolResponse, error)
	LiquidityProviderTokenRealAPY(context.Context, *QueryLiquidityProviderTokenRealAPYRequest) (*QueryLiquidityProviderTokenRealAPYResponse, error)
	LiquidityProviderTokenNominalAPY(context.Context, *QueryLiquidityProviderTokenNominalAPYRequest) (*QueryLiquidityProviderTokenNominalAPYResponse, error)
	PerpetualFutures(context.Context, *QueryPerpetualFuturesRequest) (*QueryPerpetualFuturesResponse, error)
	PerpetualFuturesMarket(context.Context, *QueryPerpetualFuturesMarketRequest) (*QueryPerpetualFuturesMarketResponse, error)
	PerpetualOptions(context.Context, *QueryPerpetualOptionsRequest) (*QueryPerpetualOptionsResponse, error)
	PerpetualOptionsMarket(context.Context, *QueryPerpetualOptionsMarketRequest) (*QueryPerpetualOptionsMarketResponse, error)
	AllPositions(context.Context, *QueryAllPositionsRequest) (*QueryAllPositionsResponse, error)
	Position(context.Context, *QueryPositionRequest) (*QueryPositionResponse, error)
	PerpetualFuturesPositionSize(context.Context, *QueryPerpetualFuturesPositionSizeRequest) (*QueryPerpetualFuturesPositionSizeResponse, error)
	AddressPositions(context.Context, *QueryAddressPositionsRequest) (*QueryAddressPositionsResponse, error)
	DLPTokenRates(context.Context, *QueryDLPTokenRateRequest) (*QueryDLPTokenRateResponse, error)
	EstimateDLPTokenAmount(context.Context, *QueryEstimateDLPTokenAmountRequest) (*QueryEstimateDLPTokenAmountResponse, error)
	EstimateRedeemAmount(context.Context, *QueryEstimateRedeemAmountRequest) (*QueryEstimateRedeemAmountResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Pool(ctx context.Context, req *QueryPoolRequest) (*QueryPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pool not implemented")
}
func (*UnimplementedQueryServer) LiquidityProviderTokenRealAPY(ctx context.Context, req *QueryLiquidityProviderTokenRealAPYRequest) (*QueryLiquidityProviderTokenRealAPYResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidityProviderTokenRealAPY not implemented")
}
func (*UnimplementedQueryServer) LiquidityProviderTokenNominalAPY(ctx context.Context, req *QueryLiquidityProviderTokenNominalAPYRequest) (*QueryLiquidityProviderTokenNominalAPYResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidityProviderTokenNominalAPY not implemented")
}
func (*UnimplementedQueryServer) PerpetualFutures(ctx context.Context, req *QueryPerpetualFuturesRequest) (*QueryPerpetualFuturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerpetualFutures not implemented")
}
func (*UnimplementedQueryServer) PerpetualFuturesMarket(ctx context.Context, req *QueryPerpetualFuturesMarketRequest) (*QueryPerpetualFuturesMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerpetualFuturesMarket not implemented")
}
func (*UnimplementedQueryServer) PerpetualOptions(ctx context.Context, req *QueryPerpetualOptionsRequest) (*QueryPerpetualOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerpetualOptions not implemented")
}
func (*UnimplementedQueryServer) PerpetualOptionsMarket(ctx context.Context, req *QueryPerpetualOptionsMarketRequest) (*QueryPerpetualOptionsMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerpetualOptionsMarket not implemented")
}
func (*UnimplementedQueryServer) AllPositions(ctx context.Context, req *QueryAllPositionsRequest) (*QueryAllPositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllPositions not implemented")
}
func (*UnimplementedQueryServer) Position(ctx context.Context, req *QueryPositionRequest) (*QueryPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Position not implemented")
}
func (*UnimplementedQueryServer) PerpetualFuturesPositionSize(ctx context.Context, req *QueryPerpetualFuturesPositionSizeRequest) (*QueryPerpetualFuturesPositionSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerpetualFuturesPositionSize not implemented")
}
func (*UnimplementedQueryServer) AddressPositions(ctx context.Context, req *QueryAddressPositionsRequest) (*QueryAddressPositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressPositions not implemented")
}
func (*UnimplementedQueryServer) DLPTokenRates(ctx context.Context, req *QueryDLPTokenRateRequest) (*QueryDLPTokenRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DLPTokenRates not implemented")
}
func (*UnimplementedQueryServer) EstimateDLPTokenAmount(ctx context.Context, req *QueryEstimateDLPTokenAmountRequest) (*QueryEstimateDLPTokenAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateDLPTokenAmount not implemented")
}
func (*UnimplementedQueryServer) EstimateRedeemAmount(ctx context.Context, req *QueryEstimateRedeemAmountRequest) (*QueryEstimateRedeemAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateRedeemAmount not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.derivatives.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Pool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Pool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.derivatives.Query/Pool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Pool(ctx, req.(*QueryPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LiquidityProviderTokenRealAPY_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLiquidityProviderTokenRealAPYRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LiquidityProviderTokenRealAPY(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.derivatives.Query/LiquidityProviderTokenRealAPY",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LiquidityProviderTokenRealAPY(ctx, req.(*QueryLiquidityProviderTokenRealAPYRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LiquidityProviderTokenNominalAPY_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLiquidityProviderTokenNominalAPYRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LiquidityProviderTokenNominalAPY(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.derivatives.Query/LiquidityProviderTokenNominalAPY",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LiquidityProviderTokenNominalAPY(ctx, req.(*QueryLiquidityProviderTokenNominalAPYRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PerpetualFutures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPerpetualFuturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PerpetualFutures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.derivatives.Query/PerpetualFutures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PerpetualFutures(ctx, req.(*QueryPerpetualFuturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PerpetualFuturesMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPerpetualFuturesMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PerpetualFuturesMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.derivatives.Query/PerpetualFuturesMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PerpetualFuturesMarket(ctx, req.(*QueryPerpetualFuturesMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PerpetualOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPerpetualOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PerpetualOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.derivatives.Query/PerpetualOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PerpetualOptions(ctx, req.(*QueryPerpetualOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PerpetualOptionsMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPerpetualOptionsMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PerpetualOptionsMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.derivatives.Query/PerpetualOptionsMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PerpetualOptionsMarket(ctx, req.(*QueryPerpetualOptionsMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllPositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllPositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.derivatives.Query/AllPositions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllPositions(ctx, req.(*QueryAllPositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Position_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Position(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.derivatives.Query/Position",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Position(ctx, req.(*QueryPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PerpetualFuturesPositionSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPerpetualFuturesPositionSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PerpetualFuturesPositionSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.derivatives.Query/PerpetualFuturesPositionSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PerpetualFuturesPositionSize(ctx, req.(*QueryPerpetualFuturesPositionSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AddressPositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAddressPositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AddressPositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.derivatives.Query/AddressPositions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AddressPositions(ctx, req.(*QueryAddressPositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DLPTokenRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDLPTokenRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DLPTokenRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.derivatives.Query/DLPTokenRates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DLPTokenRates(ctx, req.(*QueryDLPTokenRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EstimateDLPTokenAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEstimateDLPTokenAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EstimateDLPTokenAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.derivatives.Query/EstimateDLPTokenAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EstimateDLPTokenAmount(ctx, req.(*QueryEstimateDLPTokenAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EstimateRedeemAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEstimateRedeemAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EstimateRedeemAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.derivatives.Query/EstimateRedeemAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EstimateRedeemAmount(ctx, req.(*QueryEstimateRedeemAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ununifi.derivatives.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Pool",
			Handler:    _Query_Pool_Handler,
		},
		{
			MethodName: "LiquidityProviderTokenRealAPY",
			Handler:    _Query_LiquidityProviderTokenRealAPY_Handler,
		},
		{
			MethodName: "LiquidityProviderTokenNominalAPY",
			Handler:    _Query_LiquidityProviderTokenNominalAPY_Handler,
		},
		{
			MethodName: "PerpetualFutures",
			Handler:    _Query_PerpetualFutures_Handler,
		},
		{
			MethodName: "PerpetualFuturesMarket",
			Handler:    _Query_PerpetualFuturesMarket_Handler,
		},
		{
			MethodName: "PerpetualOptions",
			Handler:    _Query_PerpetualOptions_Handler,
		},
		{
			MethodName: "PerpetualOptionsMarket",
			Handler:    _Query_PerpetualOptionsMarket_Handler,
		},
		{
			MethodName: "AllPositions",
			Handler:    _Query_AllPositions_Handler,
		},
		{
			MethodName: "Position",
			Handler:    _Query_Position_Handler,
		},
		{
			MethodName: "PerpetualFuturesPositionSize",
			Handler:    _Query_PerpetualFuturesPositionSize_Handler,
		},
		{
			MethodName: "AddressPositions",
			Handler:    _Query_AddressPositions_Handler,
		},
		{
			MethodName: "DLPTokenRates",
			Handler:    _Query_DLPTokenRates_Handler,
		},
		{
			MethodName: "EstimateDLPTokenAmount",
			Handler:    _Query_EstimateDLPTokenAmount_Handler,
		},
		{
			MethodName: "EstimateRedeemAmount",
			Handler:    _Query_EstimateRedeemAmount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "derivatives/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fees_24Hours != nil {
		{
			size := m.Fees_24Hours.Size()
			i -= size
			if _, err := m.Fees_24Hours.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Volume_24Hours != nil {
		{
			size := m.Volume_24Hours.Size()
			i -= size
			if _, err := m.Volume_24Hours.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.PoolMarketCap != nil {
		{
			size, err := m.PoolMarketCap.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.MetricsQuoteTicker) > 0 {
		i -= len(m.MetricsQuoteTicker)
		copy(dAtA[i:], m.MetricsQuoteTicker)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MetricsQuoteTicker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidityProviderTokenRealAPYRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidityProviderTokenRealAPYRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidityProviderTokenRealAPYRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AfterHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AfterHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.BeforeHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BeforeHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidityProviderTokenRealAPYResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidityProviderTokenRealAPYResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidityProviderTokenRealAPYResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Apy != nil {
		{
			size := m.Apy.Size()
			i -= size
			if _, err := m.Apy.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidityProviderTokenNominalAPYRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidityProviderTokenNominalAPYRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidityProviderTokenNominalAPYRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AfterHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AfterHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.BeforeHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BeforeHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidityProviderTokenNominalAPYResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidityProviderTokenNominalAPYResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidityProviderTokenNominalAPYResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Apy != nil {
		{
			size := m.Apy.Size()
			i -= size
			if _, err := m.Apy.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPerpetualFuturesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPerpetualFuturesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPerpetualFuturesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPerpetualFuturesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPerpetualFuturesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPerpetualFuturesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ShortPositions.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.LongPositions.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.Fees_24Hours != nil {
		{
			size := m.Fees_24Hours.Size()
			i -= size
			if _, err := m.Fees_24Hours.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Volume_24Hours != nil {
		{
			size := m.Volume_24Hours.Size()
			i -= size
			if _, err := m.Volume_24Hours.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MetricsQuoteTicker) > 0 {
		i -= len(m.MetricsQuoteTicker)
		copy(dAtA[i:], m.MetricsQuoteTicker)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MetricsQuoteTicker)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *QueryPerpetualFuturesMarketRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPerpetualFuturesMarketRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPerpetualFuturesMarketRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QuoteDenom) > 0 {
		i -= len(m.QuoteDenom)
		copy(dAtA[i:], m.QuoteDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.QuoteDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BaseDenom) > 0 {
		i -= len(m.BaseDenom)
		copy(dAtA[i:], m.BaseDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BaseDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPerpetualFuturesMarketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPerpetualFuturesMarketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPerpetualFuturesMarketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ShortPositions != nil {
		{
			size := m.ShortPositions.Size()
			i -= size
			if _, err := m.ShortPositions.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.LongPositions != nil {
		{
			size := m.LongPositions.Size()
			i -= size
			if _, err := m.LongPositions.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Fees_24Hours != nil {
		{
			size := m.Fees_24Hours.Size()
			i -= size
			if _, err := m.Fees_24Hours.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Volume_24Hours != nil {
		{
			size := m.Volume_24Hours.Size()
			i -= size
			if _, err := m.Volume_24Hours.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MetricsQuoteTicker) > 0 {
		i -= len(m.MetricsQuoteTicker)
		copy(dAtA[i:], m.MetricsQuoteTicker)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MetricsQuoteTicker)))
		i--
		dAtA[i] = 0x12
	}
	if m.Price != nil {
		{
			size := m.Price.Size()
			i -= size
			if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPerpetualOptionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPerpetualOptionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPerpetualOptionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPerpetualOptionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPerpetualOptionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPerpetualOptionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPerpetualOptionsMarketRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPerpetualOptionsMarketRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPerpetualOptionsMarketRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QuoteDenom) > 0 {
		i -= len(m.QuoteDenom)
		copy(dAtA[i:], m.QuoteDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.QuoteDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BaseDenom) > 0 {
		i -= len(m.BaseDenom)
		copy(dAtA[i:], m.BaseDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BaseDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPerpetualOptionsMarketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPerpetualOptionsMarketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPerpetualOptionsMarketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllPositionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPositionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPositionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPositionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPositionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPositionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Positions) > 0 {
		for iNdEx := len(m.Positions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Positions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPositionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPositionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPositionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PositionId) > 0 {
		i -= len(m.PositionId)
		copy(dAtA[i:], m.PositionId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PositionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPositionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPositionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPositionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EffectiveMargin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.MarginMaintenanceRate.Size()
		i -= size
		if _, err := m.MarginMaintenanceRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.ValuationProfit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Position != nil {
		{
			size, err := m.Position.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPerpetualFuturesPositionSizeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPerpetualFuturesPositionSizeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPerpetualFuturesPositionSizeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.PositionType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PositionType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPerpetualFuturesPositionSizeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPerpetualFuturesPositionSizeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPerpetualFuturesPositionSizeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TotalPositionSizeUsd.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAddressPositionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAddressPositionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAddressPositionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAddressPositionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAddressPositionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAddressPositionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Positions) > 0 {
		for iNdEx := len(m.Positions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Positions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDLPTokenRateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDLPTokenRateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDLPTokenRateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryDLPTokenRateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDLPTokenRateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDLPTokenRateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rates) > 0 {
		for iNdEx := len(m.Rates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEstimateDLPTokenAmountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEstimateDLPTokenAmountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEstimateDLPTokenAmountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MintDenom) > 0 {
		i -= len(m.MintDenom)
		copy(dAtA[i:], m.MintDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MintDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEstimateDLPTokenAmountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEstimateDLPTokenAmountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEstimateDLPTokenAmountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.DepositFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.EstimatedDlpAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryEstimateRedeemAmountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEstimateRedeemAmountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEstimateRedeemAmountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LptAmount) > 0 {
		i -= len(m.LptAmount)
		copy(dAtA[i:], m.LptAmount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.LptAmount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RedeemDenom) > 0 {
		i -= len(m.RedeemDenom)
		copy(dAtA[i:], m.RedeemDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RedeemDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEstimateRedeemAmountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEstimateRedeemAmountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEstimateRedeemAmountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Fee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MetricsQuoteTicker)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.PoolMarketCap != nil {
		l = m.PoolMarketCap.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Volume_24Hours != nil {
		l = m.Volume_24Hours.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Fees_24Hours != nil {
		l = m.Fees_24Hours.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLiquidityProviderTokenRealAPYRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BeforeHeight != 0 {
		n += 1 + sovQuery(uint64(m.BeforeHeight))
	}
	if m.AfterHeight != 0 {
		n += 1 + sovQuery(uint64(m.AfterHeight))
	}
	return n
}

func (m *QueryLiquidityProviderTokenRealAPYResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Apy != nil {
		l = m.Apy.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLiquidityProviderTokenNominalAPYRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BeforeHeight != 0 {
		n += 1 + sovQuery(uint64(m.BeforeHeight))
	}
	if m.AfterHeight != 0 {
		n += 1 + sovQuery(uint64(m.AfterHeight))
	}
	return n
}

func (m *QueryLiquidityProviderTokenNominalAPYResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Apy != nil {
		l = m.Apy.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPerpetualFuturesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPerpetualFuturesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MetricsQuoteTicker)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Volume_24Hours != nil {
		l = m.Volume_24Hours.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Fees_24Hours != nil {
		l = m.Fees_24Hours.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.LongPositions.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.ShortPositions.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPerpetualFuturesMarketRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BaseDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.QuoteDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPerpetualFuturesMarketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Price != nil {
		l = m.Price.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.MetricsQuoteTicker)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Volume_24Hours != nil {
		l = m.Volume_24Hours.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Fees_24Hours != nil {
		l = m.Fees_24Hours.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.LongPositions != nil {
		l = m.LongPositions.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.ShortPositions != nil {
		l = m.ShortPositions.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPerpetualOptionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPerpetualOptionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPerpetualOptionsMarketRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BaseDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.QuoteDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPerpetualOptionsMarketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllPositionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPositionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Positions) > 0 {
		for _, e := range m.Positions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPositionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PositionId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPositionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Position != nil {
		l = m.Position.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.ValuationProfit.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.MarginMaintenanceRate.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.EffectiveMargin.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPerpetualFuturesPositionSizeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PositionType != 0 {
		n += 1 + sovQuery(uint64(m.PositionType))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPerpetualFuturesPositionSizeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TotalPositionSizeUsd.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAddressPositionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAddressPositionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Positions) > 0 {
		for _, e := range m.Positions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDLPTokenRateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryDLPTokenRateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Rates) > 0 {
		for _, e := range m.Rates {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryEstimateDLPTokenAmountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MintDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEstimateDLPTokenAmountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EstimatedDlpAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.DepositFee.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryEstimateRedeemAmountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RedeemDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.LptAmount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEstimateRedeemAmountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Fee.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetricsQuoteTicker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetricsQuoteTicker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolMarketCap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PoolMarketCap == nil {
				m.PoolMarketCap = &PoolMarketCap{}
			}
			if err := m.PoolMarketCap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volume_24Hours", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.Volume_24Hours = &v
			if err := m.Volume_24Hours.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees_24Hours", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.Fees_24Hours = &v
			if err := m.Fees_24Hours.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidityProviderTokenRealAPYRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidityProviderTokenRealAPYRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidityProviderTokenRealAPYRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeforeHeight", wireType)
			}
			m.BeforeHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeforeHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AfterHeight", wireType)
			}
			m.AfterHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AfterHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidityProviderTokenRealAPYResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidityProviderTokenRealAPYResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidityProviderTokenRealAPYResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Apy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.Apy = &v
			if err := m.Apy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidityProviderTokenNominalAPYRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidityProviderTokenNominalAPYRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidityProviderTokenNominalAPYRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeforeHeight", wireType)
			}
			m.BeforeHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeforeHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AfterHeight", wireType)
			}
			m.AfterHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AfterHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidityProviderTokenNominalAPYResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidityProviderTokenNominalAPYResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidityProviderTokenNominalAPYResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Apy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.Apy = &v
			if err := m.Apy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPerpetualFuturesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPerpetualFuturesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPerpetualFuturesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPerpetualFuturesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPerpetualFuturesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPerpetualFuturesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetricsQuoteTicker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetricsQuoteTicker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volume_24Hours", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.Volume_24Hours = &v
			if err := m.Volume_24Hours.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees_24Hours", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.Fees_24Hours = &v
			if err := m.Fees_24Hours.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LongPositions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LongPositions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortPositions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ShortPositions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPerpetualFuturesMarketRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPerpetualFuturesMarketRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPerpetualFuturesMarketRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPerpetualFuturesMarketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPerpetualFuturesMarketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPerpetualFuturesMarketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.Price = &v
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetricsQuoteTicker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetricsQuoteTicker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volume_24Hours", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.Volume_24Hours = &v
			if err := m.Volume_24Hours.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees_24Hours", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.Fees_24Hours = &v
			if err := m.Fees_24Hours.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LongPositions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.LongPositions = &v
			if err := m.LongPositions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortPositions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.ShortPositions = &v
			if err := m.ShortPositions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPerpetualOptionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPerpetualOptionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPerpetualOptionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPerpetualOptionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPerpetualOptionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPerpetualOptionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPerpetualOptionsMarketRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPerpetualOptionsMarketRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPerpetualOptionsMarketRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPerpetualOptionsMarketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPerpetualOptionsMarketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPerpetualOptionsMarketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPositionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPositionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPositionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPositionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPositionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPositionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Positions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Positions = append(m.Positions, QueriedPosition{})
			if err := m.Positions[len(m.Positions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPositionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPositionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPositionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PositionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPositionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPositionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPositionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Position == nil {
				m.Position = &Position{}
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValuationProfit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValuationProfit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarginMaintenanceRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MarginMaintenanceRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveMargin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EffectiveMargin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPerpetualFuturesPositionSizeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPerpetualFuturesPositionSizeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPerpetualFuturesPositionSizeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionType", wireType)
			}
			m.PositionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PositionType |= PositionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPerpetualFuturesPositionSizeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPerpetualFuturesPositionSizeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPerpetualFuturesPositionSizeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPositionSizeUsd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalPositionSizeUsd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAddressPositionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAddressPositionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAddressPositionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAddressPositionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAddressPositionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAddressPositionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Positions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Positions = append(m.Positions, QueriedPosition{})
			if err := m.Positions[len(m.Positions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDLPTokenRateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDLPTokenRateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDLPTokenRateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDLPTokenRateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDLPTokenRateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDLPTokenRateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rates = append(m.Rates, types.Coin{})
			if err := m.Rates[len(m.Rates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEstimateDLPTokenAmountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEstimateDLPTokenAmountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEstimateDLPTokenAmountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEstimateDLPTokenAmountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEstimateDLPTokenAmountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEstimateDLPTokenAmountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstimatedDlpAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EstimatedDlpAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DepositFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEstimateRedeemAmountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEstimateRedeemAmountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEstimateRedeemAmountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedeemDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedeemDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LptAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LptAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEstimateRedeemAmountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEstimateRedeemAmountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEstimateRedeemAmountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
