// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: derivatives/derivatives.proto

package types

import (
	fmt "fmt"
	github_com_UnUniFi_chain_types "github.com/UnUniFi/chain/types"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PositionType int32

const (
	PositionType_POSITION_UNKNOWN PositionType = 0
	PositionType_LONG             PositionType = 1
	PositionType_SHORT            PositionType = 2
)

var PositionType_name = map[int32]string{
	0: "POSITION_UNKNOWN",
	1: "LONG",
	2: "SHORT",
}

var PositionType_value = map[string]int32{
	"POSITION_UNKNOWN": 0,
	"LONG":             1,
	"SHORT":            2,
}

func (x PositionType) String() string {
	return proto.EnumName(PositionType_name, int32(x))
}

func (PositionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c5fa11d50d3fed76, []int{0}
}

type Position struct {
	Id               string                                          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
	Market           Market                                          `protobuf:"bytes,2,opt,name=market,proto3" json:"market" yaml:"market"`
	Address          github_com_UnUniFi_chain_types.StringAccAddress `protobuf:"bytes,3,opt,name=address,proto3,customtype=github.com/UnUniFi/chain/types.StringAccAddress" json:"address" yaml:"address"`
	OpenedAt         timestamppb.Timestamp                           `protobuf:"bytes,4,opt,name=opened_at,json=openedAt,proto3" json:"opened_at" yaml:"opened_at"`
	OpenedHeight     uint64                                          `protobuf:"varint,5,opt,name=opened_height,json=openedHeight,proto3" json:"opened_height,omitempty" yaml:"opened_height"`
	OpenedRate       github_com_cosmos_cosmos_sdk_types.Dec          `protobuf:"bytes,6,opt,name=opened_rate,json=openedRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"opened_rate" yaml:"opened_rate"`
	PositionInstance types.Any                                       `protobuf:"bytes,7,opt,name=position_instance,json=positionInstance,proto3" json:"position_instance" yaml:"position_instance"`
}

func (m *Position) Reset()         { *m = Position{} }
func (m *Position) String() string { return proto.CompactTextString(m) }
func (*Position) ProtoMessage()    {}
func (*Position) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5fa11d50d3fed76, []int{0}
}
func (m *Position) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Position) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Position.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Position) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Position.Merge(m, src)
}
func (m *Position) XXX_Size() int {
	return m.Size()
}
func (m *Position) XXX_DiscardUnknown() {
	xxx_messageInfo_Position.DiscardUnknown(m)
}

var xxx_messageInfo_Position proto.InternalMessageInfo

func (m *Position) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Position) GetMarket() Market {
	if m != nil {
		return m.Market
	}
	return Market{}
}

func (m *Position) GetOpenedAt() timestamppb.Timestamp {
	if m != nil {
		return m.OpenedAt
	}
	return timestamppb.Timestamp{}
}

func (m *Position) GetOpenedHeight() uint64 {
	if m != nil {
		return m.OpenedHeight
	}
	return 0
}

func (m *Position) GetPositionInstance() types.Any {
	if m != nil {
		return m.PositionInstance
	}
	return types.Any{}
}

type Pool struct {
	QuoteTicker                       string                                 `protobuf:"bytes,1,opt,name=quote_ticker,json=quoteTicker,proto3" json:"quote_ticker,omitempty" yaml:"quote_ticker"`
	BaseLptMintFee                    github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=base_lpt_mint_fee,json=baseLptMintFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"base_lpt_mint_fee" yaml:"base_lpt_mint_fee"`
	BaseLptRedeemFee                  github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=base_lpt_redeem_fee,json=baseLptRedeemFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"base_lpt_redeem_fee" yaml:"base_lpt_redeem_fee"`
	BorrowingFeeRatePerHour           github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=borrowing_fee_rate_per_hour,json=borrowingFeeRatePerHour,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"borrowing_fee_rate_per_hour" yaml:"borrowing_fee_rate_per_hour"`
	LiquidationNeededReportRewardRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=liquidation_needed_report_reward_rate,json=liquidationNeededReportRewardRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"liquidation_needed_report_reward_rate" yaml:"liquidation_needed_report_reward_rate"`
	AcceptedAssets                    []Pool_Asset                           `protobuf:"bytes,6,rep,name=accepted_assets,json=acceptedAssets,proto3" json:"accepted_assets" yaml:"accepted_assets"`
}

func (m *Pool) Reset()         { *m = Pool{} }
func (m *Pool) String() string { return proto.CompactTextString(m) }
func (*Pool) ProtoMessage()    {}
func (*Pool) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5fa11d50d3fed76, []int{1}
}
func (m *Pool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pool.Merge(m, src)
}
func (m *Pool) XXX_Size() int {
	return m.Size()
}
func (m *Pool) XXX_DiscardUnknown() {
	xxx_messageInfo_Pool.DiscardUnknown(m)
}

var xxx_messageInfo_Pool proto.InternalMessageInfo

func (m *Pool) GetQuoteTicker() string {
	if m != nil {
		return m.QuoteTicker
	}
	return ""
}

func (m *Pool) GetAcceptedAssets() []Pool_Asset {
	if m != nil {
		return m.AcceptedAssets
	}
	return nil
}

type Pool_Asset struct {
	Denom        string                                 `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty" yaml:"denom"`
	TargetWeight github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=target_weight,json=targetWeight,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"target_weight" yaml:"target_weight"`
}

func (m *Pool_Asset) Reset()         { *m = Pool_Asset{} }
func (m *Pool_Asset) String() string { return proto.CompactTextString(m) }
func (*Pool_Asset) ProtoMessage()    {}
func (*Pool_Asset) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5fa11d50d3fed76, []int{1, 0}
}
func (m *Pool_Asset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pool_Asset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pool_Asset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pool_Asset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pool_Asset.Merge(m, src)
}
func (m *Pool_Asset) XXX_Size() int {
	return m.Size()
}
func (m *Pool_Asset) XXX_DiscardUnknown() {
	xxx_messageInfo_Pool_Asset.DiscardUnknown(m)
}

var xxx_messageInfo_Pool_Asset proto.InternalMessageInfo

func (m *Pool_Asset) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type PoolMarketCap struct {
	QuoteTicker string                                 `protobuf:"bytes,1,opt,name=quote_ticker,json=quoteTicker,proto3" json:"quote_ticker,omitempty" yaml:"quote_ticker"`
	Total       github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=total,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"total" yaml:"total"`
	Breakdown   []PoolMarketCap_Breakdown              `protobuf:"bytes,3,rep,name=breakdown,proto3" json:"breakdown" yaml:"breakdown"`
}

func (m *PoolMarketCap) Reset()         { *m = PoolMarketCap{} }
func (m *PoolMarketCap) String() string { return proto.CompactTextString(m) }
func (*PoolMarketCap) ProtoMessage()    {}
func (*PoolMarketCap) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5fa11d50d3fed76, []int{2}
}
func (m *PoolMarketCap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolMarketCap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolMarketCap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolMarketCap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolMarketCap.Merge(m, src)
}
func (m *PoolMarketCap) XXX_Size() int {
	return m.Size()
}
func (m *PoolMarketCap) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolMarketCap.DiscardUnknown(m)
}

var xxx_messageInfo_PoolMarketCap proto.InternalMessageInfo

func (m *PoolMarketCap) GetQuoteTicker() string {
	if m != nil {
		return m.QuoteTicker
	}
	return ""
}

func (m *PoolMarketCap) GetBreakdown() []PoolMarketCap_Breakdown {
	if m != nil {
		return m.Breakdown
	}
	return nil
}

type PoolMarketCap_Breakdown struct {
	Denom  string                                 `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty" yaml:"denom"`
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount" yaml:"amount"`
	Price  github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=price,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"price" yaml:"price"`
}

func (m *PoolMarketCap_Breakdown) Reset()         { *m = PoolMarketCap_Breakdown{} }
func (m *PoolMarketCap_Breakdown) String() string { return proto.CompactTextString(m) }
func (*PoolMarketCap_Breakdown) ProtoMessage()    {}
func (*PoolMarketCap_Breakdown) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5fa11d50d3fed76, []int{2, 0}
}
func (m *PoolMarketCap_Breakdown) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolMarketCap_Breakdown) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolMarketCap_Breakdown.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolMarketCap_Breakdown) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolMarketCap_Breakdown.Merge(m, src)
}
func (m *PoolMarketCap_Breakdown) XXX_Size() int {
	return m.Size()
}
func (m *PoolMarketCap_Breakdown) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolMarketCap_Breakdown.DiscardUnknown(m)
}

var xxx_messageInfo_PoolMarketCap_Breakdown proto.InternalMessageInfo

func (m *PoolMarketCap_Breakdown) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type Market struct {
	Denom      string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty" yaml:"denom"`
	QuoteDenom string `protobuf:"bytes,2,opt,name=quote_denom,json=quoteDenom,proto3" json:"quote_denom,omitempty" yaml:"quote_denom"`
}

func (m *Market) Reset()         { *m = Market{} }
func (m *Market) String() string { return proto.CompactTextString(m) }
func (*Market) ProtoMessage()    {}
func (*Market) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5fa11d50d3fed76, []int{3}
}
func (m *Market) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Market) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Market.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Market) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Market.Merge(m, src)
}
func (m *Market) XXX_Size() int {
	return m.Size()
}
func (m *Market) XXX_DiscardUnknown() {
	xxx_messageInfo_Market.DiscardUnknown(m)
}

var xxx_messageInfo_Market proto.InternalMessageInfo

func (m *Market) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *Market) GetQuoteDenom() string {
	if m != nil {
		return m.QuoteDenom
	}
	return ""
}

type PerpetualFuturesParams struct {
	CommissionRate                              github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=commission_rate,json=commissionRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"commission_rate" yaml:"commission_rate"`
	MarginMaintenanceRate                       github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=margin_maintenance_rate,json=marginMaintenanceRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"margin_maintenance_rate" yaml:"margin_maintenance_rate"`
	ImaginaryFundingRateProportionalCoefficient github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=imaginary_funding_rate_proportional_coefficient,json=imaginaryFundingRateProportionalCoefficient,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"imaginary_funding_rate_proportional_coefficient" yaml:"imaginary_funding_rate_proportonal_coefficient"`
	Markets                                     []Market                               `protobuf:"bytes,4,rep,name=markets,proto3" json:"markets" yaml:"markets"`
}

func (m *PerpetualFuturesParams) Reset()         { *m = PerpetualFuturesParams{} }
func (m *PerpetualFuturesParams) String() string { return proto.CompactTextString(m) }
func (*PerpetualFuturesParams) ProtoMessage()    {}
func (*PerpetualFuturesParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5fa11d50d3fed76, []int{4}
}
func (m *PerpetualFuturesParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PerpetualFuturesParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PerpetualFuturesParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PerpetualFuturesParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PerpetualFuturesParams.Merge(m, src)
}
func (m *PerpetualFuturesParams) XXX_Size() int {
	return m.Size()
}
func (m *PerpetualFuturesParams) XXX_DiscardUnknown() {
	xxx_messageInfo_PerpetualFuturesParams.DiscardUnknown(m)
}

var xxx_messageInfo_PerpetualFuturesParams proto.InternalMessageInfo

func (m *PerpetualFuturesParams) GetMarkets() []Market {
	if m != nil {
		return m.Markets
	}
	return nil
}

type PerpetualOptionsParams struct {
	PremiumCommissionRate                       github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=premium_commission_rate,json=premiumCommissionRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"premium_commission_rate" yaml:"premium_commission_rate"`
	StrikeCommissionRate                        github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=strike_commission_rate,json=strikeCommissionRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"strike_commission_rate" yaml:"premium_commission_rate"`
	MarginMaintenanceRate                       github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=margin_maintenance_rate,json=marginMaintenanceRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"margin_maintenance_rate" yaml:"margin_maintenance_rate"`
	ImaginaryFundingRateProportionalCoefficient github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=imaginary_funding_rate_proportional_coefficient,json=imaginaryFundingRateProportionalCoefficient,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"imaginary_funding_rate_proportional_coefficient" yaml:"imaginary_funding_rate_proportonal_coefficient"`
	Markets                                     []Market                               `protobuf:"bytes,5,rep,name=markets,proto3" json:"markets" yaml:"markets"`
}

func (m *PerpetualOptionsParams) Reset()         { *m = PerpetualOptionsParams{} }
func (m *PerpetualOptionsParams) String() string { return proto.CompactTextString(m) }
func (*PerpetualOptionsParams) ProtoMessage()    {}
func (*PerpetualOptionsParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5fa11d50d3fed76, []int{5}
}
func (m *PerpetualOptionsParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PerpetualOptionsParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PerpetualOptionsParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PerpetualOptionsParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PerpetualOptionsParams.Merge(m, src)
}
func (m *PerpetualOptionsParams) XXX_Size() int {
	return m.Size()
}
func (m *PerpetualOptionsParams) XXX_DiscardUnknown() {
	xxx_messageInfo_PerpetualOptionsParams.DiscardUnknown(m)
}

var xxx_messageInfo_PerpetualOptionsParams proto.InternalMessageInfo

func (m *PerpetualOptionsParams) GetMarkets() []Market {
	if m != nil {
		return m.Markets
	}
	return nil
}

type Params struct {
	Pool             Pool                   `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool" yaml:"pool"`
	PerpetualFutures PerpetualFuturesParams `protobuf:"bytes,2,opt,name=perpetual_futures,json=perpetualFutures,proto3" json:"perpetual_futures" yaml:"perpetual_futures"`
	PerpetualOptions PerpetualOptionsParams `protobuf:"bytes,3,opt,name=perpetual_options,json=perpetualOptions,proto3" json:"perpetual_options" yaml:"perpetual_options"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5fa11d50d3fed76, []int{6}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetPool() Pool {
	if m != nil {
		return m.Pool
	}
	return Pool{}
}

func (m *Params) GetPerpetualFutures() PerpetualFuturesParams {
	if m != nil {
		return m.PerpetualFutures
	}
	return PerpetualFuturesParams{}
}

func (m *Params) GetPerpetualOptions() PerpetualOptionsParams {
	if m != nil {
		return m.PerpetualOptions
	}
	return PerpetualOptionsParams{}
}

func init() {
	proto.RegisterEnum("ununifi.derivatives.PositionType", PositionType_name, PositionType_value)
	proto.RegisterType((*Position)(nil), "ununifi.derivatives.Position")
	proto.RegisterType((*Pool)(nil), "ununifi.derivatives.Pool")
	proto.RegisterType((*Pool_Asset)(nil), "ununifi.derivatives.Pool.Asset")
	proto.RegisterType((*PoolMarketCap)(nil), "ununifi.derivatives.PoolMarketCap")
	proto.RegisterType((*PoolMarketCap_Breakdown)(nil), "ununifi.derivatives.PoolMarketCap.Breakdown")
	proto.RegisterType((*Market)(nil), "ununifi.derivatives.Market")
	proto.RegisterType((*PerpetualFuturesParams)(nil), "ununifi.derivatives.PerpetualFuturesParams")
	proto.RegisterType((*PerpetualOptionsParams)(nil), "ununifi.derivatives.PerpetualOptionsParams")
	proto.RegisterType((*Params)(nil), "ununifi.derivatives.Params")
}

func init() { proto.RegisterFile("derivatives/derivatives.proto", fileDescriptor_c5fa11d50d3fed76) }

var fileDescriptor_c5fa11d50d3fed76 = []byte{
	// 1339 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x57, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xcf, 0x26, 0xb6, 0x53, 0x4f, 0xfe, 0xd4, 0xdd, 0xa4, 0xe9, 0x36, 0x55, 0xed, 0x30, 0x12,
	0x55, 0x44, 0x8b, 0xad, 0x16, 0x21, 0x44, 0x25, 0x40, 0x71, 0x2a, 0x93, 0x94, 0x26, 0x31, 0x53,
	0x57, 0x95, 0x38, 0xb0, 0x1a, 0xef, 0x8e, 0x9d, 0x51, 0xbc, 0x33, 0xdb, 0xd9, 0xd9, 0x86, 0xc0,
	0x1d, 0x38, 0x22, 0xce, 0x7c, 0x08, 0x2e, 0x48, 0x7c, 0x00, 0x0e, 0xbd, 0x20, 0xf5, 0x84, 0x10,
	0x07, 0x0b, 0xa5, 0x57, 0x4e, 0xfe, 0x04, 0x68, 0x67, 0x66, 0xfd, 0x2f, 0x49, 0x89, 0x0b, 0x48,
	0x70, 0xf2, 0xcc, 0xbc, 0xf7, 0x7e, 0xef, 0xdf, 0x6f, 0x9e, 0x67, 0xc1, 0x75, 0x9f, 0x08, 0xfa,
	0x14, 0x4b, 0xfa, 0x94, 0x44, 0x95, 0xa1, 0x75, 0x39, 0x14, 0x5c, 0x72, 0x7b, 0x29, 0x66, 0x31,
	0xa3, 0x2d, 0x5a, 0x1e, 0x12, 0xad, 0x5e, 0x6d, 0x73, 0xde, 0xee, 0x90, 0x8a, 0x52, 0x69, 0xc6,
	0xad, 0x0a, 0x66, 0x47, 0x5a, 0x7f, 0x75, 0xb9, 0xcd, 0xdb, 0x5c, 0x2d, 0x2b, 0xc9, 0xca, 0x9c,
	0x96, 0xc6, 0x0d, 0x24, 0x0d, 0x48, 0x24, 0x71, 0x10, 0x1a, 0x85, 0xa2, 0xc7, 0xa3, 0x80, 0x47,
	0x95, 0x26, 0x8e, 0x48, 0xe5, 0xe9, 0xed, 0x26, 0x91, 0xf8, 0x76, 0xc5, 0xe3, 0x94, 0x19, 0xf9,
	0x55, 0x2d, 0x77, 0x35, 0xb2, 0xde, 0x68, 0x11, 0xfc, 0x31, 0x03, 0x2e, 0xd4, 0x79, 0x44, 0x25,
	0xe5, 0xcc, 0xbe, 0x0e, 0xa6, 0xa9, 0xef, 0x58, 0x6b, 0xd6, 0x7a, 0xbe, 0xba, 0xd0, 0xeb, 0x96,
	0xf2, 0x47, 0x38, 0xe8, 0xdc, 0x85, 0xd4, 0x87, 0x68, 0x9a, 0xfa, 0xf6, 0x7d, 0x90, 0x0b, 0xb0,
	0x38, 0x20, 0xd2, 0x99, 0x5e, 0xb3, 0xd6, 0xe7, 0xee, 0x5c, 0x2b, 0x9f, 0x92, 0x5e, 0x79, 0x47,
	0xa9, 0x54, 0x2f, 0x3f, 0xeb, 0x96, 0xa6, 0x7a, 0xdd, 0xd2, 0x82, 0xc6, 0xd0, 0x86, 0x10, 0x19,
	0x04, 0xdb, 0x03, 0xb3, 0xd8, 0xf7, 0x05, 0x89, 0x22, 0x67, 0x46, 0xf9, 0xdb, 0x4e, 0xf4, 0x7f,
	0xeb, 0x96, 0x2a, 0x6d, 0x2a, 0xf7, 0xe3, 0x66, 0xd9, 0xe3, 0x41, 0xe5, 0x11, 0x7b, 0xc4, 0x68,
	0x8d, 0x56, 0xbc, 0x7d, 0x4c, 0x59, 0x45, 0x1e, 0x85, 0x24, 0x2a, 0x3f, 0x94, 0x82, 0xb2, 0xf6,
	0x86, 0xe7, 0x6d, 0x68, 0xf3, 0x5e, 0xb7, 0xb4, 0xa8, 0x5d, 0x18, 0x3c, 0x88, 0x52, 0x64, 0xfb,
	0x63, 0x90, 0xe7, 0x21, 0x61, 0xc4, 0x77, 0xb1, 0x74, 0x32, 0x2a, 0xe6, 0xd5, 0xb2, 0x2e, 0x66,
	0x39, 0x2d, 0x66, 0xb9, 0x91, 0x16, 0xb3, 0xea, 0x98, 0x90, 0x0b, 0x1a, 0xaf, 0x6f, 0x0a, 0xd1,
	0x05, 0xbd, 0xde, 0x90, 0xf6, 0x7b, 0x60, 0xc1, 0x9c, 0xef, 0x13, 0xda, 0xde, 0x97, 0x4e, 0x76,
	0xcd, 0x5a, 0xcf, 0x54, 0x9d, 0x5e, 0xb7, 0xb4, 0x3c, 0x62, 0xa6, 0xc5, 0x10, 0xcd, 0xeb, 0xfd,
	0x96, 0xda, 0xda, 0x04, 0xcc, 0x19, 0xb9, 0xc0, 0x92, 0x38, 0x39, 0x95, 0xfa, 0x3d, 0x93, 0xfa,
	0x8d, 0xa1, 0xd4, 0x4d, 0x47, 0xf5, 0xcf, 0x9b, 0x91, 0x7f, 0x60, 0xd2, 0xbf, 0x47, 0xbc, 0x5e,
	0xb7, 0x64, 0x8f, 0xb8, 0x4a, 0xa0, 0x20, 0x02, 0x7a, 0x87, 0xb0, 0x24, 0xb6, 0x07, 0x2e, 0x85,
	0xa6, 0xa9, 0x2e, 0x65, 0x91, 0xc4, 0xcc, 0x23, 0xce, 0xac, 0x2a, 0xc0, 0xf2, 0x89, 0x02, 0x6c,
	0xb0, 0xa3, 0xea, 0x9a, 0x49, 0xdd, 0xd1, 0xc0, 0x27, 0x8c, 0x21, 0x2a, 0xa4, 0x67, 0xdb, 0xe9,
	0xd1, 0x57, 0xb3, 0x20, 0x53, 0xe7, 0xbc, 0x63, 0xdf, 0x05, 0xf3, 0x4f, 0x62, 0x2e, 0x89, 0x2b,
	0xa9, 0x77, 0x40, 0x84, 0x21, 0xd0, 0x95, 0x5e, 0xb7, 0xb4, 0xa4, 0xe1, 0x86, 0xa5, 0x10, 0xcd,
	0xa9, 0x6d, 0x43, 0xed, 0xec, 0x18, 0x5c, 0x4a, 0x58, 0xeb, 0x76, 0x42, 0xe9, 0x06, 0x94, 0x49,
	0xb7, 0x45, 0x88, 0xa2, 0x57, 0xbe, 0x7a, 0x7f, 0xe2, 0xb2, 0x98, 0xe8, 0x4f, 0x00, 0x42, 0xb4,
	0x98, 0x9c, 0x3d, 0x08, 0xe5, 0x0e, 0x65, 0xb2, 0x46, 0x88, 0xfd, 0x05, 0x58, 0xea, 0x6b, 0x09,
	0xe2, 0x13, 0x12, 0x28, 0xc7, 0x9a, 0x8a, 0x0f, 0x26, 0x76, 0xbc, 0x3a, 0xe6, 0x78, 0x00, 0x09,
	0x51, 0xc1, 0xb8, 0x46, 0xea, 0x2c, 0x71, 0xfe, 0xad, 0x05, 0xae, 0x35, 0xb9, 0x10, 0xfc, 0x90,
	0xb2, 0x76, 0xa2, 0xa4, 0x3a, 0xe8, 0x86, 0x44, 0xb8, 0xfb, 0x3c, 0x16, 0x8a, 0xa9, 0xf9, 0x6a,
	0x63, 0xe2, 0x28, 0xa0, 0x89, 0xe2, 0x6c, 0x68, 0x88, 0xae, 0xf4, 0xa5, 0x35, 0x42, 0x12, 0xae,
	0xd4, 0x89, 0xd8, 0xe2, 0xb1, 0xb0, 0xbf, 0xb7, 0xc0, 0xeb, 0x1d, 0xfa, 0x24, 0xa6, 0x3e, 0x56,
	0x9d, 0x67, 0x84, 0xf8, 0x09, 0xb7, 0x48, 0xc8, 0x45, 0x92, 0xd0, 0x21, 0x16, 0x86, 0xb4, 0x59,
	0x15, 0xde, 0xa7, 0x13, 0x87, 0x77, 0x4b, 0x87, 0x77, 0x2e, 0x27, 0x10, 0xbd, 0x36, 0xa4, 0xb7,
	0xab, 0xd4, 0x90, 0xd2, 0x42, 0x4a, 0x49, 0xb1, 0x7c, 0x1f, 0x5c, 0xc4, 0x9e, 0x47, 0x42, 0x99,
	0xdc, 0xd2, 0x28, 0x22, 0x32, 0x72, 0x72, 0x6b, 0x33, 0xeb, 0x73, 0x77, 0x4a, 0xa7, 0x0e, 0xa6,
	0x84, 0xab, 0xe5, 0x8d, 0x44, 0xaf, 0x5a, 0x34, 0x74, 0x5f, 0x31, 0x93, 0x63, 0x14, 0x05, 0xa2,
	0xc5, 0xf4, 0x44, 0xa9, 0x47, 0xab, 0xdf, 0x59, 0x20, 0xab, 0x96, 0xf6, 0x0d, 0x90, 0xf5, 0x09,
	0xe3, 0x81, 0x21, 0x79, 0xa1, 0xd7, 0x2d, 0xcd, 0x6b, 0x10, 0x75, 0x0c, 0x91, 0x16, 0xdb, 0x07,
	0x60, 0x41, 0x62, 0xd1, 0x26, 0xd2, 0x3d, 0xd4, 0x73, 0x42, 0x73, 0xba, 0x36, 0x71, 0xd5, 0xcc,
	0x54, 0x19, 0x01, 0x83, 0x68, 0x5e, 0xef, 0x1f, 0xeb, 0xed, 0x1f, 0x33, 0x60, 0x21, 0xc9, 0x4e,
	0x8f, 0xde, 0x4d, 0x1c, 0xfe, 0xad, 0x2b, 0xd9, 0x00, 0x59, 0xc9, 0x25, 0xee, 0x98, 0x90, 0xdf,
	0x9f, 0x38, 0x64, 0x53, 0x10, 0x05, 0x02, 0x91, 0x06, 0xb3, 0x7d, 0x90, 0x6f, 0x0a, 0x82, 0x0f,
	0x7c, 0x7e, 0xc8, 0x9c, 0x19, 0xd5, 0xa6, 0x5b, 0x67, 0xb6, 0xa9, 0x9f, 0x48, 0xb9, 0x9a, 0xda,
	0x8c, 0x4f, 0xe7, 0x3e, 0x18, 0x44, 0x03, 0xe0, 0xd5, 0x63, 0x0b, 0xe4, 0xfb, 0x26, 0xe7, 0x6e,
	0xd6, 0x63, 0x90, 0xc3, 0x01, 0x8f, 0x59, 0xda, 0xa5, 0x0f, 0x26, 0x48, 0x79, 0x9b, 0xc9, 0xc1,
	0xbf, 0x9c, 0x46, 0x81, 0xc8, 0xc0, 0x25, 0xa5, 0x0c, 0x05, 0xf5, 0xd2, 0xc1, 0xf2, 0xca, 0xa5,
	0x54, 0x20, 0x10, 0x69, 0x30, 0x48, 0x41, 0x4e, 0x17, 0xe8, 0xdc, 0x09, 0xbe, 0x03, 0x74, 0x87,
	0x5d, 0xad, 0xad, 0xb3, 0x5c, 0x19, 0xfc, 0x91, 0x0c, 0x09, 0x21, 0x02, 0x6a, 0x77, 0x4f, 0x6d,
	0x7e, 0xc8, 0x80, 0x95, 0x3a, 0x11, 0x21, 0x91, 0x31, 0xee, 0xd4, 0x62, 0x19, 0x0b, 0x12, 0xd5,
	0xb1, 0xc0, 0x41, 0x64, 0x3f, 0x01, 0x17, 0x3d, 0x1e, 0x04, 0x34, 0x8a, 0x92, 0x9b, 0xac, 0x26,
	0x83, 0x8e, 0x62, 0x6b, 0xe2, 0x2c, 0xcd, 0x35, 0x1c, 0x83, 0x83, 0x68, 0x71, 0x70, 0xa2, 0x2e,
	0xfc, 0xd7, 0x16, 0xb8, 0x12, 0x60, 0xd1, 0xa6, 0xcc, 0x0d, 0x30, 0x65, 0x92, 0xb0, 0xe4, 0x8f,
	0x48, 0xfb, 0xd6, 0x39, 0xd5, 0x27, 0xf6, 0x5d, 0xec, 0xbf, 0x4f, 0x4e, 0x83, 0x85, 0xe8, 0xb2,
	0x96, 0xec, 0x0c, 0x04, 0x2a, 0x94, 0x9f, 0x2d, 0x50, 0xa1, 0x01, 0x6e, 0x53, 0x86, 0xc5, 0x91,
	0xdb, 0x8a, 0x99, 0x9f, 0x0c, 0x5c, 0x3d, 0x6c, 0x05, 0x4f, 0x06, 0x15, 0xe5, 0x0c, 0x77, 0x5c,
	0x8f, 0x93, 0x56, 0x8b, 0x7a, 0x94, 0x30, 0x69, 0x48, 0xd0, 0x9e, 0x38, 0xc4, 0xb7, 0xcd, 0x33,
	0xec, 0xa5, 0xee, 0xc6, 0xbd, 0x41, 0x74, 0xb3, 0x6f, 0x50, 0xd3, 0xfa, 0x6a, 0xdc, 0x0f, 0x05,
	0xb7, 0x39, 0xd0, 0xb6, 0x77, 0xc0, 0xac, 0x7e, 0x99, 0x45, 0x4e, 0x46, 0x5d, 0xce, 0x97, 0x3e,
	0xee, 0x56, 0xcc, 0x5d, 0x5c, 0x1c, 0x7e, 0xdc, 0x25, 0x2f, 0xaf, 0x74, 0xf5, 0x4b, 0x76, 0x88,
	0x37, 0x7b, 0x61, 0xe2, 0x2f, 0xe5, 0x4d, 0xd2, 0xc4, 0x50, 0x90, 0x80, 0xc6, 0x81, 0x7b, 0x3a,
	0x81, 0x5e, 0xb9, 0x89, 0x67, 0xc0, 0x42, 0x74, 0xd9, 0x48, 0x36, 0x47, 0xf9, 0xf4, 0xa5, 0x05,
	0x56, 0x22, 0x29, 0xe8, 0x01, 0x39, 0x11, 0xc9, 0xf4, 0xbf, 0x14, 0xc9, 0xb2, 0xf6, 0xb7, 0x79,
	0x7e, 0x62, 0xcf, 0xfc, 0xf7, 0x89, 0x9d, 0xf9, 0x7f, 0x10, 0x3b, 0xfb, 0x0f, 0x10, 0xfb, 0xa7,
	0x69, 0x90, 0x33, 0x44, 0xae, 0x82, 0x4c, 0xc8, 0x79, 0x47, 0x91, 0x76, 0xee, 0xce, 0xd5, 0x33,
	0xff, 0xcc, 0xaa, 0x4b, 0x06, 0x74, 0x2e, 0x7d, 0x5c, 0xf3, 0x0e, 0x44, 0xca, 0xd6, 0xfe, 0x1c,
	0x5c, 0x0a, 0xd3, 0x6b, 0xe2, 0xb6, 0xf4, 0x7c, 0x35, 0x5f, 0x57, 0x37, 0x4f, 0x07, 0x3c, 0x75,
	0x18, 0x9f, 0x78, 0xbf, 0x8f, 0x63, 0x26, 0xef, 0xf7, 0x31, 0xcb, 0x51, 0xdf, 0x5c, 0xdf, 0x51,
	0xc5, 0xb6, 0xbf, 0xf4, 0x3d, 0x72, 0xa1, 0xcf, 0xf6, 0x6d, 0x30, 0x87, 0x7d, 0x1b, 0xcb, 0x37,
	0xde, 0x05, 0xf3, 0xe9, 0x57, 0x67, 0xe3, 0x28, 0x24, 0xf6, 0x32, 0x28, 0xd4, 0xf7, 0x1e, 0x6e,
	0x37, 0xb6, 0xf7, 0x76, 0xdd, 0x47, 0xbb, 0x1f, 0xed, 0xee, 0x3d, 0xde, 0x2d, 0x4c, 0xd9, 0x17,
	0x40, 0xe6, 0xc1, 0xde, 0xee, 0x87, 0x05, 0xcb, 0xce, 0x83, 0xec, 0xc3, 0xad, 0x3d, 0xd4, 0x28,
	0x4c, 0x57, 0x6b, 0xcf, 0x8e, 0x8b, 0xd6, 0xf3, 0xe3, 0xa2, 0xf5, 0xfb, 0x71, 0xd1, 0xfa, 0xe6,
	0x45, 0x71, 0xea, 0xf9, 0x8b, 0xe2, 0xd4, 0xaf, 0x2f, 0x8a, 0x53, 0x9f, 0xdc, 0x3a, 0xf3, 0xd3,
	0xf1, 0xb3, 0xe1, 0x6f, 0x73, 0x4d, 0xc1, 0x66, 0x4e, 0x7d, 0x00, 0xbd, 0xf5, 0x67, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xc3, 0x1a, 0x56, 0xf6, 0xc3, 0x0f, 0x00, 0x00,
}

func (m *Position) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Position) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Position) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PositionInstance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDerivatives(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.OpenedRate.Size()
		i -= size
		if _, err := m.OpenedRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDerivatives(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.OpenedHeight != 0 {
		i = encodeVarintDerivatives(dAtA, i, uint64(m.OpenedHeight))
		i--
		dAtA[i] = 0x28
	}
	{
		size, err := m.OpenedAt.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDerivatives(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Address.Size()
		i -= size
		if _, err := m.Address.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDerivatives(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Market.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDerivatives(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintDerivatives(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Pool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AcceptedAssets) > 0 {
		for iNdEx := len(m.AcceptedAssets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AcceptedAssets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDerivatives(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	{
		size := m.LiquidationNeededReportRewardRate.Size()
		i -= size
		if _, err := m.LiquidationNeededReportRewardRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDerivatives(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.BorrowingFeeRatePerHour.Size()
		i -= size
		if _, err := m.BorrowingFeeRatePerHour.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDerivatives(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.BaseLptRedeemFee.Size()
		i -= size
		if _, err := m.BaseLptRedeemFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDerivatives(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.BaseLptMintFee.Size()
		i -= size
		if _, err := m.BaseLptMintFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDerivatives(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.QuoteTicker) > 0 {
		i -= len(m.QuoteTicker)
		copy(dAtA[i:], m.QuoteTicker)
		i = encodeVarintDerivatives(dAtA, i, uint64(len(m.QuoteTicker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Pool_Asset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pool_Asset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pool_Asset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TargetWeight.Size()
		i -= size
		if _, err := m.TargetWeight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDerivatives(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintDerivatives(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PoolMarketCap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolMarketCap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolMarketCap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Breakdown) > 0 {
		for iNdEx := len(m.Breakdown) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Breakdown[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDerivatives(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size := m.Total.Size()
		i -= size
		if _, err := m.Total.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDerivatives(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.QuoteTicker) > 0 {
		i -= len(m.QuoteTicker)
		copy(dAtA[i:], m.QuoteTicker)
		i = encodeVarintDerivatives(dAtA, i, uint64(len(m.QuoteTicker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PoolMarketCap_Breakdown) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolMarketCap_Breakdown) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolMarketCap_Breakdown) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDerivatives(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDerivatives(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintDerivatives(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Market) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Market) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Market) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QuoteDenom) > 0 {
		i -= len(m.QuoteDenom)
		copy(dAtA[i:], m.QuoteDenom)
		i = encodeVarintDerivatives(dAtA, i, uint64(len(m.QuoteDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintDerivatives(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PerpetualFuturesParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PerpetualFuturesParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PerpetualFuturesParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Markets) > 0 {
		for iNdEx := len(m.Markets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Markets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDerivatives(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size := m.ImaginaryFundingRateProportionalCoefficient.Size()
		i -= size
		if _, err := m.ImaginaryFundingRateProportionalCoefficient.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDerivatives(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.MarginMaintenanceRate.Size()
		i -= size
		if _, err := m.MarginMaintenanceRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDerivatives(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.CommissionRate.Size()
		i -= size
		if _, err := m.CommissionRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDerivatives(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PerpetualOptionsParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PerpetualOptionsParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PerpetualOptionsParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Markets) > 0 {
		for iNdEx := len(m.Markets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Markets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDerivatives(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	{
		size := m.ImaginaryFundingRateProportionalCoefficient.Size()
		i -= size
		if _, err := m.ImaginaryFundingRateProportionalCoefficient.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDerivatives(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.MarginMaintenanceRate.Size()
		i -= size
		if _, err := m.MarginMaintenanceRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDerivatives(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.StrikeCommissionRate.Size()
		i -= size
		if _, err := m.StrikeCommissionRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDerivatives(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.PremiumCommissionRate.Size()
		i -= size
		if _, err := m.PremiumCommissionRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDerivatives(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PerpetualOptions.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDerivatives(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.PerpetualFutures.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDerivatives(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Pool.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDerivatives(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintDerivatives(dAtA []byte, offset int, v uint64) int {
	offset -= sovDerivatives(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Position) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDerivatives(uint64(l))
	}
	l = m.Market.Size()
	n += 1 + l + sovDerivatives(uint64(l))
	l = m.Address.Size()
	n += 1 + l + sovDerivatives(uint64(l))
	l = m.OpenedAt.Size()
	n += 1 + l + sovDerivatives(uint64(l))
	if m.OpenedHeight != 0 {
		n += 1 + sovDerivatives(uint64(m.OpenedHeight))
	}
	l = m.OpenedRate.Size()
	n += 1 + l + sovDerivatives(uint64(l))
	l = m.PositionInstance.Size()
	n += 1 + l + sovDerivatives(uint64(l))
	return n
}

func (m *Pool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.QuoteTicker)
	if l > 0 {
		n += 1 + l + sovDerivatives(uint64(l))
	}
	l = m.BaseLptMintFee.Size()
	n += 1 + l + sovDerivatives(uint64(l))
	l = m.BaseLptRedeemFee.Size()
	n += 1 + l + sovDerivatives(uint64(l))
	l = m.BorrowingFeeRatePerHour.Size()
	n += 1 + l + sovDerivatives(uint64(l))
	l = m.LiquidationNeededReportRewardRate.Size()
	n += 1 + l + sovDerivatives(uint64(l))
	if len(m.AcceptedAssets) > 0 {
		for _, e := range m.AcceptedAssets {
			l = e.Size()
			n += 1 + l + sovDerivatives(uint64(l))
		}
	}
	return n
}

func (m *Pool_Asset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovDerivatives(uint64(l))
	}
	l = m.TargetWeight.Size()
	n += 1 + l + sovDerivatives(uint64(l))
	return n
}

func (m *PoolMarketCap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.QuoteTicker)
	if l > 0 {
		n += 1 + l + sovDerivatives(uint64(l))
	}
	l = m.Total.Size()
	n += 1 + l + sovDerivatives(uint64(l))
	if len(m.Breakdown) > 0 {
		for _, e := range m.Breakdown {
			l = e.Size()
			n += 1 + l + sovDerivatives(uint64(l))
		}
	}
	return n
}

func (m *PoolMarketCap_Breakdown) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovDerivatives(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovDerivatives(uint64(l))
	l = m.Price.Size()
	n += 1 + l + sovDerivatives(uint64(l))
	return n
}

func (m *Market) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovDerivatives(uint64(l))
	}
	l = len(m.QuoteDenom)
	if l > 0 {
		n += 1 + l + sovDerivatives(uint64(l))
	}
	return n
}

func (m *PerpetualFuturesParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommissionRate.Size()
	n += 1 + l + sovDerivatives(uint64(l))
	l = m.MarginMaintenanceRate.Size()
	n += 1 + l + sovDerivatives(uint64(l))
	l = m.ImaginaryFundingRateProportionalCoefficient.Size()
	n += 1 + l + sovDerivatives(uint64(l))
	if len(m.Markets) > 0 {
		for _, e := range m.Markets {
			l = e.Size()
			n += 1 + l + sovDerivatives(uint64(l))
		}
	}
	return n
}

func (m *PerpetualOptionsParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PremiumCommissionRate.Size()
	n += 1 + l + sovDerivatives(uint64(l))
	l = m.StrikeCommissionRate.Size()
	n += 1 + l + sovDerivatives(uint64(l))
	l = m.MarginMaintenanceRate.Size()
	n += 1 + l + sovDerivatives(uint64(l))
	l = m.ImaginaryFundingRateProportionalCoefficient.Size()
	n += 1 + l + sovDerivatives(uint64(l))
	if len(m.Markets) > 0 {
		for _, e := range m.Markets {
			l = e.Size()
			n += 1 + l + sovDerivatives(uint64(l))
		}
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Pool.Size()
	n += 1 + l + sovDerivatives(uint64(l))
	l = m.PerpetualFutures.Size()
	n += 1 + l + sovDerivatives(uint64(l))
	l = m.PerpetualOptions.Size()
	n += 1 + l + sovDerivatives(uint64(l))
	return n
}

func sovDerivatives(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDerivatives(x uint64) (n int) {
	return sovDerivatives(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Position) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDerivatives
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Position: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Position: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Market", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Market.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OpenedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenedHeight", wireType)
			}
			m.OpenedHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpenedHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenedRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OpenedRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionInstance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PositionInstance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDerivatives(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDerivatives
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDerivatives
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteTicker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteTicker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseLptMintFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BaseLptMintFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseLptRedeemFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BaseLptRedeemFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowingFeeRatePerHour", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BorrowingFeeRatePerHour.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationNeededReportRewardRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidationNeededReportRewardRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptedAssets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AcceptedAssets = append(m.AcceptedAssets, Pool_Asset{})
			if err := m.AcceptedAssets[len(m.AcceptedAssets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDerivatives(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDerivatives
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pool_Asset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDerivatives
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Asset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Asset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetWeight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TargetWeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDerivatives(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDerivatives
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolMarketCap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDerivatives
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolMarketCap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolMarketCap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteTicker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteTicker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Total.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Breakdown", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Breakdown = append(m.Breakdown, PoolMarketCap_Breakdown{})
			if err := m.Breakdown[len(m.Breakdown)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDerivatives(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDerivatives
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolMarketCap_Breakdown) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDerivatives
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Breakdown: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Breakdown: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDerivatives(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDerivatives
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Market) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDerivatives
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Market: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Market: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDerivatives(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDerivatives
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PerpetualFuturesParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDerivatives
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PerpetualFuturesParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PerpetualFuturesParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommissionRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarginMaintenanceRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MarginMaintenanceRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImaginaryFundingRateProportionalCoefficient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ImaginaryFundingRateProportionalCoefficient.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Markets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Markets = append(m.Markets, Market{})
			if err := m.Markets[len(m.Markets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDerivatives(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDerivatives
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PerpetualOptionsParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDerivatives
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PerpetualOptionsParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PerpetualOptionsParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PremiumCommissionRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PremiumCommissionRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrikeCommissionRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StrikeCommissionRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarginMaintenanceRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MarginMaintenanceRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImaginaryFundingRateProportionalCoefficient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ImaginaryFundingRateProportionalCoefficient.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Markets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Markets = append(m.Markets, Market{})
			if err := m.Markets[len(m.Markets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDerivatives(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDerivatives
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDerivatives
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerpetualFutures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PerpetualFutures.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerpetualOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PerpetualOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDerivatives(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDerivatives
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDerivatives(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDerivatives
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDerivatives
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDerivatives
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDerivatives
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDerivatives        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDerivatives          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDerivatives = fmt.Errorf("proto: unexpected end of group")
)
