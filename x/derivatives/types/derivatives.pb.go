// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: derivatives/derivatives.proto

package types

import (
	fmt "fmt"
	github_com_UnUniFi_chain_types "github.com/UnUniFi/chain/types"
	types1 "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PositionType int32

const (
	PositionType_POSITION_UNKNOWN PositionType = 0
	PositionType_LONG             PositionType = 1
	PositionType_SHORT            PositionType = 2
)

var PositionType_name = map[int32]string{
	0: "POSITION_UNKNOWN",
	1: "LONG",
	2: "SHORT",
}

var PositionType_value = map[string]int32{
	"POSITION_UNKNOWN": 0,
	"LONG":             1,
	"SHORT":            2,
}

func (x PositionType) String() string {
	return proto.EnumName(PositionType_name, int32(x))
}

func (PositionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c5fa11d50d3fed76, []int{0}
}

type RevenueType int32

const (
	RevenueType_PROFIT RevenueType = 0
	RevenueType_LOSS   RevenueType = 1
)

var RevenueType_name = map[int32]string{
	0: "PROFIT",
	1: "LOSS",
}

var RevenueType_value = map[string]int32{
	"PROFIT": 0,
	"LOSS":   1,
}

func (x RevenueType) String() string {
	return proto.EnumName(RevenueType_name, int32(x))
}

func (RevenueType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c5fa11d50d3fed76, []int{1}
}

type Revenue struct {
	RevenueType RevenueType `protobuf:"varint,1,opt,name=revenue_type,json=revenueType,proto3,enum=ununifi.derivatives.RevenueType" json:"revenue_type,omitempty" yaml:"revenue_type"`
	Amount      types.Coin  `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount" yaml:"amount"`
}

func (m *Revenue) Reset()         { *m = Revenue{} }
func (m *Revenue) String() string { return proto.CompactTextString(m) }
func (*Revenue) ProtoMessage()    {}
func (*Revenue) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5fa11d50d3fed76, []int{0}
}
func (m *Revenue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Revenue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Revenue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Revenue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Revenue.Merge(m, src)
}
func (m *Revenue) XXX_Size() int {
	return m.Size()
}
func (m *Revenue) XXX_DiscardUnknown() {
	xxx_messageInfo_Revenue.DiscardUnknown(m)
}

var xxx_messageInfo_Revenue proto.InternalMessageInfo

func (m *Revenue) GetRevenueType() RevenueType {
	if m != nil {
		return m.RevenueType
	}
	return RevenueType_PROFIT
}

func (m *Revenue) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

type Position struct {
	Id               string                                          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
	Market           Market                                          `protobuf:"bytes,2,opt,name=market,proto3" json:"market" yaml:"market"`
	Address          github_com_UnUniFi_chain_types.StringAccAddress `protobuf:"bytes,3,opt,name=address,proto3,customtype=github.com/UnUniFi/chain/types.StringAccAddress" json:"address" yaml:"address"`
	OpenedAt         time.Time                                       `protobuf:"bytes,4,opt,name=opened_at,json=openedAt,proto3,stdtime" json:"opened_at" yaml:"opened_at"`
	OpenedHeight     uint64                                          `protobuf:"varint,5,opt,name=opened_height,json=openedHeight,proto3" json:"opened_height,omitempty" yaml:"opened_height"`
	OpenedBaseRate   github_com_cosmos_cosmos_sdk_types.Dec          `protobuf:"bytes,6,opt,name=opened_base_rate,json=openedBaseRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"opened_base_rate" yaml:"opened_base_rate"`
	OpenedQuoteRate  github_com_cosmos_cosmos_sdk_types.Dec          `protobuf:"bytes,7,opt,name=opened_quote_rate,json=openedQuoteRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"opened_quote_rate" yaml:"opened_quote_rate"`
	RemainingMargin  types.Coin                                      `protobuf:"bytes,8,opt,name=remaining_margin,json=remainingMargin,proto3" json:"remaining_margin" yaml:"remaining_margin"`
	LastLeviedAt     time.Time                                       `protobuf:"bytes,9,opt,name=last_levied_at,json=lastLeviedAt,proto3,stdtime" json:"last_levied_at" yaml:"last_levied_at"`
	PositionInstance types1.Any                                      `protobuf:"bytes,10,opt,name=position_instance,json=positionInstance,proto3" json:"position_instance" yaml:"position_instance"`
}

func (m *Position) Reset()         { *m = Position{} }
func (m *Position) String() string { return proto.CompactTextString(m) }
func (*Position) ProtoMessage()    {}
func (*Position) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5fa11d50d3fed76, []int{1}
}
func (m *Position) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Position) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Position.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Position) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Position.Merge(m, src)
}
func (m *Position) XXX_Size() int {
	return m.Size()
}
func (m *Position) XXX_DiscardUnknown() {
	xxx_messageInfo_Position.DiscardUnknown(m)
}

var xxx_messageInfo_Position proto.InternalMessageInfo

func (m *Position) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Position) GetMarket() Market {
	if m != nil {
		return m.Market
	}
	return Market{}
}

func (m *Position) GetOpenedAt() time.Time {
	if m != nil {
		return m.OpenedAt
	}
	return time.Time{}
}

func (m *Position) GetOpenedHeight() uint64 {
	if m != nil {
		return m.OpenedHeight
	}
	return 0
}

func (m *Position) GetRemainingMargin() types.Coin {
	if m != nil {
		return m.RemainingMargin
	}
	return types.Coin{}
}

func (m *Position) GetLastLeviedAt() time.Time {
	if m != nil {
		return m.LastLeviedAt
	}
	return time.Time{}
}

func (m *Position) GetPositionInstance() types1.Any {
	if m != nil {
		return m.PositionInstance
	}
	return types1.Any{}
}

type PoolParams struct {
	QuoteTicker                 string                                 `protobuf:"bytes,1,opt,name=quote_ticker,json=quoteTicker,proto3" json:"quote_ticker,omitempty" yaml:"quote_ticker"`
	BaseLptMintFee              github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=base_lpt_mint_fee,json=baseLptMintFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"base_lpt_mint_fee" yaml:"base_lpt_mint_fee"`
	BaseLptRedeemFee            github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=base_lpt_redeem_fee,json=baseLptRedeemFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"base_lpt_redeem_fee" yaml:"base_lpt_redeem_fee"`
	BorrowingFeeRatePerHour     github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=borrowing_fee_rate_per_hour,json=borrowingFeeRatePerHour,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"borrowing_fee_rate_per_hour" yaml:"borrowing_fee_rate_per_hour"`
	ReportLiquidationRewardRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=report_liquidation_reward_rate,json=reportLiquidationRewardRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"report_liquidation_reward_rate" yaml:"report_liquidation_reward_rate"`
	ReportLevyPeriodRewardRate  github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=report_levy_period_reward_rate,json=reportLevyPeriodRewardRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"report_levy_period_reward_rate" yaml:"report_levy_period_reward_rate"`
	AcceptedAssets              []*PoolParams_Asset                    `protobuf:"bytes,7,rep,name=accepted_assets,json=acceptedAssets,proto3" json:"accepted_assets,omitempty" yaml:"accepted_assets"`
}

func (m *PoolParams) Reset()         { *m = PoolParams{} }
func (m *PoolParams) String() string { return proto.CompactTextString(m) }
func (*PoolParams) ProtoMessage()    {}
func (*PoolParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5fa11d50d3fed76, []int{2}
}
func (m *PoolParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolParams.Merge(m, src)
}
func (m *PoolParams) XXX_Size() int {
	return m.Size()
}
func (m *PoolParams) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolParams.DiscardUnknown(m)
}

var xxx_messageInfo_PoolParams proto.InternalMessageInfo

func (m *PoolParams) GetQuoteTicker() string {
	if m != nil {
		return m.QuoteTicker
	}
	return ""
}

func (m *PoolParams) GetAcceptedAssets() []*PoolParams_Asset {
	if m != nil {
		return m.AcceptedAssets
	}
	return nil
}

type PoolParams_Asset struct {
	Denom        string                                 `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty" yaml:"denom"`
	TargetWeight github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=target_weight,json=targetWeight,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"target_weight" yaml:"target_weight"`
}

func (m *PoolParams_Asset) Reset()         { *m = PoolParams_Asset{} }
func (m *PoolParams_Asset) String() string { return proto.CompactTextString(m) }
func (*PoolParams_Asset) ProtoMessage()    {}
func (*PoolParams_Asset) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5fa11d50d3fed76, []int{2, 0}
}
func (m *PoolParams_Asset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolParams_Asset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolParams_Asset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolParams_Asset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolParams_Asset.Merge(m, src)
}
func (m *PoolParams_Asset) XXX_Size() int {
	return m.Size()
}
func (m *PoolParams_Asset) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolParams_Asset.DiscardUnknown(m)
}

var xxx_messageInfo_PoolParams_Asset proto.InternalMessageInfo

func (m *PoolParams_Asset) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type PoolMarketCap struct {
	QuoteTicker string                                 `protobuf:"bytes,1,opt,name=quote_ticker,json=quoteTicker,proto3" json:"quote_ticker,omitempty" yaml:"quote_ticker"`
	Total       github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=total,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"total" yaml:"total"`
	Breakdown   []PoolMarketCap_Breakdown              `protobuf:"bytes,3,rep,name=breakdown,proto3" json:"breakdown" yaml:"breakdown"`
}

func (m *PoolMarketCap) Reset()         { *m = PoolMarketCap{} }
func (m *PoolMarketCap) String() string { return proto.CompactTextString(m) }
func (*PoolMarketCap) ProtoMessage()    {}
func (*PoolMarketCap) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5fa11d50d3fed76, []int{3}
}
func (m *PoolMarketCap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolMarketCap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolMarketCap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolMarketCap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolMarketCap.Merge(m, src)
}
func (m *PoolMarketCap) XXX_Size() int {
	return m.Size()
}
func (m *PoolMarketCap) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolMarketCap.DiscardUnknown(m)
}

var xxx_messageInfo_PoolMarketCap proto.InternalMessageInfo

func (m *PoolMarketCap) GetQuoteTicker() string {
	if m != nil {
		return m.QuoteTicker
	}
	return ""
}

func (m *PoolMarketCap) GetBreakdown() []PoolMarketCap_Breakdown {
	if m != nil {
		return m.Breakdown
	}
	return nil
}

type PoolMarketCap_Breakdown struct {
	Denom  string                                 `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty" yaml:"denom"`
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount" yaml:"amount"`
	Price  github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=price,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"price" yaml:"price"`
}

func (m *PoolMarketCap_Breakdown) Reset()         { *m = PoolMarketCap_Breakdown{} }
func (m *PoolMarketCap_Breakdown) String() string { return proto.CompactTextString(m) }
func (*PoolMarketCap_Breakdown) ProtoMessage()    {}
func (*PoolMarketCap_Breakdown) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5fa11d50d3fed76, []int{3, 0}
}
func (m *PoolMarketCap_Breakdown) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolMarketCap_Breakdown) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolMarketCap_Breakdown.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolMarketCap_Breakdown) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolMarketCap_Breakdown.Merge(m, src)
}
func (m *PoolMarketCap_Breakdown) XXX_Size() int {
	return m.Size()
}
func (m *PoolMarketCap_Breakdown) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolMarketCap_Breakdown.DiscardUnknown(m)
}

var xxx_messageInfo_PoolMarketCap_Breakdown proto.InternalMessageInfo

func (m *PoolMarketCap_Breakdown) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type Market struct {
	BaseDenom  string `protobuf:"bytes,1,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty" yaml:"base_denom"`
	QuoteDenom string `protobuf:"bytes,2,opt,name=quote_denom,json=quoteDenom,proto3" json:"quote_denom,omitempty" yaml:"quote_denom"`
}

func (m *Market) Reset()         { *m = Market{} }
func (m *Market) String() string { return proto.CompactTextString(m) }
func (*Market) ProtoMessage()    {}
func (*Market) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5fa11d50d3fed76, []int{4}
}
func (m *Market) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Market) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Market.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Market) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Market.Merge(m, src)
}
func (m *Market) XXX_Size() int {
	return m.Size()
}
func (m *Market) XXX_DiscardUnknown() {
	xxx_messageInfo_Market.DiscardUnknown(m)
}

var xxx_messageInfo_Market proto.InternalMessageInfo

func (m *Market) GetBaseDenom() string {
	if m != nil {
		return m.BaseDenom
	}
	return ""
}

func (m *Market) GetQuoteDenom() string {
	if m != nil {
		return m.QuoteDenom
	}
	return ""
}

type EventPriceIsNotFeeded struct {
	Asset string `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty" yaml:"asset"`
}

func (m *EventPriceIsNotFeeded) Reset()         { *m = EventPriceIsNotFeeded{} }
func (m *EventPriceIsNotFeeded) String() string { return proto.CompactTextString(m) }
func (*EventPriceIsNotFeeded) ProtoMessage()    {}
func (*EventPriceIsNotFeeded) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5fa11d50d3fed76, []int{5}
}
func (m *EventPriceIsNotFeeded) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPriceIsNotFeeded) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPriceIsNotFeeded.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPriceIsNotFeeded) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPriceIsNotFeeded.Merge(m, src)
}
func (m *EventPriceIsNotFeeded) XXX_Size() int {
	return m.Size()
}
func (m *EventPriceIsNotFeeded) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPriceIsNotFeeded.DiscardUnknown(m)
}

var xxx_messageInfo_EventPriceIsNotFeeded proto.InternalMessageInfo

func (m *EventPriceIsNotFeeded) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func init() {
	proto.RegisterEnum("ununifi.derivatives.PositionType", PositionType_name, PositionType_value)
	proto.RegisterEnum("ununifi.derivatives.RevenueType", RevenueType_name, RevenueType_value)
	proto.RegisterType((*Revenue)(nil), "ununifi.derivatives.Revenue")
	proto.RegisterType((*Position)(nil), "ununifi.derivatives.Position")
	proto.RegisterType((*PoolParams)(nil), "ununifi.derivatives.PoolParams")
	proto.RegisterType((*PoolParams_Asset)(nil), "ununifi.derivatives.PoolParams.Asset")
	proto.RegisterType((*PoolMarketCap)(nil), "ununifi.derivatives.PoolMarketCap")
	proto.RegisterType((*PoolMarketCap_Breakdown)(nil), "ununifi.derivatives.PoolMarketCap.Breakdown")
	proto.RegisterType((*Market)(nil), "ununifi.derivatives.Market")
	proto.RegisterType((*EventPriceIsNotFeeded)(nil), "ununifi.derivatives.EventPriceIsNotFeeded")
}

func init() { proto.RegisterFile("derivatives/derivatives.proto", fileDescriptor_c5fa11d50d3fed76) }

var fileDescriptor_c5fa11d50d3fed76 = []byte{
	// 1262 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xcd, 0x6e, 0x1b, 0x45,
	0x1c, 0xcf, 0x26, 0x8d, 0x13, 0x4f, 0x9c, 0xd4, 0xd9, 0x26, 0x8d, 0xeb, 0x52, 0x6f, 0x18, 0xd4,
	0x2a, 0xaa, 0xca, 0x5a, 0x2d, 0x48, 0x88, 0x4a, 0x50, 0x65, 0x5b, 0x42, 0x5c, 0xd2, 0xc4, 0x4c,
	0x1c, 0x45, 0x42, 0x48, 0xab, 0xf1, 0xee, 0xc4, 0x19, 0xe2, 0xdd, 0xd9, 0xce, 0x8e, 0x1d, 0x2c,
	0xde, 0x01, 0x55, 0xdc, 0x10, 0x7d, 0x09, 0xde, 0xa2, 0xc7, 0x1e, 0x11, 0x07, 0x83, 0xd2, 0x2b,
	0x27, 0x3f, 0x01, 0xda, 0x99, 0x59, 0x67, 0x9d, 0x0f, 0x8a, 0x29, 0x27, 0xef, 0xff, 0xeb, 0xf7,
	0xff, 0x9e, 0x19, 0x83, 0x5b, 0x3e, 0xe1, 0xb4, 0x8b, 0x05, 0xed, 0x92, 0xb8, 0x9a, 0xf9, 0xb6,
	0x23, 0xce, 0x04, 0x33, 0xaf, 0x75, 0xc2, 0x4e, 0x48, 0x0f, 0xa8, 0x9d, 0x11, 0x95, 0x6f, 0xb4,
	0x18, 0x6b, 0xb5, 0x49, 0x55, 0xaa, 0x34, 0x3b, 0x07, 0x55, 0x1c, 0xf6, 0x94, 0x7e, 0x79, 0xa9,
	0xc5, 0x5a, 0x4c, 0x7e, 0x56, 0x93, 0x2f, 0xcd, 0xb5, 0xce, 0x1a, 0x08, 0x1a, 0x90, 0x58, 0xe0,
	0x20, 0xd2, 0x0a, 0x15, 0x8f, 0xc5, 0x01, 0x8b, 0xab, 0x4d, 0x1c, 0x93, 0x6a, 0xf7, 0x7e, 0x93,
	0x08, 0x7c, 0xbf, 0xea, 0x31, 0x1a, 0x6a, 0xf9, 0x0d, 0x25, 0x77, 0x15, 0xb2, 0x22, 0x94, 0x08,
	0xfe, 0x6a, 0x80, 0x19, 0x44, 0xba, 0x24, 0xec, 0x10, 0xf3, 0x5b, 0x50, 0xe0, 0xea, 0xd3, 0x15,
	0xbd, 0x88, 0x94, 0x8c, 0x55, 0x63, 0x6d, 0xe1, 0xc1, 0xaa, 0x7d, 0x41, 0x12, 0xb6, 0xb6, 0x69,
	0xf4, 0x22, 0xe2, 0xac, 0x0c, 0xfa, 0xd6, 0xb5, 0x1e, 0x0e, 0xda, 0x0f, 0x61, 0xd6, 0x1e, 0xa2,
	0x39, 0x7e, 0xaa, 0x65, 0x6e, 0x82, 0x1c, 0x0e, 0x58, 0x27, 0x14, 0xa5, 0xc9, 0x55, 0x63, 0x6d,
	0xee, 0xc1, 0x0d, 0x5b, 0x07, 0x92, 0x44, 0x6d, 0xeb, 0xa8, 0xed, 0xc7, 0x8c, 0x86, 0xce, 0xf2,
	0xab, 0xbe, 0x35, 0x31, 0xe8, 0x5b, 0xf3, 0x0a, 0x54, 0x99, 0x41, 0xa4, 0xed, 0xe1, 0x8f, 0x33,
	0x60, 0xb6, 0xce, 0x62, 0x2a, 0x28, 0x0b, 0xcd, 0x5b, 0x60, 0x92, 0xfa, 0x32, 0xd4, 0xbc, 0x33,
	0x3f, 0xe8, 0x5b, 0x79, 0x65, 0x43, 0x7d, 0x88, 0x26, 0xa9, 0x6f, 0x3e, 0x05, 0xb9, 0x00, 0xf3,
	0x23, 0x92, 0x7a, 0xbd, 0x79, 0x61, 0x36, 0xcf, 0xa4, 0xca, 0x59, 0xbf, 0xca, 0x10, 0x22, 0x8d,
	0x60, 0x7a, 0x60, 0x06, 0xfb, 0x3e, 0x27, 0x71, 0x5c, 0x9a, 0x92, 0xfe, 0x6a, 0x89, 0xfe, 0xef,
	0x7d, 0xab, 0xda, 0xa2, 0xe2, 0xb0, 0xd3, 0xb4, 0x3d, 0x16, 0x54, 0xf7, 0xc2, 0xbd, 0x90, 0x6e,
	0xd0, 0xaa, 0x77, 0x88, 0x69, 0x58, 0x4d, 0xea, 0x10, 0xdb, 0xbb, 0x82, 0xd3, 0xb0, 0xb5, 0xee,
	0x79, 0xeb, 0xca, 0x7c, 0xd0, 0xb7, 0x16, 0x74, 0x6a, 0x8a, 0x01, 0x51, 0x8a, 0x6c, 0xee, 0x81,
	0x3c, 0x8b, 0x48, 0x48, 0x7c, 0x17, 0x8b, 0xd2, 0x15, 0x19, 0x73, 0xd9, 0x56, 0x03, 0x60, 0xa7,
	0x03, 0x60, 0x37, 0xd2, 0x01, 0x70, 0xde, 0xd3, 0x21, 0x17, 0x15, 0xde, 0xd0, 0x14, 0xbe, 0xf8,
	0xc3, 0x32, 0xd0, 0xac, 0xa2, 0xd7, 0x85, 0xf9, 0x19, 0x98, 0xd7, 0xb2, 0x43, 0x42, 0x5b, 0x87,
	0xa2, 0x34, 0xbd, 0x6a, 0xac, 0x5d, 0x71, 0x4a, 0x83, 0xbe, 0xb5, 0x34, 0x62, 0xaa, 0xc4, 0x10,
	0x15, 0x14, 0xbd, 0x29, 0x49, 0x33, 0x06, 0x45, 0x2d, 0x4f, 0xba, 0xe5, 0x72, 0x2c, 0x48, 0x29,
	0x37, 0x52, 0x83, 0x3b, 0x99, 0x1a, 0xe8, 0x71, 0x54, 0x3f, 0x1f, 0xc6, 0xfe, 0x91, 0xae, 0xc3,
	0x13, 0xe2, 0x0d, 0xfa, 0xd6, 0xca, 0x88, 0xbf, 0x21, 0x1e, 0x44, 0x0b, 0x8a, 0xe5, 0xe0, 0x98,
	0x20, 0x2c, 0x88, 0xd9, 0x05, 0x8b, 0x5a, 0xe9, 0x79, 0x87, 0x09, 0xed, 0x75, 0x46, 0x7a, 0x7d,
	0x3a, 0xb6, 0xd7, 0xd2, 0x88, 0xd7, 0x53, 0x40, 0x88, 0xae, 0x2a, 0xde, 0xd7, 0x09, 0x4b, 0xfa,
	0x25, 0xa0, 0xc8, 0x49, 0x80, 0x69, 0x48, 0xc3, 0x96, 0x1b, 0x60, 0xde, 0xa2, 0x61, 0x69, 0xf6,
	0x6d, 0x33, 0x6b, 0xe9, 0x46, 0xac, 0xa4, 0x8b, 0x30, 0x0a, 0x00, 0xd1, 0xd5, 0x21, 0xeb, 0x99,
	0xe4, 0x98, 0x1e, 0x58, 0x68, 0xe3, 0x58, 0xb8, 0x6d, 0xd2, 0xa5, 0xaa, 0xdd, 0xf9, 0xb7, 0xb6,
	0xfb, 0x7d, 0xed, 0x65, 0x59, 0x79, 0x19, 0xb5, 0x57, 0x3d, 0x2f, 0x24, 0xcc, 0x2d, 0xc9, 0x5b,
	0x4f, 0x66, 0x76, 0x31, 0xd2, 0xab, 0xe2, 0xd2, 0x30, 0x16, 0x38, 0xf4, 0x48, 0x09, 0x48, 0x3f,
	0x4b, 0xe7, 0xfc, 0xac, 0x87, 0x3d, 0x67, 0x55, 0x7b, 0xd0, 0xf5, 0x3a, 0x67, 0x0c, 0x51, 0x31,
	0xe5, 0xd5, 0x52, 0xd6, 0xcf, 0xb3, 0x00, 0xd4, 0x19, 0x6b, 0xd7, 0x31, 0xc7, 0x41, 0x6c, 0x3e,
	0x04, 0x05, 0x55, 0x5f, 0x41, 0xbd, 0x23, 0xc2, 0xf5, 0x72, 0x66, 0x4e, 0x89, 0xac, 0x14, 0xa2,
	0x39, 0x49, 0x36, 0x24, 0x65, 0x76, 0xc0, 0xa2, 0x9c, 0x88, 0x76, 0x24, 0xdc, 0x80, 0x86, 0xc2,
	0x3d, 0x20, 0x44, 0xae, 0xee, 0x3b, 0xf4, 0xfc, 0x1c, 0x20, 0x44, 0x0b, 0x09, 0x6f, 0x2b, 0x12,
	0xcf, 0x68, 0x28, 0x36, 0x08, 0x31, 0x7f, 0x00, 0xd7, 0x86, 0x5a, 0x9c, 0xf8, 0x84, 0x04, 0xd2,
	0xb1, 0x5a, 0xf3, 0xad, 0xb1, 0x1d, 0x97, 0xcf, 0x38, 0x3e, 0x85, 0x84, 0xa8, 0xa8, 0x5d, 0x23,
	0xc9, 0x4b, 0x9c, 0xff, 0x64, 0x80, 0x9b, 0x4d, 0xc6, 0x39, 0x3b, 0x4e, 0xe6, 0xe5, 0x80, 0xa8,
	0xc1, 0x74, 0x23, 0xc2, 0xdd, 0x43, 0xd6, 0xe1, 0xf2, 0x14, 0xc8, 0x3b, 0x8d, 0xb1, 0xa3, 0x80,
	0x3a, 0x8a, 0xcb, 0xa1, 0x21, 0x5a, 0x19, 0x4a, 0x37, 0x88, 0x9c, 0xfe, 0x3a, 0xe1, 0x9b, 0xac,
	0xc3, 0xcd, 0x97, 0x06, 0xa8, 0x70, 0x12, 0x31, 0x2e, 0xdc, 0x36, 0x7d, 0xde, 0xa1, 0x3e, 0x96,
	0x63, 0xc0, 0xc9, 0x31, 0xe6, 0xbe, 0x5a, 0xc5, 0x69, 0x19, 0xd7, 0xfe, 0xd8, 0x71, 0xdd, 0x4e,
	0x57, 0xe4, 0x9f, 0xd0, 0x21, 0xba, 0xa9, 0x14, 0xb6, 0x4e, 0xe5, 0x48, 0x8a, 0xe5, 0x8e, 0xfe,
	0x92, 0x09, 0x8f, 0x74, 0x7b, 0x49, 0x46, 0x94, 0xf9, 0x23, 0xe1, 0xe5, 0xfe, 0x9f, 0xf0, 0x2e,
	0x46, 0x87, 0xa8, 0xac, 0xc3, 0x23, 0xdd, 0x5e, 0x5d, 0x8a, 0x33, 0xd1, 0x7d, 0x07, 0xae, 0x62,
	0xcf, 0x23, 0x91, 0x48, 0xf6, 0x32, 0x8e, 0x89, 0x88, 0x4b, 0x33, 0xab, 0x53, 0x6b, 0x73, 0x0f,
	0x6e, 0x5f, 0x78, 0xfd, 0x9c, 0xee, 0x8e, 0xbd, 0x9e, 0x68, 0x3b, 0xe5, 0x41, 0xdf, 0xba, 0xae,
	0x6f, 0x88, 0x51, 0x1c, 0x88, 0x16, 0x52, 0x8e, 0x54, 0x8d, 0xcb, 0x2f, 0x0d, 0x30, 0x2d, 0x3f,
	0xcd, 0x3b, 0x60, 0xda, 0x27, 0x21, 0x0b, 0xf4, 0xc2, 0x15, 0x07, 0x7d, 0xab, 0xa0, 0x40, 0x24,
	0x1b, 0x22, 0x25, 0x36, 0x8f, 0xc0, 0xbc, 0xc0, 0xbc, 0x45, 0x84, 0x7b, 0xac, 0xee, 0x02, 0xb5,
	0x5f, 0x1b, 0x63, 0x57, 0x4a, 0xdf, 0x1c, 0x23, 0x60, 0x10, 0x15, 0x14, 0xbd, 0xaf, 0xc8, 0xbf,
	0xa6, 0xc0, 0x7c, 0x92, 0x9f, 0xba, 0x62, 0x1f, 0xe3, 0xe8, 0x9d, 0x8e, 0x87, 0x06, 0x98, 0x16,
	0x4c, 0xe0, 0xb6, 0x0e, 0xf9, 0xf3, 0xb1, 0x43, 0xd6, 0x05, 0x91, 0x20, 0x10, 0x29, 0x30, 0xd3,
	0x07, 0xf9, 0x26, 0x27, 0xf8, 0xc8, 0x67, 0xc7, 0x61, 0x69, 0x4a, 0x36, 0xea, 0xde, 0xa5, 0x8d,
	0x1a, 0x26, 0x62, 0x3b, 0xa9, 0x8d, 0x53, 0x1a, 0xbd, 0x85, 0x87, 0x60, 0x10, 0x9d, 0x02, 0x97,
	0x4f, 0x0c, 0x90, 0x1f, 0x9a, 0xfc, 0xeb, 0x66, 0xed, 0x8f, 0x3c, 0x9b, 0xf2, 0xce, 0xa3, 0x31,
	0x52, 0xae, 0x85, 0xe2, 0xd2, 0x57, 0x54, 0x52, 0xca, 0x88, 0x53, 0x2f, 0x3d, 0xe4, 0xfe, 0x73,
	0x29, 0x25, 0x08, 0x44, 0x0a, 0x0c, 0x1e, 0x83, 0x9c, 0x2a, 0x90, 0xf9, 0x31, 0x00, 0xf2, 0xfc,
	0xcb, 0x66, 0xb9, 0x3c, 0xe8, 0x5b, 0x8b, 0x99, 0xb3, 0x51, 0xa7, 0x9a, 0x4f, 0x88, 0x27, 0x32,
	0xdd, 0x4f, 0x80, 0xea, 0xb7, 0x36, 0x53, 0x39, 0x5f, 0x1f, 0xf4, 0x2d, 0x33, 0x3b, 0x1b, 0xda,
	0x0e, 0x48, 0x4a, 0x1a, 0xc2, 0x47, 0x60, 0xf9, 0x8b, 0x2e, 0x09, 0x45, 0x3d, 0x09, 0xa3, 0x16,
	0x6f, 0xb3, 0xe4, 0x5c, 0xf7, 0x89, 0x9f, 0x14, 0x5a, 0xae, 0xce, 0xf9, 0x42, 0x4b, 0x36, 0x44,
	0x4a, 0x7c, 0xf7, 0x53, 0x50, 0x48, 0x1f, 0x95, 0xf2, 0xbd, 0xba, 0x04, 0x8a, 0xf5, 0x9d, 0xdd,
	0x5a, 0xa3, 0xb6, 0xb3, 0xed, 0xee, 0x6d, 0x7f, 0xb5, 0xbd, 0xb3, 0xbf, 0x5d, 0x9c, 0x30, 0x67,
	0xc1, 0x95, 0xad, 0x9d, 0xed, 0x2f, 0x8b, 0x86, 0x99, 0x07, 0xd3, 0xbb, 0x9b, 0x3b, 0xa8, 0x51,
	0x9c, 0xbc, 0xfb, 0x01, 0x98, 0xcb, 0xbc, 0x87, 0x4d, 0x00, 0x72, 0x75, 0xb4, 0xb3, 0x51, 0x6b,
	0xa4, 0xfa, 0xbb, 0xbb, 0x45, 0xc3, 0xd9, 0x78, 0x75, 0x52, 0x31, 0x5e, 0x9f, 0x54, 0x8c, 0x3f,
	0x4f, 0x2a, 0xc6, 0x8b, 0x37, 0x95, 0x89, 0xd7, 0x6f, 0x2a, 0x13, 0xbf, 0xbd, 0xa9, 0x4c, 0x7c,
	0x73, 0xef, 0xd2, 0xe7, 0xe3, 0xf7, 0xd9, 0xff, 0x14, 0xaa, 0xf8, 0xcd, 0x9c, 0xbc, 0xae, 0x3f,
	0xfa, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xfb, 0x5f, 0x67, 0xf9, 0x7b, 0x0c, 0x00, 0x00,
}

func (m *Revenue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Revenue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Revenue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDerivatives(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.RevenueType != 0 {
		i = encodeVarintDerivatives(dAtA, i, uint64(m.RevenueType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Position) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Position) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Position) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PositionInstance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDerivatives(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.LastLeviedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.LastLeviedAt):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintDerivatives(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x4a
	{
		size, err := m.RemainingMargin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDerivatives(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.OpenedQuoteRate.Size()
		i -= size
		if _, err := m.OpenedQuoteRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDerivatives(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.OpenedBaseRate.Size()
		i -= size
		if _, err := m.OpenedBaseRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDerivatives(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.OpenedHeight != 0 {
		i = encodeVarintDerivatives(dAtA, i, uint64(m.OpenedHeight))
		i--
		dAtA[i] = 0x28
	}
	n5, err5 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.OpenedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.OpenedAt):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintDerivatives(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x22
	{
		size := m.Address.Size()
		i -= size
		if _, err := m.Address.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDerivatives(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Market.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDerivatives(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintDerivatives(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PoolParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AcceptedAssets) > 0 {
		for iNdEx := len(m.AcceptedAssets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AcceptedAssets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDerivatives(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	{
		size := m.ReportLevyPeriodRewardRate.Size()
		i -= size
		if _, err := m.ReportLevyPeriodRewardRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDerivatives(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.ReportLiquidationRewardRate.Size()
		i -= size
		if _, err := m.ReportLiquidationRewardRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDerivatives(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.BorrowingFeeRatePerHour.Size()
		i -= size
		if _, err := m.BorrowingFeeRatePerHour.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDerivatives(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.BaseLptRedeemFee.Size()
		i -= size
		if _, err := m.BaseLptRedeemFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDerivatives(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.BaseLptMintFee.Size()
		i -= size
		if _, err := m.BaseLptMintFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDerivatives(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.QuoteTicker) > 0 {
		i -= len(m.QuoteTicker)
		copy(dAtA[i:], m.QuoteTicker)
		i = encodeVarintDerivatives(dAtA, i, uint64(len(m.QuoteTicker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PoolParams_Asset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolParams_Asset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolParams_Asset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TargetWeight.Size()
		i -= size
		if _, err := m.TargetWeight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDerivatives(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintDerivatives(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PoolMarketCap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolMarketCap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolMarketCap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Breakdown) > 0 {
		for iNdEx := len(m.Breakdown) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Breakdown[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDerivatives(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size := m.Total.Size()
		i -= size
		if _, err := m.Total.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDerivatives(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.QuoteTicker) > 0 {
		i -= len(m.QuoteTicker)
		copy(dAtA[i:], m.QuoteTicker)
		i = encodeVarintDerivatives(dAtA, i, uint64(len(m.QuoteTicker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PoolMarketCap_Breakdown) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolMarketCap_Breakdown) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolMarketCap_Breakdown) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDerivatives(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDerivatives(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintDerivatives(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Market) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Market) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Market) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QuoteDenom) > 0 {
		i -= len(m.QuoteDenom)
		copy(dAtA[i:], m.QuoteDenom)
		i = encodeVarintDerivatives(dAtA, i, uint64(len(m.QuoteDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BaseDenom) > 0 {
		i -= len(m.BaseDenom)
		copy(dAtA[i:], m.BaseDenom)
		i = encodeVarintDerivatives(dAtA, i, uint64(len(m.BaseDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventPriceIsNotFeeded) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPriceIsNotFeeded) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPriceIsNotFeeded) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Asset) > 0 {
		i -= len(m.Asset)
		copy(dAtA[i:], m.Asset)
		i = encodeVarintDerivatives(dAtA, i, uint64(len(m.Asset)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDerivatives(dAtA []byte, offset int, v uint64) int {
	offset -= sovDerivatives(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Revenue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RevenueType != 0 {
		n += 1 + sovDerivatives(uint64(m.RevenueType))
	}
	l = m.Amount.Size()
	n += 1 + l + sovDerivatives(uint64(l))
	return n
}

func (m *Position) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDerivatives(uint64(l))
	}
	l = m.Market.Size()
	n += 1 + l + sovDerivatives(uint64(l))
	l = m.Address.Size()
	n += 1 + l + sovDerivatives(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.OpenedAt)
	n += 1 + l + sovDerivatives(uint64(l))
	if m.OpenedHeight != 0 {
		n += 1 + sovDerivatives(uint64(m.OpenedHeight))
	}
	l = m.OpenedBaseRate.Size()
	n += 1 + l + sovDerivatives(uint64(l))
	l = m.OpenedQuoteRate.Size()
	n += 1 + l + sovDerivatives(uint64(l))
	l = m.RemainingMargin.Size()
	n += 1 + l + sovDerivatives(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.LastLeviedAt)
	n += 1 + l + sovDerivatives(uint64(l))
	l = m.PositionInstance.Size()
	n += 1 + l + sovDerivatives(uint64(l))
	return n
}

func (m *PoolParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.QuoteTicker)
	if l > 0 {
		n += 1 + l + sovDerivatives(uint64(l))
	}
	l = m.BaseLptMintFee.Size()
	n += 1 + l + sovDerivatives(uint64(l))
	l = m.BaseLptRedeemFee.Size()
	n += 1 + l + sovDerivatives(uint64(l))
	l = m.BorrowingFeeRatePerHour.Size()
	n += 1 + l + sovDerivatives(uint64(l))
	l = m.ReportLiquidationRewardRate.Size()
	n += 1 + l + sovDerivatives(uint64(l))
	l = m.ReportLevyPeriodRewardRate.Size()
	n += 1 + l + sovDerivatives(uint64(l))
	if len(m.AcceptedAssets) > 0 {
		for _, e := range m.AcceptedAssets {
			l = e.Size()
			n += 1 + l + sovDerivatives(uint64(l))
		}
	}
	return n
}

func (m *PoolParams_Asset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovDerivatives(uint64(l))
	}
	l = m.TargetWeight.Size()
	n += 1 + l + sovDerivatives(uint64(l))
	return n
}

func (m *PoolMarketCap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.QuoteTicker)
	if l > 0 {
		n += 1 + l + sovDerivatives(uint64(l))
	}
	l = m.Total.Size()
	n += 1 + l + sovDerivatives(uint64(l))
	if len(m.Breakdown) > 0 {
		for _, e := range m.Breakdown {
			l = e.Size()
			n += 1 + l + sovDerivatives(uint64(l))
		}
	}
	return n
}

func (m *PoolMarketCap_Breakdown) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovDerivatives(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovDerivatives(uint64(l))
	l = m.Price.Size()
	n += 1 + l + sovDerivatives(uint64(l))
	return n
}

func (m *Market) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BaseDenom)
	if l > 0 {
		n += 1 + l + sovDerivatives(uint64(l))
	}
	l = len(m.QuoteDenom)
	if l > 0 {
		n += 1 + l + sovDerivatives(uint64(l))
	}
	return n
}

func (m *EventPriceIsNotFeeded) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Asset)
	if l > 0 {
		n += 1 + l + sovDerivatives(uint64(l))
	}
	return n
}

func sovDerivatives(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDerivatives(x uint64) (n int) {
	return sovDerivatives(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Revenue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDerivatives
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Revenue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Revenue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevenueType", wireType)
			}
			m.RevenueType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RevenueType |= RevenueType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDerivatives(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDerivatives
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Position) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDerivatives
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Position: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Position: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Market", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Market.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.OpenedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenedHeight", wireType)
			}
			m.OpenedHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpenedHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenedBaseRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OpenedBaseRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenedQuoteRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OpenedQuoteRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingMargin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RemainingMargin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastLeviedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.LastLeviedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionInstance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PositionInstance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDerivatives(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDerivatives
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDerivatives
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteTicker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteTicker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseLptMintFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BaseLptMintFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseLptRedeemFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BaseLptRedeemFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowingFeeRatePerHour", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BorrowingFeeRatePerHour.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportLiquidationRewardRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReportLiquidationRewardRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportLevyPeriodRewardRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReportLevyPeriodRewardRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptedAssets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AcceptedAssets = append(m.AcceptedAssets, &PoolParams_Asset{})
			if err := m.AcceptedAssets[len(m.AcceptedAssets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDerivatives(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDerivatives
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolParams_Asset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDerivatives
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Asset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Asset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetWeight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TargetWeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDerivatives(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDerivatives
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolMarketCap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDerivatives
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolMarketCap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolMarketCap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteTicker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteTicker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Total.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Breakdown", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Breakdown = append(m.Breakdown, PoolMarketCap_Breakdown{})
			if err := m.Breakdown[len(m.Breakdown)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDerivatives(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDerivatives
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolMarketCap_Breakdown) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDerivatives
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Breakdown: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Breakdown: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDerivatives(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDerivatives
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Market) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDerivatives
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Market: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Market: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDerivatives(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDerivatives
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPriceIsNotFeeded) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDerivatives
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPriceIsNotFeeded: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPriceIsNotFeeded: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDerivatives(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDerivatives
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDerivatives(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDerivatives
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDerivatives
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDerivatives
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDerivatives
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDerivatives        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDerivatives          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDerivatives = fmt.Errorf("proto: unexpected end of group")
)
