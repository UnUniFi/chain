// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: derivatives/derivatives.proto

package types

import (
	fmt "fmt"
	github_com_UnUniFi_chain_types "github.com/UnUniFi/chain/types"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AssetType int32

const (
	AssetType_Real      AssetType = 0
	AssetType_Imaginary AssetType = 1
)

var AssetType_name = map[int32]string{
	0: "Real",
	1: "Imaginary",
}

var AssetType_value = map[string]int32{
	"Real":      0,
	"Imaginary": 1,
}

func (x AssetType) String() string {
	return proto.EnumName(AssetType_name, int32(x))
}

func (AssetType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c5fa11d50d3fed76, []int{0}
}

type PositionType int32

const (
	PositionType_POSITION_UNKNOWN PositionType = 0
	PositionType_LONG             PositionType = 1
	PositionType_SHORT            PositionType = 2
)

var PositionType_name = map[int32]string{
	0: "POSITION_UNKNOWN",
	1: "LONG",
	2: "SHORT",
}

var PositionType_value = map[string]int32{
	"POSITION_UNKNOWN": 0,
	"LONG":             1,
	"SHORT":            2,
}

func (x PositionType) String() string {
	return proto.EnumName(PositionType_name, int32(x))
}

func (PositionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c5fa11d50d3fed76, []int{1}
}

type WrappedPosition struct {
	Id       string                                          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
	Address  github_com_UnUniFi_chain_types.StringAccAddress `protobuf:"bytes,2,opt,name=address,proto3,customtype=github.com/UnUniFi/chain/types.StringAccAddress" json:"address" yaml:"address"`
	StartAt  timestamppb.Timestamp                           `protobuf:"bytes,3,opt,name=start_at,json=startAt,proto3" json:"start_at" yaml:"start_at"`
	Position types.Any                                       `protobuf:"bytes,5,opt,name=position,proto3" json:"position" yaml:"position"`
}

func (m *WrappedPosition) Reset()         { *m = WrappedPosition{} }
func (m *WrappedPosition) String() string { return proto.CompactTextString(m) }
func (*WrappedPosition) ProtoMessage()    {}
func (*WrappedPosition) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5fa11d50d3fed76, []int{0}
}
func (m *WrappedPosition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WrappedPosition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WrappedPosition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WrappedPosition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WrappedPosition.Merge(m, src)
}
func (m *WrappedPosition) XXX_Size() int {
	return m.Size()
}
func (m *WrappedPosition) XXX_DiscardUnknown() {
	xxx_messageInfo_WrappedPosition.DiscardUnknown(m)
}

var xxx_messageInfo_WrappedPosition proto.InternalMessageInfo

func (m *WrappedPosition) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *WrappedPosition) GetStartAt() timestamppb.Timestamp {
	if m != nil {
		return m.StartAt
	}
	return timestamppb.Timestamp{}
}

func (m *WrappedPosition) GetPosition() types.Any {
	if m != nil {
		return m.Position
	}
	return types.Any{}
}

type Pool struct {
	AcceptedAssets []Pool_Asset `protobuf:"bytes,1,rep,name=accepted_assets,json=acceptedAssets,proto3" json:"accepted_assets" yaml:"accepted_assets"`
}

func (m *Pool) Reset()         { *m = Pool{} }
func (m *Pool) String() string { return proto.CompactTextString(m) }
func (*Pool) ProtoMessage()    {}
func (*Pool) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5fa11d50d3fed76, []int{1}
}
func (m *Pool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pool.Merge(m, src)
}
func (m *Pool) XXX_Size() int {
	return m.Size()
}
func (m *Pool) XXX_DiscardUnknown() {
	xxx_messageInfo_Pool.DiscardUnknown(m)
}

var xxx_messageInfo_Pool proto.InternalMessageInfo

func (m *Pool) GetAcceptedAssets() []Pool_Asset {
	if m != nil {
		return m.AcceptedAssets
	}
	return nil
}

type Pool_Asset struct {
	Denom        string                                 `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty" yaml:"denom"`
	Type         AssetType                              `protobuf:"varint,2,opt,name=type,proto3,enum=ununifi.derivatives.AssetType" json:"type,omitempty" yaml:"type"`
	TargetWeight github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=target_weight,json=targetWeight,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"target_weight" yaml:"target_weight"`
}

func (m *Pool_Asset) Reset()         { *m = Pool_Asset{} }
func (m *Pool_Asset) String() string { return proto.CompactTextString(m) }
func (*Pool_Asset) ProtoMessage()    {}
func (*Pool_Asset) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5fa11d50d3fed76, []int{1, 0}
}
func (m *Pool_Asset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pool_Asset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pool_Asset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pool_Asset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pool_Asset.Merge(m, src)
}
func (m *Pool_Asset) XXX_Size() int {
	return m.Size()
}
func (m *Pool_Asset) XXX_DiscardUnknown() {
	xxx_messageInfo_Pool_Asset.DiscardUnknown(m)
}

var xxx_messageInfo_Pool_Asset proto.InternalMessageInfo

func (m *Pool_Asset) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *Pool_Asset) GetType() AssetType {
	if m != nil {
		return m.Type
	}
	return AssetType_Real
}

type Subpool struct {
	AcceptedAssets []Subpool_Asset `protobuf:"bytes,1,rep,name=accepted_assets,json=acceptedAssets,proto3" json:"accepted_assets" yaml:"accepted_assets"`
}

func (m *Subpool) Reset()         { *m = Subpool{} }
func (m *Subpool) String() string { return proto.CompactTextString(m) }
func (*Subpool) ProtoMessage()    {}
func (*Subpool) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5fa11d50d3fed76, []int{2}
}
func (m *Subpool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Subpool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Subpool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Subpool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subpool.Merge(m, src)
}
func (m *Subpool) XXX_Size() int {
	return m.Size()
}
func (m *Subpool) XXX_DiscardUnknown() {
	xxx_messageInfo_Subpool.DiscardUnknown(m)
}

var xxx_messageInfo_Subpool proto.InternalMessageInfo

func (m *Subpool) GetAcceptedAssets() []Subpool_Asset {
	if m != nil {
		return m.AcceptedAssets
	}
	return nil
}

type Subpool_Asset struct {
	Denom  string                                 `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty" yaml:"denom"`
	Weight github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=weight,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"weight" yaml:"weight"`
}

func (m *Subpool_Asset) Reset()         { *m = Subpool_Asset{} }
func (m *Subpool_Asset) String() string { return proto.CompactTextString(m) }
func (*Subpool_Asset) ProtoMessage()    {}
func (*Subpool_Asset) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5fa11d50d3fed76, []int{2, 0}
}
func (m *Subpool_Asset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Subpool_Asset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Subpool_Asset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Subpool_Asset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subpool_Asset.Merge(m, src)
}
func (m *Subpool_Asset) XXX_Size() int {
	return m.Size()
}
func (m *Subpool_Asset) XXX_DiscardUnknown() {
	xxx_messageInfo_Subpool_Asset.DiscardUnknown(m)
}

var xxx_messageInfo_Subpool_Asset proto.InternalMessageInfo

func (m *Subpool_Asset) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type PriceData struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty" yaml:"denom"`
	Price int64  `protobuf:"varint,2,opt,name=price,proto3" json:"price,omitempty" yaml:"price"`
}

func (m *PriceData) Reset()         { *m = PriceData{} }
func (m *PriceData) String() string { return proto.CompactTextString(m) }
func (*PriceData) ProtoMessage()    {}
func (*PriceData) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5fa11d50d3fed76, []int{3}
}
func (m *PriceData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PriceData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PriceData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PriceData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PriceData.Merge(m, src)
}
func (m *PriceData) XXX_Size() int {
	return m.Size()
}
func (m *PriceData) XXX_DiscardUnknown() {
	xxx_messageInfo_PriceData.DiscardUnknown(m)
}

var xxx_messageInfo_PriceData proto.InternalMessageInfo

func (m *PriceData) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *PriceData) GetPrice() int64 {
	if m != nil {
		return m.Price
	}
	return 0
}

type UserDeposit struct {
	Denom  string                                 `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty" yaml:"denom"`
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount" yaml:"amount"`
}

func (m *UserDeposit) Reset()         { *m = UserDeposit{} }
func (m *UserDeposit) String() string { return proto.CompactTextString(m) }
func (*UserDeposit) ProtoMessage()    {}
func (*UserDeposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5fa11d50d3fed76, []int{4}
}
func (m *UserDeposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserDeposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserDeposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserDeposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserDeposit.Merge(m, src)
}
func (m *UserDeposit) XXX_Size() int {
	return m.Size()
}
func (m *UserDeposit) XXX_DiscardUnknown() {
	xxx_messageInfo_UserDeposit.DiscardUnknown(m)
}

var xxx_messageInfo_UserDeposit proto.InternalMessageInfo

func (m *UserDeposit) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type Params struct {
	Pool                    Pool                                   `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool" yaml:"pool"`
	Subpools                []Subpool                              `protobuf:"bytes,2,rep,name=subpools,proto3" json:"subpools" yaml:"subpools"`
	BaseLptMintFee          github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=base_lpt_mint_fee,json=baseLptMintFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"base_lpt_mint_fee" yaml:"base_lpt_mint_fee"`
	BaseLptRedeemFee        github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=base_lpt_redeem_fee,json=baseLptRedeemFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"base_lpt_redeem_fee" yaml:"base_lpt_redeem_fee"`
	BorrowingFeeRatePerHour github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=borrowing_fee_rate_per_hour,json=borrowingFeeRatePerHour,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"borrowing_fee_rate_per_hour" yaml:"borrowing_fee_rate_per_hour"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5fa11d50d3fed76, []int{5}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetPool() Pool {
	if m != nil {
		return m.Pool
	}
	return Pool{}
}

func (m *Params) GetSubpools() []Subpool {
	if m != nil {
		return m.Subpools
	}
	return nil
}

func init() {
	proto.RegisterEnum("ununifi.derivatives.AssetType", AssetType_name, AssetType_value)
	proto.RegisterEnum("ununifi.derivatives.PositionType", PositionType_name, PositionType_value)
	proto.RegisterType((*WrappedPosition)(nil), "ununifi.derivatives.WrappedPosition")
	proto.RegisterType((*Pool)(nil), "ununifi.derivatives.Pool")
	proto.RegisterType((*Pool_Asset)(nil), "ununifi.derivatives.Pool.Asset")
	proto.RegisterType((*Subpool)(nil), "ununifi.derivatives.Subpool")
	proto.RegisterType((*Subpool_Asset)(nil), "ununifi.derivatives.Subpool.Asset")
	proto.RegisterType((*PriceData)(nil), "ununifi.derivatives.PriceData")
	proto.RegisterType((*UserDeposit)(nil), "ununifi.derivatives.UserDeposit")
	proto.RegisterType((*Params)(nil), "ununifi.derivatives.Params")
}

func init() { proto.RegisterFile("derivatives/derivatives.proto", fileDescriptor_c5fa11d50d3fed76) }

var fileDescriptor_c5fa11d50d3fed76 = []byte{
	// 894 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x95, 0x4d, 0x6f, 0x23, 0x35,
	0x18, 0xc7, 0x33, 0x69, 0xfa, 0x12, 0xa7, 0x2f, 0x61, 0x5a, 0xb1, 0xd9, 0xc0, 0x66, 0x2a, 0x0b,
	0x55, 0xd5, 0x0a, 0x66, 0xb4, 0xe5, 0x04, 0x17, 0x94, 0x50, 0x85, 0x0d, 0x94, 0x24, 0xb8, 0xa9,
	0x2a, 0xc1, 0x61, 0xe4, 0xcc, 0xb8, 0x13, 0xab, 0x99, 0xf1, 0xc8, 0x76, 0xba, 0x44, 0x9c, 0xb8,
	0x71, 0x42, 0x88, 0x4f, 0xc1, 0x91, 0x8f, 0xb1, 0xc7, 0x3d, 0x70, 0x40, 0x1c, 0x22, 0x68, 0xbf,
	0x41, 0x3e, 0x01, 0x1a, 0xdb, 0xc9, 0x86, 0xbe, 0xa0, 0xcd, 0x9e, 0xc6, 0x63, 0x3f, 0xff, 0xdf,
	0xf3, 0xe6, 0x17, 0xf0, 0x24, 0x24, 0x9c, 0x5e, 0x61, 0x49, 0xaf, 0x88, 0xf0, 0x16, 0xc6, 0x6e,
	0xca, 0x99, 0x64, 0xf6, 0xee, 0x28, 0x19, 0x25, 0xf4, 0x82, 0xba, 0x0b, 0x4b, 0xd5, 0xc7, 0x11,
	0x63, 0xd1, 0x90, 0x78, 0xca, 0xa4, 0x3f, 0xba, 0xf0, 0x70, 0x32, 0xd6, 0xf6, 0xd5, 0xbd, 0x88,
	0x45, 0x4c, 0x0d, 0xbd, 0x6c, 0x64, 0x66, 0x9d, 0xdb, 0x02, 0x49, 0x63, 0x22, 0x24, 0x8e, 0x53,
	0x63, 0x50, 0x0b, 0x98, 0x88, 0x99, 0xf0, 0xfa, 0x58, 0x10, 0xef, 0xea, 0x59, 0x9f, 0x48, 0xfc,
	0xcc, 0x0b, 0x18, 0x4d, 0xf4, 0x3a, 0xfc, 0x3d, 0x0f, 0x76, 0xce, 0x39, 0x4e, 0x53, 0x12, 0x76,
	0x99, 0xa0, 0x92, 0xb2, 0xc4, 0x7e, 0x02, 0xf2, 0x34, 0xac, 0x58, 0xfb, 0xd6, 0x61, 0xb1, 0xb1,
	0x35, 0x9d, 0x38, 0xc5, 0x31, 0x8e, 0x87, 0x9f, 0x42, 0x1a, 0x42, 0x94, 0xa7, 0xa1, 0x1d, 0x80,
	0x75, 0x1c, 0x86, 0x9c, 0x08, 0x51, 0xc9, 0x2b, 0x9b, 0xd6, 0xcb, 0x89, 0x93, 0xfb, 0x6b, 0xe2,
	0x78, 0x11, 0x95, 0x83, 0x51, 0xdf, 0x0d, 0x58, 0xec, 0x9d, 0x25, 0x67, 0x09, 0x6d, 0x52, 0x2f,
	0x18, 0x60, 0x9a, 0x78, 0x72, 0x9c, 0x12, 0xe1, 0x9e, 0x4a, 0x4e, 0x93, 0xa8, 0x1e, 0x04, 0x75,
	0x2d, 0x9f, 0x4e, 0x9c, 0x6d, 0x8d, 0x36, 0x3c, 0x88, 0x66, 0x64, 0xbb, 0x0d, 0x36, 0x84, 0xc4,
	0x5c, 0xfa, 0x58, 0x56, 0x56, 0xf6, 0xad, 0xc3, 0xd2, 0x51, 0xd5, 0xd5, 0xb9, 0xba, 0xb3, 0x5c,
	0xdd, 0xde, 0x2c, 0xd7, 0xc6, 0xa3, 0x2c, 0x82, 0xe9, 0xc4, 0xd9, 0xd1, 0xb8, 0x99, 0x12, 0xa2,
	0x75, 0x35, 0xac, 0x4b, 0xbb, 0x05, 0x36, 0x52, 0x93, 0x5f, 0x65, 0x55, 0xf1, 0xf6, 0xee, 0xf0,
	0xea, 0xc9, 0xf8, 0x36, 0x69, 0xa6, 0x81, 0x68, 0x2e, 0x87, 0x7f, 0xe4, 0x41, 0xa1, 0xcb, 0xd8,
	0xd0, 0x1e, 0x80, 0x1d, 0x1c, 0x04, 0x24, 0x95, 0x24, 0xf4, 0xb1, 0x10, 0x44, 0x8a, 0x8a, 0xb5,
	0xbf, 0x72, 0x58, 0x3a, 0x72, 0xdc, 0x7b, 0x9a, 0xeb, 0x66, 0x1a, 0xb7, 0x9e, 0xd9, 0x35, 0x6a,
	0xc6, 0xcb, 0xbb, 0x26, 0xfd, 0xff, 0x52, 0x20, 0xda, 0x9e, 0xcd, 0x28, 0x73, 0x51, 0xfd, 0xc7,
	0x02, 0xab, 0x6a, 0x68, 0x1f, 0x80, 0xd5, 0x90, 0x24, 0x2c, 0x36, 0xed, 0x29, 0x4f, 0x27, 0xce,
	0xa6, 0x86, 0xa8, 0x69, 0x88, 0xf4, 0xb2, 0xfd, 0x39, 0x28, 0x64, 0x45, 0x57, 0x1d, 0xda, 0x3e,
	0xaa, 0xdd, 0x1b, 0x90, 0x22, 0xf6, 0xc6, 0x29, 0x69, 0xec, 0x4c, 0x27, 0x4e, 0x49, 0x63, 0x32,
	0x15, 0x44, 0x4a, 0x6c, 0x5f, 0x82, 0x2d, 0x89, 0x79, 0x44, 0xa4, 0xff, 0x82, 0xd0, 0x68, 0xa0,
	0x3b, 0x51, 0x6c, 0x34, 0x4d, 0xbf, 0x0f, 0x16, 0xfa, 0x6d, 0xb6, 0x99, 0xfe, 0x7c, 0x24, 0xc2,
	0x4b, 0xd3, 0xf3, 0x63, 0x12, 0x4c, 0x27, 0xce, 0x9e, 0x61, 0x2f, 0xc2, 0x20, 0xda, 0xd4, 0xff,
	0xe7, 0xfa, 0xf7, 0xc7, 0x3c, 0x58, 0x3f, 0x1d, 0xf5, 0xd3, 0xac, 0xb2, 0x97, 0x0f, 0x55, 0x16,
	0xde, 0x9b, 0x88, 0x91, 0xbd, 0x65, 0x71, 0x7f, 0x5a, 0xba, 0xb8, 0xe7, 0x60, 0xcd, 0x14, 0x44,
	0x1f, 0x80, 0xcf, 0x96, 0x2e, 0xc8, 0x96, 0xc6, 0xce, 0x2a, 0x61, 0x70, 0xf0, 0x3b, 0x50, 0xec,
	0x72, 0x1a, 0x90, 0x63, 0x2c, 0xf1, 0x1b, 0x47, 0x73, 0x00, 0x56, 0xd3, 0x4c, 0xa4, 0x82, 0x59,
	0x59, 0xb4, 0x53, 0xd3, 0x10, 0xe9, 0x65, 0xf8, 0xb3, 0x05, 0x4a, 0x67, 0x82, 0xf0, 0x63, 0xa2,
	0xb6, 0xf2, 0x32, 0xd9, 0xe2, 0x98, 0x8d, 0x92, 0xb7, 0xc9, 0xb6, 0x95, 0xc8, 0xd7, 0xd9, 0x6a,
	0x0a, 0x44, 0x06, 0x07, 0x7f, 0x2b, 0x80, 0xb5, 0x2e, 0xe6, 0x38, 0x16, 0x76, 0x03, 0x14, 0xb2,
	0x0e, 0xaa, 0x50, 0x4a, 0x47, 0x8f, 0x1f, 0x3c, 0x3f, 0x8d, 0x5d, 0xd3, 0xdc, 0xd2, 0xec, 0x7c,
	0xb2, 0x21, 0x44, 0x4a, 0x6b, 0x7f, 0x03, 0x36, 0x84, 0xde, 0x08, 0xd9, 0xc5, 0x94, 0xed, 0x96,
	0xf7, 0xff, 0x6f, 0xb7, 0xdc, 0xb9, 0x34, 0x8c, 0x16, 0xa2, 0x39, 0xc6, 0x1e, 0x81, 0x77, 0xb2,
	0x8b, 0xd3, 0x1f, 0xa6, 0xd2, 0x8f, 0x69, 0x22, 0xfd, 0x0b, 0x42, 0xcc, 0x21, 0xf8, 0x72, 0xe9,
	0x9e, 0x57, 0xb4, 0x9f, 0x3b, 0x40, 0x88, 0xb6, 0xb3, 0xb9, 0x93, 0x54, 0x7e, 0x4d, 0x13, 0xd9,
	0x24, 0xc4, 0xfe, 0x01, 0xec, 0xce, 0xad, 0x38, 0x09, 0x09, 0x89, 0x95, 0xe3, 0x82, 0x72, 0x7c,
	0xb2, 0xb4, 0xe3, 0xea, 0x2d, 0xc7, 0xaf, 0x91, 0x10, 0x95, 0x8d, 0x6b, 0xa4, 0xe6, 0x32, 0xe7,
	0xbf, 0x5a, 0xe0, 0xbd, 0x3e, 0xe3, 0x9c, 0xbd, 0xa0, 0x49, 0x94, 0x19, 0xf9, 0x1c, 0x4b, 0xe2,
	0xa7, 0x84, 0xfb, 0x03, 0x36, 0xe2, 0xea, 0xf6, 0x2c, 0x36, 0x7a, 0x4b, 0x47, 0x01, 0x4d, 0x14,
	0x0f, 0xa3, 0x21, 0x7a, 0x34, 0x5f, 0x6d, 0x12, 0x82, 0xb0, 0x24, 0x5d, 0xc2, 0x9f, 0xb3, 0x11,
	0x7f, 0xfa, 0x01, 0x28, 0xce, 0x6f, 0x2b, 0x7b, 0x03, 0x14, 0x10, 0xc1, 0xc3, 0x72, 0xce, 0xde,
	0x02, 0xc5, 0x56, 0x8c, 0x23, 0x9a, 0x60, 0x3e, 0x2e, 0x5b, 0x4f, 0x3f, 0x01, 0x9b, 0xb3, 0x47,
	0x4c, 0x19, 0xee, 0x81, 0x72, 0xb7, 0x73, 0xda, 0xea, 0xb5, 0x3a, 0x6d, 0xff, 0xac, 0xfd, 0x55,
	0xbb, 0x73, 0xde, 0x2e, 0xe7, 0x32, 0xf9, 0x49, 0xa7, 0xfd, 0x45, 0xd9, 0xb2, 0x8b, 0x60, 0xf5,
	0xf4, 0x79, 0x07, 0xf5, 0xca, 0xf9, 0x46, 0xf3, 0xe5, 0x75, 0xcd, 0x7a, 0x75, 0x5d, 0xb3, 0xfe,
	0xbe, 0xae, 0x59, 0xbf, 0xdc, 0xd4, 0x72, 0xaf, 0x6e, 0x6a, 0xb9, 0x3f, 0x6f, 0x6a, 0xb9, 0x6f,
	0x3f, 0x7c, 0xf0, 0x55, 0xfb, 0x7e, 0xf1, 0x59, 0xd7, 0xb9, 0xf6, 0xd7, 0xd4, 0x6b, 0xf2, 0xf1,
	0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x06, 0xee, 0x3a, 0x47, 0xfe, 0x07, 0x00, 0x00,
}

func (m *WrappedPosition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WrappedPosition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WrappedPosition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Position.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDerivatives(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.StartAt.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDerivatives(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Address.Size()
		i -= size
		if _, err := m.Address.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDerivatives(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintDerivatives(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Pool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AcceptedAssets) > 0 {
		for iNdEx := len(m.AcceptedAssets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AcceptedAssets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDerivatives(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Pool_Asset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pool_Asset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pool_Asset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TargetWeight.Size()
		i -= size
		if _, err := m.TargetWeight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDerivatives(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Type != 0 {
		i = encodeVarintDerivatives(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintDerivatives(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Subpool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Subpool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Subpool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AcceptedAssets) > 0 {
		for iNdEx := len(m.AcceptedAssets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AcceptedAssets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDerivatives(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Subpool_Asset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Subpool_Asset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Subpool_Asset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Weight.Size()
		i -= size
		if _, err := m.Weight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDerivatives(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintDerivatives(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PriceData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PriceData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PriceData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Price != 0 {
		i = encodeVarintDerivatives(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintDerivatives(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserDeposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserDeposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserDeposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDerivatives(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintDerivatives(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.BorrowingFeeRatePerHour.Size()
		i -= size
		if _, err := m.BorrowingFeeRatePerHour.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDerivatives(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.BaseLptRedeemFee.Size()
		i -= size
		if _, err := m.BaseLptRedeemFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDerivatives(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.BaseLptMintFee.Size()
		i -= size
		if _, err := m.BaseLptMintFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDerivatives(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Subpools) > 0 {
		for iNdEx := len(m.Subpools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Subpools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDerivatives(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Pool.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDerivatives(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintDerivatives(dAtA []byte, offset int, v uint64) int {
	offset -= sovDerivatives(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WrappedPosition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDerivatives(uint64(l))
	}
	l = m.Address.Size()
	n += 1 + l + sovDerivatives(uint64(l))
	l = m.StartAt.Size()
	n += 1 + l + sovDerivatives(uint64(l))
	l = m.Position.Size()
	n += 1 + l + sovDerivatives(uint64(l))
	return n
}

func (m *Pool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AcceptedAssets) > 0 {
		for _, e := range m.AcceptedAssets {
			l = e.Size()
			n += 1 + l + sovDerivatives(uint64(l))
		}
	}
	return n
}

func (m *Pool_Asset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovDerivatives(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovDerivatives(uint64(m.Type))
	}
	l = m.TargetWeight.Size()
	n += 1 + l + sovDerivatives(uint64(l))
	return n
}

func (m *Subpool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AcceptedAssets) > 0 {
		for _, e := range m.AcceptedAssets {
			l = e.Size()
			n += 1 + l + sovDerivatives(uint64(l))
		}
	}
	return n
}

func (m *Subpool_Asset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovDerivatives(uint64(l))
	}
	l = m.Weight.Size()
	n += 1 + l + sovDerivatives(uint64(l))
	return n
}

func (m *PriceData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovDerivatives(uint64(l))
	}
	if m.Price != 0 {
		n += 1 + sovDerivatives(uint64(m.Price))
	}
	return n
}

func (m *UserDeposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovDerivatives(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovDerivatives(uint64(l))
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Pool.Size()
	n += 1 + l + sovDerivatives(uint64(l))
	if len(m.Subpools) > 0 {
		for _, e := range m.Subpools {
			l = e.Size()
			n += 1 + l + sovDerivatives(uint64(l))
		}
	}
	l = m.BaseLptMintFee.Size()
	n += 1 + l + sovDerivatives(uint64(l))
	l = m.BaseLptRedeemFee.Size()
	n += 1 + l + sovDerivatives(uint64(l))
	l = m.BorrowingFeeRatePerHour.Size()
	n += 1 + l + sovDerivatives(uint64(l))
	return n
}

func sovDerivatives(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDerivatives(x uint64) (n int) {
	return sovDerivatives(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WrappedPosition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDerivatives
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WrappedPosition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WrappedPosition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StartAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDerivatives(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDerivatives
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDerivatives
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptedAssets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AcceptedAssets = append(m.AcceptedAssets, Pool_Asset{})
			if err := m.AcceptedAssets[len(m.AcceptedAssets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDerivatives(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDerivatives
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pool_Asset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDerivatives
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Asset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Asset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= AssetType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetWeight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TargetWeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDerivatives(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDerivatives
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Subpool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDerivatives
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Subpool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Subpool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptedAssets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AcceptedAssets = append(m.AcceptedAssets, Subpool_Asset{})
			if err := m.AcceptedAssets[len(m.AcceptedAssets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDerivatives(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDerivatives
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Subpool_Asset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDerivatives
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Asset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Asset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Weight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDerivatives(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDerivatives
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PriceData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDerivatives
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PriceData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PriceData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDerivatives(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDerivatives
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserDeposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDerivatives
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserDeposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserDeposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDerivatives(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDerivatives
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDerivatives
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subpools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subpools = append(m.Subpools, Subpool{})
			if err := m.Subpools[len(m.Subpools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseLptMintFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BaseLptMintFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseLptRedeemFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BaseLptRedeemFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowingFeeRatePerHour", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDerivatives
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDerivatives
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BorrowingFeeRatePerHour.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDerivatives(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDerivatives
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDerivatives(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDerivatives
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDerivatives
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDerivatives
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDerivatives
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDerivatives
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDerivatives        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDerivatives          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDerivatives = fmt.Errorf("proto: unexpected end of group")
)
