// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: derivatives/perpetual_futures.proto

package types

import (
	fmt "fmt"
	github_com_UnUniFi_chain_types "github.com/UnUniFi/chain/types"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PerpetualFuturesParams struct {
	CommissionRate                              github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=commission_rate,json=commissionRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"commission_rate" yaml:"commission_rate"`
	MarginMaintenanceRate                       github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=margin_maintenance_rate,json=marginMaintenanceRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"margin_maintenance_rate" yaml:"margin_maintenance_rate"`
	ImaginaryFundingRateProportionalCoefficient github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=imaginary_funding_rate_proportional_coefficient,json=imaginaryFundingRateProportionalCoefficient,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"imaginary_funding_rate_proportional_coefficient" yaml:"imaginary_funding_rate_proportonal_coefficient"`
	Markets                                     []*Market                              `protobuf:"bytes,4,rep,name=markets,proto3" json:"markets,omitempty" yaml:"markets"`
	MaxLeverage                                 uint32                                 `protobuf:"varint,5,opt,name=max_leverage,json=maxLeverage,proto3" json:"max_leverage,omitempty" yaml:"max_leverage"`
}

func (m *PerpetualFuturesParams) Reset()         { *m = PerpetualFuturesParams{} }
func (m *PerpetualFuturesParams) String() string { return proto.CompactTextString(m) }
func (*PerpetualFuturesParams) ProtoMessage()    {}
func (*PerpetualFuturesParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_8782b9e89770133d, []int{0}
}
func (m *PerpetualFuturesParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PerpetualFuturesParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PerpetualFuturesParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PerpetualFuturesParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PerpetualFuturesParams.Merge(m, src)
}
func (m *PerpetualFuturesParams) XXX_Size() int {
	return m.Size()
}
func (m *PerpetualFuturesParams) XXX_DiscardUnknown() {
	xxx_messageInfo_PerpetualFuturesParams.DiscardUnknown(m)
}

var xxx_messageInfo_PerpetualFuturesParams proto.InternalMessageInfo

func (m *PerpetualFuturesParams) GetMarkets() []*Market {
	if m != nil {
		return m.Markets
	}
	return nil
}

func (m *PerpetualFuturesParams) GetMaxLeverage() uint32 {
	if m != nil {
		return m.MaxLeverage
	}
	return 0
}

type PerpetualFuturesPosition struct {
	Id               string                                          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
	Market           Market                                          `protobuf:"bytes,2,opt,name=market,proto3" json:"market" yaml:"market"`
	Address          github_com_UnUniFi_chain_types.StringAccAddress `protobuf:"bytes,3,opt,name=address,proto3,customtype=github.com/UnUniFi/chain/types.StringAccAddress" json:"address" yaml:"address"`
	OpenedAt         time.Time                                       `protobuf:"bytes,4,opt,name=opened_at,json=openedAt,proto3,stdtime" json:"opened_at" yaml:"opened_at"`
	OpenedHeight     uint64                                          `protobuf:"varint,5,opt,name=opened_height,json=openedHeight,proto3" json:"opened_height,omitempty" yaml:"opened_height"`
	OpenedBaseRate   github_com_cosmos_cosmos_sdk_types.Dec          `protobuf:"bytes,6,opt,name=opened_base_rate,json=openedBaseRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"opened_base_rate" yaml:"opened_base_rate"`
	OpenedQuoteRate  github_com_cosmos_cosmos_sdk_types.Dec          `protobuf:"bytes,7,opt,name=opened_quote_rate,json=openedQuoteRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"opened_quote_rate" yaml:"opened_quote_rate"`
	RemainingMargin  types.Coin                                      `protobuf:"bytes,8,opt,name=remaining_margin,json=remainingMargin,proto3" json:"remaining_margin" yaml:"remaining_margin"`
	LastLeviedAt     time.Time                                       `protobuf:"bytes,9,opt,name=last_levied_at,json=lastLeviedAt,proto3,stdtime" json:"last_levied_at" yaml:"last_levied_at"`
	PositionInstance PerpetualFuturesPositionInstance                `protobuf:"bytes,10,opt,name=position_instance,json=positionInstance,proto3" json:"position_instance" yaml:"position_instance"`
}

func (m *PerpetualFuturesPosition) Reset()         { *m = PerpetualFuturesPosition{} }
func (m *PerpetualFuturesPosition) String() string { return proto.CompactTextString(m) }
func (*PerpetualFuturesPosition) ProtoMessage()    {}
func (*PerpetualFuturesPosition) Descriptor() ([]byte, []int) {
	return fileDescriptor_8782b9e89770133d, []int{1}
}
func (m *PerpetualFuturesPosition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PerpetualFuturesPosition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PerpetualFuturesPosition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PerpetualFuturesPosition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PerpetualFuturesPosition.Merge(m, src)
}
func (m *PerpetualFuturesPosition) XXX_Size() int {
	return m.Size()
}
func (m *PerpetualFuturesPosition) XXX_DiscardUnknown() {
	xxx_messageInfo_PerpetualFuturesPosition.DiscardUnknown(m)
}

var xxx_messageInfo_PerpetualFuturesPosition proto.InternalMessageInfo

func (m *PerpetualFuturesPosition) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PerpetualFuturesPosition) GetMarket() Market {
	if m != nil {
		return m.Market
	}
	return Market{}
}

func (m *PerpetualFuturesPosition) GetOpenedAt() time.Time {
	if m != nil {
		return m.OpenedAt
	}
	return time.Time{}
}

func (m *PerpetualFuturesPosition) GetOpenedHeight() uint64 {
	if m != nil {
		return m.OpenedHeight
	}
	return 0
}

func (m *PerpetualFuturesPosition) GetRemainingMargin() types.Coin {
	if m != nil {
		return m.RemainingMargin
	}
	return types.Coin{}
}

func (m *PerpetualFuturesPosition) GetLastLeviedAt() time.Time {
	if m != nil {
		return m.LastLeviedAt
	}
	return time.Time{}
}

func (m *PerpetualFuturesPosition) GetPositionInstance() PerpetualFuturesPositionInstance {
	if m != nil {
		return m.PositionInstance
	}
	return PerpetualFuturesPositionInstance{}
}

type PerpetualFuturesPositionInstance struct {
	PositionType PositionType                           `protobuf:"varint,1,opt,name=position_type,json=positionType,proto3,enum=ununifi.derivatives.PositionType" json:"position_type,omitempty" yaml:"position_type"`
	Size_        github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=size,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"size" yaml:"size"`
	// Use micro level size in the backend logic to be consistent with the scale of the coin amount
	// and price information.
	SizeInMicro *github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=size_in_micro,json=sizeInMicro,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"size_in_micro,omitempty" yaml:"size_in_micro"`
	Leverage    uint32                                  `protobuf:"varint,4,opt,name=leverage,proto3" json:"leverage,omitempty" yaml:"leverage"`
}

func (m *PerpetualFuturesPositionInstance) Reset()         { *m = PerpetualFuturesPositionInstance{} }
func (m *PerpetualFuturesPositionInstance) String() string { return proto.CompactTextString(m) }
func (*PerpetualFuturesPositionInstance) ProtoMessage()    {}
func (*PerpetualFuturesPositionInstance) Descriptor() ([]byte, []int) {
	return fileDescriptor_8782b9e89770133d, []int{2}
}
func (m *PerpetualFuturesPositionInstance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PerpetualFuturesPositionInstance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PerpetualFuturesPositionInstance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PerpetualFuturesPositionInstance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PerpetualFuturesPositionInstance.Merge(m, src)
}
func (m *PerpetualFuturesPositionInstance) XXX_Size() int {
	return m.Size()
}
func (m *PerpetualFuturesPositionInstance) XXX_DiscardUnknown() {
	xxx_messageInfo_PerpetualFuturesPositionInstance.DiscardUnknown(m)
}

var xxx_messageInfo_PerpetualFuturesPositionInstance proto.InternalMessageInfo

func (m *PerpetualFuturesPositionInstance) GetPositionType() PositionType {
	if m != nil {
		return m.PositionType
	}
	return PositionType_POSITION_UNKNOWN
}

func (m *PerpetualFuturesPositionInstance) GetLeverage() uint32 {
	if m != nil {
		return m.Leverage
	}
	return 0
}

type PerpetualFuturesNetPositionOfMarket struct {
	Market              Market                                 `protobuf:"bytes,1,opt,name=market,proto3" json:"market" yaml:"market"`
	PositionSizeInMicro github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=position_size_in_micro,json=positionSizeInMicro,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"position_size_in_micro" yaml:"position_size"`
}

func (m *PerpetualFuturesNetPositionOfMarket) Reset()         { *m = PerpetualFuturesNetPositionOfMarket{} }
func (m *PerpetualFuturesNetPositionOfMarket) String() string { return proto.CompactTextString(m) }
func (*PerpetualFuturesNetPositionOfMarket) ProtoMessage()    {}
func (*PerpetualFuturesNetPositionOfMarket) Descriptor() ([]byte, []int) {
	return fileDescriptor_8782b9e89770133d, []int{3}
}
func (m *PerpetualFuturesNetPositionOfMarket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PerpetualFuturesNetPositionOfMarket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PerpetualFuturesNetPositionOfMarket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PerpetualFuturesNetPositionOfMarket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PerpetualFuturesNetPositionOfMarket.Merge(m, src)
}
func (m *PerpetualFuturesNetPositionOfMarket) XXX_Size() int {
	return m.Size()
}
func (m *PerpetualFuturesNetPositionOfMarket) XXX_DiscardUnknown() {
	xxx_messageInfo_PerpetualFuturesNetPositionOfMarket.DiscardUnknown(m)
}

var xxx_messageInfo_PerpetualFuturesNetPositionOfMarket proto.InternalMessageInfo

func (m *PerpetualFuturesNetPositionOfMarket) GetMarket() Market {
	if m != nil {
		return m.Market
	}
	return Market{}
}

type EventPerpetualFuturesPositionOpened struct {
	Sender     string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	PositionId string `protobuf:"bytes,2,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
}

func (m *EventPerpetualFuturesPositionOpened) Reset()         { *m = EventPerpetualFuturesPositionOpened{} }
func (m *EventPerpetualFuturesPositionOpened) String() string { return proto.CompactTextString(m) }
func (*EventPerpetualFuturesPositionOpened) ProtoMessage()    {}
func (*EventPerpetualFuturesPositionOpened) Descriptor() ([]byte, []int) {
	return fileDescriptor_8782b9e89770133d, []int{4}
}
func (m *EventPerpetualFuturesPositionOpened) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPerpetualFuturesPositionOpened) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPerpetualFuturesPositionOpened.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPerpetualFuturesPositionOpened) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPerpetualFuturesPositionOpened.Merge(m, src)
}
func (m *EventPerpetualFuturesPositionOpened) XXX_Size() int {
	return m.Size()
}
func (m *EventPerpetualFuturesPositionOpened) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPerpetualFuturesPositionOpened.DiscardUnknown(m)
}

var xxx_messageInfo_EventPerpetualFuturesPositionOpened proto.InternalMessageInfo

func (m *EventPerpetualFuturesPositionOpened) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventPerpetualFuturesPositionOpened) GetPositionId() string {
	if m != nil {
		return m.PositionId
	}
	return ""
}

type EventPerpetualFuturesPositionClosed struct {
	Sender      string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	PositionId  string `protobuf:"bytes,2,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
	FeeAmount   string `protobuf:"bytes,3,opt,name=fee_amount,json=feeAmount,proto3" json:"fee_amount,omitempty"`
	TradeAmount string `protobuf:"bytes,4,opt,name=trade_amount,json=tradeAmount,proto3" json:"trade_amount,omitempty"`
}

func (m *EventPerpetualFuturesPositionClosed) Reset()         { *m = EventPerpetualFuturesPositionClosed{} }
func (m *EventPerpetualFuturesPositionClosed) String() string { return proto.CompactTextString(m) }
func (*EventPerpetualFuturesPositionClosed) ProtoMessage()    {}
func (*EventPerpetualFuturesPositionClosed) Descriptor() ([]byte, []int) {
	return fileDescriptor_8782b9e89770133d, []int{5}
}
func (m *EventPerpetualFuturesPositionClosed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPerpetualFuturesPositionClosed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPerpetualFuturesPositionClosed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPerpetualFuturesPositionClosed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPerpetualFuturesPositionClosed.Merge(m, src)
}
func (m *EventPerpetualFuturesPositionClosed) XXX_Size() int {
	return m.Size()
}
func (m *EventPerpetualFuturesPositionClosed) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPerpetualFuturesPositionClosed.DiscardUnknown(m)
}

var xxx_messageInfo_EventPerpetualFuturesPositionClosed proto.InternalMessageInfo

func (m *EventPerpetualFuturesPositionClosed) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventPerpetualFuturesPositionClosed) GetPositionId() string {
	if m != nil {
		return m.PositionId
	}
	return ""
}

func (m *EventPerpetualFuturesPositionClosed) GetFeeAmount() string {
	if m != nil {
		return m.FeeAmount
	}
	return ""
}

func (m *EventPerpetualFuturesPositionClosed) GetTradeAmount() string {
	if m != nil {
		return m.TradeAmount
	}
	return ""
}

type EventPerpetualFuturesPositionLiquidated struct {
	RewardRecipient string `protobuf:"bytes,1,opt,name=reward_recipient,json=rewardRecipient,proto3" json:"reward_recipient,omitempty"`
	PositionId      string `protobuf:"bytes,2,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
	RemainingMargin string `protobuf:"bytes,3,opt,name=remaining_margin,json=remainingMargin,proto3" json:"remaining_margin,omitempty"`
	RewardAmount    string `protobuf:"bytes,4,opt,name=reward_amount,json=rewardAmount,proto3" json:"reward_amount,omitempty"`
}

func (m *EventPerpetualFuturesPositionLiquidated) Reset() {
	*m = EventPerpetualFuturesPositionLiquidated{}
}
func (m *EventPerpetualFuturesPositionLiquidated) String() string { return proto.CompactTextString(m) }
func (*EventPerpetualFuturesPositionLiquidated) ProtoMessage()    {}
func (*EventPerpetualFuturesPositionLiquidated) Descriptor() ([]byte, []int) {
	return fileDescriptor_8782b9e89770133d, []int{6}
}
func (m *EventPerpetualFuturesPositionLiquidated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPerpetualFuturesPositionLiquidated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPerpetualFuturesPositionLiquidated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPerpetualFuturesPositionLiquidated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPerpetualFuturesPositionLiquidated.Merge(m, src)
}
func (m *EventPerpetualFuturesPositionLiquidated) XXX_Size() int {
	return m.Size()
}
func (m *EventPerpetualFuturesPositionLiquidated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPerpetualFuturesPositionLiquidated.DiscardUnknown(m)
}

var xxx_messageInfo_EventPerpetualFuturesPositionLiquidated proto.InternalMessageInfo

func (m *EventPerpetualFuturesPositionLiquidated) GetRewardRecipient() string {
	if m != nil {
		return m.RewardRecipient
	}
	return ""
}

func (m *EventPerpetualFuturesPositionLiquidated) GetPositionId() string {
	if m != nil {
		return m.PositionId
	}
	return ""
}

func (m *EventPerpetualFuturesPositionLiquidated) GetRemainingMargin() string {
	if m != nil {
		return m.RemainingMargin
	}
	return ""
}

func (m *EventPerpetualFuturesPositionLiquidated) GetRewardAmount() string {
	if m != nil {
		return m.RewardAmount
	}
	return ""
}

type EventPerpetualFuturesPositionLevied struct {
	RewardRecipient string `protobuf:"bytes,1,opt,name=reward_recipient,json=rewardRecipient,proto3" json:"reward_recipient,omitempty"`
	PositionId      string `protobuf:"bytes,2,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
	RemainingMargin string `protobuf:"bytes,3,opt,name=remaining_margin,json=remainingMargin,proto3" json:"remaining_margin,omitempty"`
	RewardAmount    string `protobuf:"bytes,4,opt,name=reward_amount,json=rewardAmount,proto3" json:"reward_amount,omitempty"`
}

func (m *EventPerpetualFuturesPositionLevied) Reset()         { *m = EventPerpetualFuturesPositionLevied{} }
func (m *EventPerpetualFuturesPositionLevied) String() string { return proto.CompactTextString(m) }
func (*EventPerpetualFuturesPositionLevied) ProtoMessage()    {}
func (*EventPerpetualFuturesPositionLevied) Descriptor() ([]byte, []int) {
	return fileDescriptor_8782b9e89770133d, []int{7}
}
func (m *EventPerpetualFuturesPositionLevied) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPerpetualFuturesPositionLevied) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPerpetualFuturesPositionLevied.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPerpetualFuturesPositionLevied) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPerpetualFuturesPositionLevied.Merge(m, src)
}
func (m *EventPerpetualFuturesPositionLevied) XXX_Size() int {
	return m.Size()
}
func (m *EventPerpetualFuturesPositionLevied) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPerpetualFuturesPositionLevied.DiscardUnknown(m)
}

var xxx_messageInfo_EventPerpetualFuturesPositionLevied proto.InternalMessageInfo

func (m *EventPerpetualFuturesPositionLevied) GetRewardRecipient() string {
	if m != nil {
		return m.RewardRecipient
	}
	return ""
}

func (m *EventPerpetualFuturesPositionLevied) GetPositionId() string {
	if m != nil {
		return m.PositionId
	}
	return ""
}

func (m *EventPerpetualFuturesPositionLevied) GetRemainingMargin() string {
	if m != nil {
		return m.RemainingMargin
	}
	return ""
}

func (m *EventPerpetualFuturesPositionLevied) GetRewardAmount() string {
	if m != nil {
		return m.RewardAmount
	}
	return ""
}

func init() {
	proto.RegisterType((*PerpetualFuturesParams)(nil), "ununifi.derivatives.PerpetualFuturesParams")
	proto.RegisterType((*PerpetualFuturesPosition)(nil), "ununifi.derivatives.PerpetualFuturesPosition")
	proto.RegisterType((*PerpetualFuturesPositionInstance)(nil), "ununifi.derivatives.PerpetualFuturesPositionInstance")
	proto.RegisterType((*PerpetualFuturesNetPositionOfMarket)(nil), "ununifi.derivatives.PerpetualFuturesNetPositionOfMarket")
	proto.RegisterType((*EventPerpetualFuturesPositionOpened)(nil), "ununifi.derivatives.EventPerpetualFuturesPositionOpened")
	proto.RegisterType((*EventPerpetualFuturesPositionClosed)(nil), "ununifi.derivatives.EventPerpetualFuturesPositionClosed")
	proto.RegisterType((*EventPerpetualFuturesPositionLiquidated)(nil), "ununifi.derivatives.EventPerpetualFuturesPositionLiquidated")
	proto.RegisterType((*EventPerpetualFuturesPositionLevied)(nil), "ununifi.derivatives.EventPerpetualFuturesPositionLevied")
}

func init() {
	proto.RegisterFile("derivatives/perpetual_futures.proto", fileDescriptor_8782b9e89770133d)
}

var fileDescriptor_8782b9e89770133d = []byte{
	// 1145 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0x4f, 0x4f, 0xdc, 0x46,
	0x14, 0xc7, 0xb0, 0xe5, 0xcf, 0xec, 0x2e, 0x10, 0x13, 0x60, 0x43, 0xcb, 0x1a, 0x06, 0xa9, 0x25,
	0x6a, 0x6b, 0x2b, 0xa9, 0x72, 0x89, 0x94, 0x03, 0x4b, 0x8b, 0x42, 0x04, 0x0d, 0x99, 0x84, 0x4b,
	0x0f, 0x75, 0x07, 0x7b, 0xd6, 0x8c, 0xb2, 0x9e, 0x31, 0xf6, 0xec, 0x16, 0xda, 0x6b, 0x0f, 0x3d,
	0xe6, 0x23, 0xf4, 0xa3, 0xb4, 0x87, 0x4a, 0xb9, 0x54, 0xca, 0xb1, 0xea, 0x61, 0x5b, 0xc1, 0xb9,
	0x55, 0xb5, 0x9f, 0xa0, 0xf2, 0xcc, 0xd8, 0xbb, 0xde, 0x40, 0x36, 0x28, 0x97, 0x9e, 0xec, 0x79,
	0xf3, 0xde, 0xef, 0xfd, 0xde, 0x5f, 0x1b, 0x6c, 0xf8, 0x24, 0xa6, 0x1d, 0x2c, 0x68, 0x87, 0x24,
	0x4e, 0x44, 0xe2, 0x88, 0x88, 0x36, 0x6e, 0xb9, 0xcd, 0xb6, 0x68, 0xc7, 0x24, 0xb1, 0xa3, 0x98,
	0x0b, 0x6e, 0x2e, 0xb4, 0x59, 0x9b, 0xd1, 0x26, 0xb5, 0x07, 0x94, 0x57, 0x6e, 0x05, 0x9c, 0x07,
	0x2d, 0xe2, 0x48, 0x95, 0xa3, 0x76, 0xd3, 0xc1, 0xec, 0x4c, 0xe9, 0xaf, 0xdc, 0x0c, 0x78, 0xc0,
	0xe5, 0xab, 0x93, 0xbe, 0x69, 0xa9, 0x35, 0x6c, 0x20, 0x68, 0x48, 0x12, 0x81, 0xc3, 0x48, 0x2b,
	0xd4, 0x3d, 0x9e, 0x84, 0x3c, 0x71, 0x8e, 0x70, 0x42, 0x9c, 0xce, 0x9d, 0x23, 0x22, 0xf0, 0x1d,
	0xc7, 0xe3, 0x94, 0xe9, 0xfb, 0xd5, 0x41, 0xae, 0x03, 0xef, 0xea, 0x1a, 0xfe, 0x5d, 0x02, 0x4b,
	0x07, 0x59, 0x04, 0x3b, 0x2a, 0x80, 0x03, 0x1c, 0xe3, 0x30, 0x31, 0x4f, 0xc0, 0x9c, 0xc7, 0xc3,
	0x90, 0x26, 0x09, 0xe5, 0xcc, 0x8d, 0xb1, 0x20, 0x35, 0x63, 0xcd, 0xd8, 0x9c, 0x69, 0x3c, 0x7c,
	0xd9, 0xb5, 0xc6, 0xfe, 0xe8, 0x5a, 0x1f, 0x06, 0x54, 0x1c, 0xb7, 0x8f, 0x6c, 0x8f, 0x87, 0x8e,
	0x66, 0xa1, 0x1e, 0x9f, 0x26, 0xfe, 0x73, 0x47, 0x9c, 0x45, 0x24, 0xb1, 0x3f, 0x27, 0x5e, 0xaf,
	0x6b, 0x2d, 0x9d, 0xe1, 0xb0, 0x75, 0x1f, 0x0e, 0xc1, 0x41, 0x34, 0xdb, 0x97, 0x20, 0x2c, 0x88,
	0xf9, 0xa3, 0x01, 0x96, 0x43, 0x1c, 0x07, 0x94, 0xb9, 0x21, 0xa6, 0x4c, 0x10, 0x86, 0x99, 0x47,
	0x94, 0xef, 0x71, 0xe9, 0xfb, 0xe0, 0xda, 0xbe, 0xeb, 0xca, 0xf7, 0x15, 0xb0, 0x10, 0x2d, 0xaa,
	0x9b, 0xfd, 0xfe, 0x85, 0xa4, 0xf2, 0x9b, 0x01, 0x1c, 0x1a, 0xe2, 0x80, 0x32, 0x1c, 0x9f, 0xb9,
	0xcd, 0x36, 0xf3, 0x29, 0x0b, 0xa4, 0x89, 0x1b, 0xc5, 0x3c, 0xe2, 0xb1, 0xa0, 0x9c, 0xe1, 0x96,
	0xeb, 0x71, 0xd2, 0x6c, 0x52, 0x8f, 0x12, 0x26, 0x6a, 0x13, 0x92, 0x62, 0x70, 0x6d, 0x8a, 0xf7,
	0x14, 0xc5, 0x37, 0xbb, 0x1b, 0xf6, 0x06, 0xd1, 0xc7, 0xb9, 0xc1, 0x8e, 0xd2, 0x4f, 0x89, 0x1f,
	0x0c, 0x90, 0xdb, 0xee, 0x6b, 0x9b, 0xbb, 0x60, 0x2a, 0xc4, 0xf1, 0x73, 0x22, 0x92, 0x5a, 0x69,
	0x6d, 0x62, 0xb3, 0x7c, 0xf7, 0x7d, 0xfb, 0x92, 0x06, 0xb5, 0xf7, 0xa5, 0x4e, 0xc3, 0xec, 0x75,
	0xad, 0xd9, 0x3c, 0x71, 0xa9, 0x15, 0x44, 0x99, 0xbd, 0x79, 0x1f, 0x54, 0x42, 0x7c, 0xea, 0xb6,
	0x48, 0x87, 0xc4, 0x38, 0x20, 0xb5, 0xf7, 0xd6, 0x8c, 0xcd, 0x6a, 0x63, 0xb9, 0xd7, 0xb5, 0x16,
	0x32, 0x93, 0xfe, 0x2d, 0x44, 0xe5, 0x10, 0x9f, 0xee, 0x65, 0xa7, 0x9f, 0xa7, 0x40, 0xed, 0xb5,
	0x7e, 0xe3, 0x09, 0x4d, 0x09, 0x9b, 0xab, 0x60, 0x9c, 0xfa, 0xba, 0xc9, 0xaa, 0xbd, 0xae, 0x35,
	0xa3, 0xf3, 0xe2, 0x43, 0x34, 0x4e, 0x7d, 0xf3, 0x11, 0x98, 0x54, 0x14, 0x64, 0x2f, 0x8c, 0x88,
	0x60, 0x31, 0xad, 0x42, 0xaf, 0x6b, 0x55, 0x07, 0xa3, 0x80, 0x48, 0x23, 0x98, 0x1e, 0x98, 0xc2,
	0xbe, 0x1f, 0x93, 0x24, 0xd1, 0x55, 0xdb, 0xd5, 0x55, 0x73, 0x06, 0xaa, 0x76, 0xc8, 0x0e, 0x19,
	0xdd, 0xa1, 0x8e, 0x77, 0x8c, 0x29, 0xd3, 0x15, 0x7b, 0x2a, 0x62, 0xca, 0x82, 0x2d, 0xcf, 0xdb,
	0x52, 0xe6, 0xfd, 0x44, 0x69, 0x3c, 0x88, 0x32, 0x64, 0xf3, 0x10, 0xcc, 0xf0, 0x88, 0x30, 0xe2,
	0xbb, 0x58, 0xd4, 0x4a, 0x92, 0xf3, 0x8a, 0xad, 0x06, 0xda, 0xce, 0x06, 0xda, 0x7e, 0x96, 0x0d,
	0x74, 0xe3, 0x03, 0x4d, 0x79, 0x5e, 0xe1, 0xe5, 0xa6, 0xf0, 0xc5, 0x9f, 0x96, 0x81, 0xa6, 0xd5,
	0x79, 0x4b, 0x98, 0x0f, 0x40, 0x55, 0xdf, 0x1d, 0x13, 0x1a, 0x1c, 0x0b, 0x59, 0x80, 0x52, 0xa3,
	0xd6, 0xeb, 0x5a, 0x37, 0x0b, 0xa6, 0xea, 0x1a, 0xa2, 0x8a, 0x3a, 0x3f, 0x94, 0x47, 0x33, 0x01,
	0xf3, 0xfa, 0x3e, 0xdd, 0x19, 0x6a, 0xb8, 0x26, 0x0b, 0x39, 0x78, 0xfb, 0xce, 0x5d, 0x2e, 0xf8,
	0xcb, 0xf1, 0x20, 0x9a, 0x55, 0xa2, 0x06, 0x4e, 0xd4, 0x38, 0x75, 0xc0, 0x0d, 0xad, 0x74, 0xd2,
	0xe6, 0x42, 0x7b, 0x9d, 0x92, 0x5e, 0x1f, 0x5d, 0xdb, 0x6b, 0xad, 0xe0, 0xb5, 0x0f, 0x08, 0xd1,
	0x9c, 0x92, 0x3d, 0x49, 0x45, 0xd2, 0x2f, 0x01, 0xf3, 0x31, 0x49, 0x87, 0x3e, 0x1d, 0x27, 0x35,
	0xe9, 0xb5, 0x69, 0x59, 0x89, 0x5b, 0xb6, 0x42, 0xb7, 0x53, 0xd6, 0xb6, 0xde, 0x9c, 0xf6, 0x36,
	0xa7, 0xac, 0x61, 0xe9, 0x42, 0xe8, 0xe8, 0x86, 0x01, 0x20, 0x9a, 0xcb, 0x45, 0xfb, 0x52, 0x62,
	0x7a, 0x60, 0xb6, 0x85, 0x13, 0x91, 0x76, 0x3d, 0x55, 0xe5, 0x9e, 0x19, 0x59, 0xee, 0x75, 0xed,
	0x65, 0x51, 0x79, 0x29, 0xda, 0xab, 0x9a, 0x57, 0x52, 0xe1, 0x9e, 0x94, 0x6d, 0x09, 0xf3, 0x07,
	0x03, 0xdc, 0x88, 0xf4, 0xac, 0xb8, 0x94, 0x25, 0x22, 0x5d, 0x56, 0x35, 0x20, 0x1d, 0xdd, 0xbb,
	0x74, 0x16, 0xae, 0x9a, 0xb4, 0x5d, 0x6d, 0xdc, 0x58, 0xd3, 0x1c, 0x74, 0x46, 0x5f, 0x43, 0x87,
	0x68, 0x3e, 0x1a, 0xb2, 0x81, 0xff, 0x8e, 0x83, 0xb5, 0x51, 0xc0, 0xe6, 0x37, 0xa0, 0x9a, 0x83,
	0xa5, 0xa5, 0x93, 0x53, 0x3d, 0x7b, 0x77, 0xfd, 0x72, 0x9a, 0x5a, 0xf3, 0xd9, 0x59, 0x44, 0x06,
	0xdb, 0xb8, 0x80, 0x00, 0x51, 0x25, 0x1a, 0xd0, 0x33, 0x9f, 0x80, 0x52, 0x42, 0xbf, 0xcb, 0xbe,
	0x0b, 0x0f, 0xae, 0xdd, 0x44, 0x65, 0xe5, 0x23, 0xc5, 0x80, 0x48, 0x42, 0x99, 0x4d, 0x50, 0x4d,
	0x9f, 0x6e, 0xfa, 0x9d, 0xa0, 0x5e, 0xcc, 0xf5, 0x6a, 0x68, 0xbc, 0x25, 0xee, 0x2e, 0x13, 0x7d,
	0xee, 0x05, 0x20, 0x88, 0xca, 0xe9, 0x79, 0x97, 0xed, 0xa7, 0x27, 0xd3, 0x01, 0xd3, 0xf9, 0xf2,
	0x2c, 0xc9, 0xe5, 0xb9, 0xd0, 0xeb, 0x5a, 0x73, 0xba, 0x0f, 0xf2, 0xc5, 0x99, 0x2b, 0xc1, 0x7f,
	0x0c, 0xb0, 0x31, 0x9c, 0xf2, 0x2f, 0x89, 0xc8, 0xf2, 0xf6, 0xb8, 0xa9, 0x96, 0xde, 0xc0, 0x86,
	0x34, 0xde, 0x79, 0x43, 0x7e, 0x0f, 0x96, 0xf2, 0xfc, 0x17, 0xb3, 0xa2, 0x32, 0xbe, 0x73, 0x8d,
	0x8c, 0x17, 0x32, 0x53, 0x40, 0x85, 0x68, 0x21, 0x3b, 0x3f, 0xed, 0x67, 0x08, 0x7e, 0x0d, 0x36,
	0xbe, 0xe8, 0x10, 0x26, 0xae, 0xea, 0xb3, 0xc7, 0x72, 0xcc, 0xcd, 0x25, 0x30, 0x99, 0x10, 0xe6,
	0x93, 0x58, 0x7d, 0x34, 0x90, 0x3e, 0x99, 0x16, 0x28, 0xf7, 0x5b, 0xd9, 0x57, 0x84, 0x11, 0xc8,
	0x3b, 0xd9, 0x87, 0x3f, 0x19, 0x23, 0x1c, 0x6c, 0xb7, 0x78, 0xf2, 0x0e, 0x0e, 0xcc, 0x55, 0x00,
	0x9a, 0x84, 0xb8, 0x38, 0xe4, 0xed, 0xec, 0xc7, 0x00, 0xcd, 0x34, 0x09, 0xd9, 0x92, 0x02, 0x73,
	0x1d, 0x54, 0x44, 0x8c, 0xfd, 0x5c, 0xa1, 0x24, 0x15, 0xca, 0x52, 0xa6, 0x54, 0xe0, 0xaf, 0x06,
	0xf8, 0xe8, 0x8d, 0x14, 0xf7, 0xe8, 0x49, 0x9b, 0xfa, 0x58, 0x10, 0xdf, 0xbc, 0x9d, 0x6e, 0xb9,
	0x6f, 0x71, 0xec, 0xbb, 0x31, 0xf1, 0x68, 0x24, 0x7f, 0x46, 0x14, 0xe1, 0x39, 0x25, 0x47, 0x99,
	0x78, 0x34, 0xf3, 0xdb, 0x97, 0x6c, 0xcc, 0x89, 0x0c, 0xab, 0xb8, 0xf5, 0x36, 0x40, 0x55, 0xbb,
	0x2d, 0x84, 0x51, 0x51, 0x42, 0x1d, 0xc7, 0x2f, 0xa3, 0x52, 0xad, 0xf6, 0xdb, 0xff, 0x39, 0x86,
	0xc6, 0xce, 0xcb, 0xf3, 0xba, 0xf1, 0xea, 0xbc, 0x6e, 0xfc, 0x75, 0x5e, 0x37, 0x5e, 0x5c, 0xd4,
	0xc7, 0x5e, 0x5d, 0xd4, 0xc7, 0x7e, 0xbf, 0xa8, 0x8f, 0x7d, 0xf5, 0xc9, 0x95, 0xbf, 0x0b, 0xa7,
	0x83, 0x7f, 0xdb, 0x6a, 0x0e, 0x8e, 0x26, 0xe5, 0x67, 0xe0, 0xb3, 0xff, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x31, 0x15, 0x2d, 0xfe, 0x41, 0x0c, 0x00, 0x00,
}

func (m *PerpetualFuturesParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PerpetualFuturesParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PerpetualFuturesParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxLeverage != 0 {
		i = encodeVarintPerpetualFutures(dAtA, i, uint64(m.MaxLeverage))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Markets) > 0 {
		for iNdEx := len(m.Markets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Markets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPerpetualFutures(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size := m.ImaginaryFundingRateProportionalCoefficient.Size()
		i -= size
		if _, err := m.ImaginaryFundingRateProportionalCoefficient.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPerpetualFutures(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.MarginMaintenanceRate.Size()
		i -= size
		if _, err := m.MarginMaintenanceRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPerpetualFutures(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.CommissionRate.Size()
		i -= size
		if _, err := m.CommissionRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPerpetualFutures(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PerpetualFuturesPosition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PerpetualFuturesPosition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PerpetualFuturesPosition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PositionInstance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPerpetualFutures(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.LastLeviedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.LastLeviedAt):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintPerpetualFutures(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x4a
	{
		size, err := m.RemainingMargin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPerpetualFutures(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.OpenedQuoteRate.Size()
		i -= size
		if _, err := m.OpenedQuoteRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPerpetualFutures(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.OpenedBaseRate.Size()
		i -= size
		if _, err := m.OpenedBaseRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPerpetualFutures(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.OpenedHeight != 0 {
		i = encodeVarintPerpetualFutures(dAtA, i, uint64(m.OpenedHeight))
		i--
		dAtA[i] = 0x28
	}
	n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.OpenedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.OpenedAt):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintPerpetualFutures(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x22
	{
		size := m.Address.Size()
		i -= size
		if _, err := m.Address.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPerpetualFutures(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Market.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPerpetualFutures(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintPerpetualFutures(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PerpetualFuturesPositionInstance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PerpetualFuturesPositionInstance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PerpetualFuturesPositionInstance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Leverage != 0 {
		i = encodeVarintPerpetualFutures(dAtA, i, uint64(m.Leverage))
		i--
		dAtA[i] = 0x20
	}
	if m.SizeInMicro != nil {
		{
			size := m.SizeInMicro.Size()
			i -= size
			if _, err := m.SizeInMicro.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintPerpetualFutures(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.Size_.Size()
		i -= size
		if _, err := m.Size_.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPerpetualFutures(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.PositionType != 0 {
		i = encodeVarintPerpetualFutures(dAtA, i, uint64(m.PositionType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PerpetualFuturesNetPositionOfMarket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PerpetualFuturesNetPositionOfMarket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PerpetualFuturesNetPositionOfMarket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.PositionSizeInMicro.Size()
		i -= size
		if _, err := m.PositionSizeInMicro.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPerpetualFutures(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Market.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPerpetualFutures(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EventPerpetualFuturesPositionOpened) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPerpetualFuturesPositionOpened) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPerpetualFuturesPositionOpened) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PositionId) > 0 {
		i -= len(m.PositionId)
		copy(dAtA[i:], m.PositionId)
		i = encodeVarintPerpetualFutures(dAtA, i, uint64(len(m.PositionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintPerpetualFutures(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventPerpetualFuturesPositionClosed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPerpetualFuturesPositionClosed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPerpetualFuturesPositionClosed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TradeAmount) > 0 {
		i -= len(m.TradeAmount)
		copy(dAtA[i:], m.TradeAmount)
		i = encodeVarintPerpetualFutures(dAtA, i, uint64(len(m.TradeAmount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FeeAmount) > 0 {
		i -= len(m.FeeAmount)
		copy(dAtA[i:], m.FeeAmount)
		i = encodeVarintPerpetualFutures(dAtA, i, uint64(len(m.FeeAmount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PositionId) > 0 {
		i -= len(m.PositionId)
		copy(dAtA[i:], m.PositionId)
		i = encodeVarintPerpetualFutures(dAtA, i, uint64(len(m.PositionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintPerpetualFutures(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventPerpetualFuturesPositionLiquidated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPerpetualFuturesPositionLiquidated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPerpetualFuturesPositionLiquidated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardAmount) > 0 {
		i -= len(m.RewardAmount)
		copy(dAtA[i:], m.RewardAmount)
		i = encodeVarintPerpetualFutures(dAtA, i, uint64(len(m.RewardAmount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RemainingMargin) > 0 {
		i -= len(m.RemainingMargin)
		copy(dAtA[i:], m.RemainingMargin)
		i = encodeVarintPerpetualFutures(dAtA, i, uint64(len(m.RemainingMargin)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PositionId) > 0 {
		i -= len(m.PositionId)
		copy(dAtA[i:], m.PositionId)
		i = encodeVarintPerpetualFutures(dAtA, i, uint64(len(m.PositionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RewardRecipient) > 0 {
		i -= len(m.RewardRecipient)
		copy(dAtA[i:], m.RewardRecipient)
		i = encodeVarintPerpetualFutures(dAtA, i, uint64(len(m.RewardRecipient)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventPerpetualFuturesPositionLevied) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPerpetualFuturesPositionLevied) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPerpetualFuturesPositionLevied) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardAmount) > 0 {
		i -= len(m.RewardAmount)
		copy(dAtA[i:], m.RewardAmount)
		i = encodeVarintPerpetualFutures(dAtA, i, uint64(len(m.RewardAmount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RemainingMargin) > 0 {
		i -= len(m.RemainingMargin)
		copy(dAtA[i:], m.RemainingMargin)
		i = encodeVarintPerpetualFutures(dAtA, i, uint64(len(m.RemainingMargin)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PositionId) > 0 {
		i -= len(m.PositionId)
		copy(dAtA[i:], m.PositionId)
		i = encodeVarintPerpetualFutures(dAtA, i, uint64(len(m.PositionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RewardRecipient) > 0 {
		i -= len(m.RewardRecipient)
		copy(dAtA[i:], m.RewardRecipient)
		i = encodeVarintPerpetualFutures(dAtA, i, uint64(len(m.RewardRecipient)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPerpetualFutures(dAtA []byte, offset int, v uint64) int {
	offset -= sovPerpetualFutures(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PerpetualFuturesParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommissionRate.Size()
	n += 1 + l + sovPerpetualFutures(uint64(l))
	l = m.MarginMaintenanceRate.Size()
	n += 1 + l + sovPerpetualFutures(uint64(l))
	l = m.ImaginaryFundingRateProportionalCoefficient.Size()
	n += 1 + l + sovPerpetualFutures(uint64(l))
	if len(m.Markets) > 0 {
		for _, e := range m.Markets {
			l = e.Size()
			n += 1 + l + sovPerpetualFutures(uint64(l))
		}
	}
	if m.MaxLeverage != 0 {
		n += 1 + sovPerpetualFutures(uint64(m.MaxLeverage))
	}
	return n
}

func (m *PerpetualFuturesPosition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPerpetualFutures(uint64(l))
	}
	l = m.Market.Size()
	n += 1 + l + sovPerpetualFutures(uint64(l))
	l = m.Address.Size()
	n += 1 + l + sovPerpetualFutures(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.OpenedAt)
	n += 1 + l + sovPerpetualFutures(uint64(l))
	if m.OpenedHeight != 0 {
		n += 1 + sovPerpetualFutures(uint64(m.OpenedHeight))
	}
	l = m.OpenedBaseRate.Size()
	n += 1 + l + sovPerpetualFutures(uint64(l))
	l = m.OpenedQuoteRate.Size()
	n += 1 + l + sovPerpetualFutures(uint64(l))
	l = m.RemainingMargin.Size()
	n += 1 + l + sovPerpetualFutures(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.LastLeviedAt)
	n += 1 + l + sovPerpetualFutures(uint64(l))
	l = m.PositionInstance.Size()
	n += 1 + l + sovPerpetualFutures(uint64(l))
	return n
}

func (m *PerpetualFuturesPositionInstance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PositionType != 0 {
		n += 1 + sovPerpetualFutures(uint64(m.PositionType))
	}
	l = m.Size_.Size()
	n += 1 + l + sovPerpetualFutures(uint64(l))
	if m.SizeInMicro != nil {
		l = m.SizeInMicro.Size()
		n += 1 + l + sovPerpetualFutures(uint64(l))
	}
	if m.Leverage != 0 {
		n += 1 + sovPerpetualFutures(uint64(m.Leverage))
	}
	return n
}

func (m *PerpetualFuturesNetPositionOfMarket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Market.Size()
	n += 1 + l + sovPerpetualFutures(uint64(l))
	l = m.PositionSizeInMicro.Size()
	n += 1 + l + sovPerpetualFutures(uint64(l))
	return n
}

func (m *EventPerpetualFuturesPositionOpened) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovPerpetualFutures(uint64(l))
	}
	l = len(m.PositionId)
	if l > 0 {
		n += 1 + l + sovPerpetualFutures(uint64(l))
	}
	return n
}

func (m *EventPerpetualFuturesPositionClosed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovPerpetualFutures(uint64(l))
	}
	l = len(m.PositionId)
	if l > 0 {
		n += 1 + l + sovPerpetualFutures(uint64(l))
	}
	l = len(m.FeeAmount)
	if l > 0 {
		n += 1 + l + sovPerpetualFutures(uint64(l))
	}
	l = len(m.TradeAmount)
	if l > 0 {
		n += 1 + l + sovPerpetualFutures(uint64(l))
	}
	return n
}

func (m *EventPerpetualFuturesPositionLiquidated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RewardRecipient)
	if l > 0 {
		n += 1 + l + sovPerpetualFutures(uint64(l))
	}
	l = len(m.PositionId)
	if l > 0 {
		n += 1 + l + sovPerpetualFutures(uint64(l))
	}
	l = len(m.RemainingMargin)
	if l > 0 {
		n += 1 + l + sovPerpetualFutures(uint64(l))
	}
	l = len(m.RewardAmount)
	if l > 0 {
		n += 1 + l + sovPerpetualFutures(uint64(l))
	}
	return n
}

func (m *EventPerpetualFuturesPositionLevied) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RewardRecipient)
	if l > 0 {
		n += 1 + l + sovPerpetualFutures(uint64(l))
	}
	l = len(m.PositionId)
	if l > 0 {
		n += 1 + l + sovPerpetualFutures(uint64(l))
	}
	l = len(m.RemainingMargin)
	if l > 0 {
		n += 1 + l + sovPerpetualFutures(uint64(l))
	}
	l = len(m.RewardAmount)
	if l > 0 {
		n += 1 + l + sovPerpetualFutures(uint64(l))
	}
	return n
}

func sovPerpetualFutures(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPerpetualFutures(x uint64) (n int) {
	return sovPerpetualFutures(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PerpetualFuturesParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPerpetualFutures
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PerpetualFuturesParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PerpetualFuturesParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerpetualFutures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommissionRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarginMaintenanceRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerpetualFutures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MarginMaintenanceRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImaginaryFundingRateProportionalCoefficient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerpetualFutures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ImaginaryFundingRateProportionalCoefficient.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Markets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerpetualFutures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Markets = append(m.Markets, &Market{})
			if err := m.Markets[len(m.Markets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLeverage", wireType)
			}
			m.MaxLeverage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerpetualFutures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxLeverage |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPerpetualFutures(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PerpetualFuturesPosition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPerpetualFutures
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PerpetualFuturesPosition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PerpetualFuturesPosition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerpetualFutures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Market", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerpetualFutures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Market.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerpetualFutures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerpetualFutures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.OpenedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenedHeight", wireType)
			}
			m.OpenedHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerpetualFutures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpenedHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenedBaseRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerpetualFutures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OpenedBaseRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenedQuoteRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerpetualFutures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OpenedQuoteRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingMargin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerpetualFutures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RemainingMargin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastLeviedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerpetualFutures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.LastLeviedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionInstance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerpetualFutures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PositionInstance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPerpetualFutures(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PerpetualFuturesPositionInstance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPerpetualFutures
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PerpetualFuturesPositionInstance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PerpetualFuturesPositionInstance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionType", wireType)
			}
			m.PositionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerpetualFutures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PositionType |= PositionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerpetualFutures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Size_.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SizeInMicro", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerpetualFutures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.SizeInMicro = &v
			if err := m.SizeInMicro.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leverage", wireType)
			}
			m.Leverage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerpetualFutures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Leverage |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPerpetualFutures(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PerpetualFuturesNetPositionOfMarket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPerpetualFutures
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PerpetualFuturesNetPositionOfMarket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PerpetualFuturesNetPositionOfMarket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Market", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerpetualFutures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Market.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionSizeInMicro", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerpetualFutures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PositionSizeInMicro.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPerpetualFutures(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPerpetualFuturesPositionOpened) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPerpetualFutures
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPerpetualFuturesPositionOpened: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPerpetualFuturesPositionOpened: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerpetualFutures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerpetualFutures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PositionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPerpetualFutures(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPerpetualFuturesPositionClosed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPerpetualFutures
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPerpetualFuturesPositionClosed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPerpetualFuturesPositionClosed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerpetualFutures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerpetualFutures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PositionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerpetualFutures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerpetualFutures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradeAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPerpetualFutures(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPerpetualFuturesPositionLiquidated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPerpetualFutures
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPerpetualFuturesPositionLiquidated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPerpetualFuturesPositionLiquidated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardRecipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerpetualFutures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardRecipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerpetualFutures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PositionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingMargin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerpetualFutures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemainingMargin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerpetualFutures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPerpetualFutures(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPerpetualFuturesPositionLevied) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPerpetualFutures
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPerpetualFuturesPositionLevied: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPerpetualFuturesPositionLevied: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardRecipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerpetualFutures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardRecipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerpetualFutures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PositionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingMargin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerpetualFutures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemainingMargin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerpetualFutures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPerpetualFutures(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPerpetualFutures
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPerpetualFutures(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPerpetualFutures
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPerpetualFutures
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPerpetualFutures
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPerpetualFutures
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPerpetualFutures
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPerpetualFutures
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPerpetualFutures        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPerpetualFutures          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPerpetualFutures = fmt.Errorf("proto: unexpected end of group")
)
