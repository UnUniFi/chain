// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: derivatives/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_UnUniFi_chain_types "github.com/UnUniFi/chain/types"
	types1 "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgMintLiquidityProviderToken struct {
	Sender github_com_UnUniFi_chain_types.StringAccAddress `protobuf:"bytes,1,opt,name=sender,proto3,customtype=github.com/UnUniFi/chain/types.StringAccAddress" json:"sender" yaml:"sender"`
	Amount types.Coin                                      `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount" yaml:"amount"`
}

func (m *MsgMintLiquidityProviderToken) Reset()         { *m = MsgMintLiquidityProviderToken{} }
func (m *MsgMintLiquidityProviderToken) String() string { return proto.CompactTextString(m) }
func (*MsgMintLiquidityProviderToken) ProtoMessage()    {}
func (*MsgMintLiquidityProviderToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_e55416141a735582, []int{0}
}
func (m *MsgMintLiquidityProviderToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMintLiquidityProviderToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMintLiquidityProviderToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMintLiquidityProviderToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMintLiquidityProviderToken.Merge(m, src)
}
func (m *MsgMintLiquidityProviderToken) XXX_Size() int {
	return m.Size()
}
func (m *MsgMintLiquidityProviderToken) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMintLiquidityProviderToken.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMintLiquidityProviderToken proto.InternalMessageInfo

func (m *MsgMintLiquidityProviderToken) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

type MsgMintLiquidityProviderTokenResponse struct {
}

func (m *MsgMintLiquidityProviderTokenResponse) Reset()         { *m = MsgMintLiquidityProviderTokenResponse{} }
func (m *MsgMintLiquidityProviderTokenResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMintLiquidityProviderTokenResponse) ProtoMessage()    {}
func (*MsgMintLiquidityProviderTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e55416141a735582, []int{1}
}
func (m *MsgMintLiquidityProviderTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMintLiquidityProviderTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMintLiquidityProviderTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMintLiquidityProviderTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMintLiquidityProviderTokenResponse.Merge(m, src)
}
func (m *MsgMintLiquidityProviderTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMintLiquidityProviderTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMintLiquidityProviderTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMintLiquidityProviderTokenResponse proto.InternalMessageInfo

type MsgBurnLiquidityProviderToken struct {
	Sender      github_com_UnUniFi_chain_types.StringAccAddress `protobuf:"bytes,1,opt,name=sender,proto3,customtype=github.com/UnUniFi/chain/types.StringAccAddress" json:"sender" yaml:"sender"`
	Amount      github_com_cosmos_cosmos_sdk_types.Int          `protobuf:"bytes,2,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount" yaml:"amount"`
	RedeemDenom string                                          `protobuf:"bytes,3,opt,name=redeem_denom,json=redeemDenom,proto3" json:"redeem_denom,omitempty" yaml:"redeem_denom"`
}

func (m *MsgBurnLiquidityProviderToken) Reset()         { *m = MsgBurnLiquidityProviderToken{} }
func (m *MsgBurnLiquidityProviderToken) String() string { return proto.CompactTextString(m) }
func (*MsgBurnLiquidityProviderToken) ProtoMessage()    {}
func (*MsgBurnLiquidityProviderToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_e55416141a735582, []int{2}
}
func (m *MsgBurnLiquidityProviderToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBurnLiquidityProviderToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBurnLiquidityProviderToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBurnLiquidityProviderToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBurnLiquidityProviderToken.Merge(m, src)
}
func (m *MsgBurnLiquidityProviderToken) XXX_Size() int {
	return m.Size()
}
func (m *MsgBurnLiquidityProviderToken) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBurnLiquidityProviderToken.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBurnLiquidityProviderToken proto.InternalMessageInfo

func (m *MsgBurnLiquidityProviderToken) GetRedeemDenom() string {
	if m != nil {
		return m.RedeemDenom
	}
	return ""
}

type MsgBurnLiquidityProviderTokenResponse struct {
}

func (m *MsgBurnLiquidityProviderTokenResponse) Reset()         { *m = MsgBurnLiquidityProviderTokenResponse{} }
func (m *MsgBurnLiquidityProviderTokenResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBurnLiquidityProviderTokenResponse) ProtoMessage()    {}
func (*MsgBurnLiquidityProviderTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e55416141a735582, []int{3}
}
func (m *MsgBurnLiquidityProviderTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBurnLiquidityProviderTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBurnLiquidityProviderTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBurnLiquidityProviderTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBurnLiquidityProviderTokenResponse.Merge(m, src)
}
func (m *MsgBurnLiquidityProviderTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBurnLiquidityProviderTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBurnLiquidityProviderTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBurnLiquidityProviderTokenResponse proto.InternalMessageInfo

type MsgOpenPosition struct {
	Sender           github_com_UnUniFi_chain_types.StringAccAddress `protobuf:"bytes,1,opt,name=sender,proto3,customtype=github.com/UnUniFi/chain/types.StringAccAddress" json:"sender" yaml:"sender"`
	Margin           types.Coin                                      `protobuf:"bytes,2,opt,name=margin,proto3" json:"margin" yaml:"margin"`
	Market           Market                                          `protobuf:"bytes,3,opt,name=market,proto3" json:"market" yaml:"market"`
	PositionInstance types1.Any                                      `protobuf:"bytes,4,opt,name=position_instance,json=positionInstance,proto3" json:"position_instance" yaml:"position_instance"`
}

func (m *MsgOpenPosition) Reset()         { *m = MsgOpenPosition{} }
func (m *MsgOpenPosition) String() string { return proto.CompactTextString(m) }
func (*MsgOpenPosition) ProtoMessage()    {}
func (*MsgOpenPosition) Descriptor() ([]byte, []int) {
	return fileDescriptor_e55416141a735582, []int{4}
}
func (m *MsgOpenPosition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgOpenPosition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgOpenPosition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgOpenPosition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgOpenPosition.Merge(m, src)
}
func (m *MsgOpenPosition) XXX_Size() int {
	return m.Size()
}
func (m *MsgOpenPosition) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgOpenPosition.DiscardUnknown(m)
}

var xxx_messageInfo_MsgOpenPosition proto.InternalMessageInfo

func (m *MsgOpenPosition) GetMargin() types.Coin {
	if m != nil {
		return m.Margin
	}
	return types.Coin{}
}

func (m *MsgOpenPosition) GetMarket() Market {
	if m != nil {
		return m.Market
	}
	return Market{}
}

func (m *MsgOpenPosition) GetPositionInstance() types1.Any {
	if m != nil {
		return m.PositionInstance
	}
	return types1.Any{}
}

type MsgOpenPositionResponse struct {
}

func (m *MsgOpenPositionResponse) Reset()         { *m = MsgOpenPositionResponse{} }
func (m *MsgOpenPositionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgOpenPositionResponse) ProtoMessage()    {}
func (*MsgOpenPositionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e55416141a735582, []int{5}
}
func (m *MsgOpenPositionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgOpenPositionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgOpenPositionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgOpenPositionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgOpenPositionResponse.Merge(m, src)
}
func (m *MsgOpenPositionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgOpenPositionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgOpenPositionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgOpenPositionResponse proto.InternalMessageInfo

type MsgClosePosition struct {
	Sender     github_com_UnUniFi_chain_types.StringAccAddress `protobuf:"bytes,1,opt,name=sender,proto3,customtype=github.com/UnUniFi/chain/types.StringAccAddress" json:"sender" yaml:"sender"`
	PositionId string                                          `protobuf:"bytes,2,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty" yaml:"position_id"`
}

func (m *MsgClosePosition) Reset()         { *m = MsgClosePosition{} }
func (m *MsgClosePosition) String() string { return proto.CompactTextString(m) }
func (*MsgClosePosition) ProtoMessage()    {}
func (*MsgClosePosition) Descriptor() ([]byte, []int) {
	return fileDescriptor_e55416141a735582, []int{6}
}
func (m *MsgClosePosition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClosePosition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClosePosition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClosePosition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClosePosition.Merge(m, src)
}
func (m *MsgClosePosition) XXX_Size() int {
	return m.Size()
}
func (m *MsgClosePosition) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClosePosition.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClosePosition proto.InternalMessageInfo

func (m *MsgClosePosition) GetPositionId() string {
	if m != nil {
		return m.PositionId
	}
	return ""
}

type MsgClosePositionResponse struct {
}

func (m *MsgClosePositionResponse) Reset()         { *m = MsgClosePositionResponse{} }
func (m *MsgClosePositionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClosePositionResponse) ProtoMessage()    {}
func (*MsgClosePositionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e55416141a735582, []int{7}
}
func (m *MsgClosePositionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClosePositionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClosePositionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClosePositionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClosePositionResponse.Merge(m, src)
}
func (m *MsgClosePositionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClosePositionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClosePositionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClosePositionResponse proto.InternalMessageInfo

type MsgReportLiquidation struct {
	Sender          github_com_UnUniFi_chain_types.StringAccAddress `protobuf:"bytes,1,opt,name=sender,proto3,customtype=github.com/UnUniFi/chain/types.StringAccAddress" json:"sender" yaml:"sender"`
	PositionId      string                                          `protobuf:"bytes,2,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty" yaml:"position_id"`
	RewardRecipient github_com_UnUniFi_chain_types.StringAccAddress `protobuf:"bytes,3,opt,name=reward_recipient,json=rewardRecipient,proto3,customtype=github.com/UnUniFi/chain/types.StringAccAddress" json:"reward_recipient" yaml:"sender"`
}

func (m *MsgReportLiquidation) Reset()         { *m = MsgReportLiquidation{} }
func (m *MsgReportLiquidation) String() string { return proto.CompactTextString(m) }
func (*MsgReportLiquidation) ProtoMessage()    {}
func (*MsgReportLiquidation) Descriptor() ([]byte, []int) {
	return fileDescriptor_e55416141a735582, []int{8}
}
func (m *MsgReportLiquidation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReportLiquidation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReportLiquidation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReportLiquidation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReportLiquidation.Merge(m, src)
}
func (m *MsgReportLiquidation) XXX_Size() int {
	return m.Size()
}
func (m *MsgReportLiquidation) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReportLiquidation.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReportLiquidation proto.InternalMessageInfo

func (m *MsgReportLiquidation) GetPositionId() string {
	if m != nil {
		return m.PositionId
	}
	return ""
}

type MsgReportLiquidationResponse struct {
}

func (m *MsgReportLiquidationResponse) Reset()         { *m = MsgReportLiquidationResponse{} }
func (m *MsgReportLiquidationResponse) String() string { return proto.CompactTextString(m) }
func (*MsgReportLiquidationResponse) ProtoMessage()    {}
func (*MsgReportLiquidationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e55416141a735582, []int{9}
}
func (m *MsgReportLiquidationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReportLiquidationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReportLiquidationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReportLiquidationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReportLiquidationResponse.Merge(m, src)
}
func (m *MsgReportLiquidationResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgReportLiquidationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReportLiquidationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReportLiquidationResponse proto.InternalMessageInfo

type MsgReportLevyPeriod struct {
	Sender          github_com_UnUniFi_chain_types.StringAccAddress `protobuf:"bytes,1,opt,name=sender,proto3,customtype=github.com/UnUniFi/chain/types.StringAccAddress" json:"sender" yaml:"sender"`
	PositionId      string                                          `protobuf:"bytes,2,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty" yaml:"position_id"`
	RewardRecipient github_com_UnUniFi_chain_types.StringAccAddress `protobuf:"bytes,3,opt,name=reward_recipient,json=rewardRecipient,proto3,customtype=github.com/UnUniFi/chain/types.StringAccAddress" json:"reward_recipient" yaml:"sender"`
}

func (m *MsgReportLevyPeriod) Reset()         { *m = MsgReportLevyPeriod{} }
func (m *MsgReportLevyPeriod) String() string { return proto.CompactTextString(m) }
func (*MsgReportLevyPeriod) ProtoMessage()    {}
func (*MsgReportLevyPeriod) Descriptor() ([]byte, []int) {
	return fileDescriptor_e55416141a735582, []int{10}
}
func (m *MsgReportLevyPeriod) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReportLevyPeriod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReportLevyPeriod.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReportLevyPeriod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReportLevyPeriod.Merge(m, src)
}
func (m *MsgReportLevyPeriod) XXX_Size() int {
	return m.Size()
}
func (m *MsgReportLevyPeriod) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReportLevyPeriod.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReportLevyPeriod proto.InternalMessageInfo

func (m *MsgReportLevyPeriod) GetPositionId() string {
	if m != nil {
		return m.PositionId
	}
	return ""
}

type MsgReportLevyPeriodResponse struct {
}

func (m *MsgReportLevyPeriodResponse) Reset()         { *m = MsgReportLevyPeriodResponse{} }
func (m *MsgReportLevyPeriodResponse) String() string { return proto.CompactTextString(m) }
func (*MsgReportLevyPeriodResponse) ProtoMessage()    {}
func (*MsgReportLevyPeriodResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e55416141a735582, []int{11}
}
func (m *MsgReportLevyPeriodResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReportLevyPeriodResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReportLevyPeriodResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReportLevyPeriodResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReportLevyPeriodResponse.Merge(m, src)
}
func (m *MsgReportLevyPeriodResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgReportLevyPeriodResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReportLevyPeriodResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReportLevyPeriodResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgMintLiquidityProviderToken)(nil), "ununifi.derivatives.MsgMintLiquidityProviderToken")
	proto.RegisterType((*MsgMintLiquidityProviderTokenResponse)(nil), "ununifi.derivatives.MsgMintLiquidityProviderTokenResponse")
	proto.RegisterType((*MsgBurnLiquidityProviderToken)(nil), "ununifi.derivatives.MsgBurnLiquidityProviderToken")
	proto.RegisterType((*MsgBurnLiquidityProviderTokenResponse)(nil), "ununifi.derivatives.MsgBurnLiquidityProviderTokenResponse")
	proto.RegisterType((*MsgOpenPosition)(nil), "ununifi.derivatives.MsgOpenPosition")
	proto.RegisterType((*MsgOpenPositionResponse)(nil), "ununifi.derivatives.MsgOpenPositionResponse")
	proto.RegisterType((*MsgClosePosition)(nil), "ununifi.derivatives.MsgClosePosition")
	proto.RegisterType((*MsgClosePositionResponse)(nil), "ununifi.derivatives.MsgClosePositionResponse")
	proto.RegisterType((*MsgReportLiquidation)(nil), "ununifi.derivatives.MsgReportLiquidation")
	proto.RegisterType((*MsgReportLiquidationResponse)(nil), "ununifi.derivatives.MsgReportLiquidationResponse")
	proto.RegisterType((*MsgReportLevyPeriod)(nil), "ununifi.derivatives.MsgReportLevyPeriod")
	proto.RegisterType((*MsgReportLevyPeriodResponse)(nil), "ununifi.derivatives.MsgReportLevyPeriodResponse")
}

func init() { proto.RegisterFile("derivatives/tx.proto", fileDescriptor_e55416141a735582) }

var fileDescriptor_e55416141a735582 = []byte{
	// 782 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0xcd, 0x4e, 0xdb, 0x58,
	0x14, 0x8e, 0xc3, 0x0c, 0x12, 0x37, 0x20, 0x82, 0xc9, 0x0c, 0xc1, 0x0c, 0x0e, 0xb2, 0x86, 0x19,
	0x46, 0x02, 0x7b, 0xc8, 0x2c, 0x46, 0x62, 0x53, 0x11, 0x2a, 0x04, 0x55, 0xa3, 0x22, 0xb7, 0xa8,
	0x52, 0x37, 0xd4, 0xb1, 0x0f, 0xe6, 0x2a, 0xf8, 0x5e, 0xe3, 0x7b, 0x93, 0x92, 0x77, 0xe8, 0xa2,
	0xab, 0xbe, 0x41, 0xbb, 0xeb, 0x7b, 0x20, 0x75, 0x43, 0x77, 0x55, 0x17, 0x51, 0x05, 0xfb, 0x2e,
	0x78, 0x82, 0x2a, 0xf6, 0x8d, 0xc9, 0x9f, 0x43, 0x90, 0x2a, 0xda, 0x45, 0x57, 0xb1, 0x7d, 0xbe,
	0xf3, 0x9d, 0xf3, 0x7d, 0xf6, 0xb9, 0x27, 0x28, 0xe7, 0x40, 0x80, 0xeb, 0x16, 0xc7, 0x75, 0x60,
	0x06, 0x3f, 0xd5, 0xfd, 0x80, 0x72, 0x2a, 0xcf, 0xd6, 0x48, 0x8d, 0xe0, 0x43, 0xac, 0x77, 0x44,
	0x95, 0x9c, 0x4b, 0x5d, 0x1a, 0xc6, 0x8d, 0xd6, 0x55, 0x04, 0x55, 0x0a, 0x2e, 0xa5, 0xee, 0x31,
	0x18, 0xe1, 0x5d, 0xa5, 0x76, 0x68, 0x70, 0xec, 0x01, 0xe3, 0x96, 0xe7, 0x0b, 0xc0, 0x7c, 0x2f,
	0xc0, 0x22, 0x0d, 0x11, 0x52, 0x6d, 0xca, 0x3c, 0xca, 0x8c, 0x8a, 0xc5, 0xc0, 0xa8, 0xaf, 0x57,
	0x80, 0x5b, 0xeb, 0x86, 0x4d, 0x31, 0x11, 0xf1, 0xc5, 0xce, 0xe6, 0x3a, 0xae, 0xa3, 0xb0, 0xf6,
	0x5e, 0x42, 0x8b, 0x65, 0xe6, 0x96, 0x31, 0xe1, 0x0f, 0xf1, 0x49, 0x0d, 0x3b, 0x98, 0x37, 0xf6,
	0x02, 0x5a, 0xc7, 0x0e, 0x04, 0x4f, 0x68, 0x15, 0x88, 0xfc, 0x1c, 0x8d, 0x33, 0x20, 0x0e, 0x04,
	0x79, 0x69, 0x49, 0x5a, 0x99, 0x28, 0xed, 0x9c, 0x35, 0x0b, 0xa9, 0x4f, 0xcd, 0x82, 0xe1, 0x62,
	0x7e, 0x54, 0xab, 0xe8, 0x36, 0xf5, 0x8c, 0x7d, 0xb2, 0x4f, 0xf0, 0x36, 0x36, 0xec, 0x23, 0x0b,
	0x13, 0x83, 0x37, 0x7c, 0x60, 0xfa, 0x63, 0x1e, 0x60, 0xe2, 0x6e, 0xda, 0xf6, 0xa6, 0xe3, 0x04,
	0xc0, 0xd8, 0x55, 0xb3, 0x30, 0xd5, 0xb0, 0xbc, 0xe3, 0x0d, 0x2d, 0xa2, 0xd3, 0x4c, 0xc1, 0x2b,
	0xef, 0xa0, 0x71, 0xcb, 0xa3, 0x35, 0xc2, 0xf3, 0xe9, 0x25, 0x69, 0x25, 0x53, 0x9c, 0xd7, 0x23,
	0x4d, 0x7a, 0x4b, 0x93, 0x2e, 0x34, 0xe9, 0x5b, 0x14, 0x93, 0xd2, 0x6f, 0xad, 0xe2, 0xd7, 0x4c,
	0x51, 0x9a, 0x66, 0x8a, 0x7c, 0xed, 0x6f, 0xb4, 0x3c, 0x54, 0x8c, 0x09, 0xcc, 0xa7, 0x84, 0x81,
	0xf6, 0x3a, 0x1d, 0xca, 0x2e, 0xd5, 0x02, 0xf2, 0xdd, 0x64, 0x3f, 0xed, 0x92, 0x3d, 0x51, 0xba,
	0x27, 0x2a, 0xfc, 0xd5, 0x51, 0x41, 0xbc, 0xdc, 0xe8, 0x67, 0x8d, 0x39, 0x55, 0x51, 0x65, 0x97,
	0xf0, 0x44, 0x17, 0xe4, 0x0d, 0x34, 0x19, 0x80, 0x03, 0xe0, 0x1d, 0x38, 0x40, 0xa8, 0x97, 0x1f,
	0x0b, 0xe9, 0xe7, 0xae, 0x9a, 0x85, 0xd9, 0x28, 0xa1, 0x33, 0xaa, 0x99, 0x99, 0xe8, 0xf6, 0x7e,
	0x78, 0x17, 0x39, 0x98, 0xec, 0x4b, 0xec, 0xe0, 0x97, 0x34, 0x9a, 0x2e, 0x33, 0xf7, 0x91, 0x0f,
	0x64, 0x8f, 0x32, 0xcc, 0x31, 0xbd, 0xa3, 0x4f, 0xc5, 0xb3, 0x02, 0x17, 0x93, 0x5b, 0x7f, 0x2a,
	0x51, 0x9a, 0x66, 0x8a, 0x7c, 0xf9, 0x41, 0xc8, 0x54, 0x05, 0x1e, 0xda, 0x93, 0x29, 0x2e, 0xe8,
	0x03, 0xe6, 0x55, 0x2f, 0x87, 0x90, 0x01, 0x5c, 0x55, 0xe0, 0x11, 0x57, 0x15, 0xb8, 0x6c, 0xa3,
	0x19, 0x5f, 0x78, 0x70, 0x80, 0x09, 0xe3, 0x16, 0xb1, 0x21, 0xff, 0x4b, 0x48, 0x9b, 0xd3, 0xa3,
	0xd1, 0xd5, 0xdb, 0xa3, 0xab, 0x6f, 0x92, 0x46, 0x69, 0x49, 0xf0, 0xe5, 0x23, 0xbe, 0xbe, 0x64,
	0xcd, 0xcc, 0xb6, 0x9f, 0xed, 0xb6, 0x1f, 0xcd, 0xa3, 0xb9, 0x1e, 0xbf, 0xe3, 0x77, 0xf1, 0x4e,
	0x42, 0xd9, 0x32, 0x73, 0xb7, 0x8e, 0x29, 0x83, 0x3b, 0x7c, 0x19, 0xff, 0xa3, 0xcc, 0x75, 0xe7,
	0x8e, 0xf8, 0x8a, 0x7f, 0xbf, 0x6a, 0x16, 0xe4, 0x5e, 0x59, 0x8e, 0x66, 0xa2, 0x58, 0x90, 0xa3,
	0x29, 0x28, 0xdf, 0xdb, 0x6e, 0xac, 0xe5, 0x6d, 0x1a, 0xe5, 0xca, 0xcc, 0x35, 0xc1, 0xa7, 0x81,
	0x98, 0x62, 0xeb, 0x07, 0xd7, 0x23, 0x33, 0x94, 0x0d, 0xe0, 0x85, 0x15, 0x38, 0x07, 0x01, 0xd8,
	0xd8, 0xc7, 0x40, 0xb8, 0x18, 0xba, 0x6f, 0xd7, 0xe4, 0x74, 0x54, 0xc1, 0x6c, 0x17, 0xd0, 0x54,
	0xf4, 0xc7, 0x20, 0x9f, 0x62, 0x23, 0xdf, 0xa4, 0xd1, 0xec, 0x35, 0x00, 0xea, 0x8d, 0x3d, 0x08,
	0x30, 0x75, 0x7e, 0xfa, 0xd8, 0xe3, 0xe3, 0x22, 0x5a, 0x18, 0x60, 0x53, 0xdb, 0xc6, 0xe2, 0x87,
	0x5f, 0xd1, 0x58, 0x99, 0xb9, 0xf2, 0x4b, 0x09, 0x29, 0x43, 0xb6, 0x64, 0x71, 0xf0, 0xf1, 0x31,
	0x6c, 0x19, 0x29, 0x1b, 0xb7, 0xcf, 0x69, 0xb7, 0x15, 0xb6, 0x33, 0x64, 0x7b, 0x25, 0xb6, 0x93,
	0x9c, 0x93, 0xdc, 0xce, 0xcd, 0xdb, 0x40, 0xae, 0xa0, 0xc9, 0xae, 0x4d, 0xf0, 0x67, 0x12, 0x57,
	0x27, 0x4a, 0x59, 0x1d, 0x05, 0x15, 0xd7, 0x00, 0x34, 0xd5, 0x7d, 0xc2, 0x2d, 0x27, 0xa5, 0x77,
	0xc1, 0x94, 0xb5, 0x91, 0x60, 0x71, 0x99, 0x13, 0x34, 0xd3, 0x7f, 0xf8, 0xfc, 0x93, 0xc4, 0xd1,
	0x07, 0x55, 0xd6, 0x47, 0x86, 0xc6, 0x25, 0x09, 0xca, 0xf6, 0x8d, 0xe9, 0xca, 0x0d, 0x34, 0x31,
	0x52, 0xf9, 0x77, 0x54, 0x64, 0xbb, 0x5e, 0x69, 0xfb, 0xec, 0x42, 0x95, 0xce, 0x2f, 0x54, 0xe9,
	0xf3, 0x85, 0x2a, 0xbd, 0xba, 0x54, 0x53, 0xe7, 0x97, 0x6a, 0xea, 0xe3, 0xa5, 0x9a, 0x7a, 0xb6,
	0x9a, 0x38, 0x5f, 0xa7, 0x46, 0xd7, 0xbf, 0xdc, 0xd6, 0xb4, 0x55, 0xc6, 0xc3, 0xa5, 0xf6, 0xdf,
	0xd7, 0x00, 0x00, 0x00, 0xff, 0xff, 0x14, 0xe2, 0x79, 0xcf, 0x01, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	MintLiquidityProviderToken(ctx context.Context, in *MsgMintLiquidityProviderToken, opts ...grpc.CallOption) (*MsgMintLiquidityProviderTokenResponse, error)
	BurnLiquidityProviderToken(ctx context.Context, in *MsgBurnLiquidityProviderToken, opts ...grpc.CallOption) (*MsgBurnLiquidityProviderTokenResponse, error)
	OpenPosition(ctx context.Context, in *MsgOpenPosition, opts ...grpc.CallOption) (*MsgOpenPositionResponse, error)
	ClosePosition(ctx context.Context, in *MsgClosePosition, opts ...grpc.CallOption) (*MsgClosePositionResponse, error)
	ReportLiquidation(ctx context.Context, in *MsgReportLiquidation, opts ...grpc.CallOption) (*MsgReportLiquidationResponse, error)
	ReportLevyPeriod(ctx context.Context, in *MsgReportLevyPeriod, opts ...grpc.CallOption) (*MsgReportLevyPeriodResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) MintLiquidityProviderToken(ctx context.Context, in *MsgMintLiquidityProviderToken, opts ...grpc.CallOption) (*MsgMintLiquidityProviderTokenResponse, error) {
	out := new(MsgMintLiquidityProviderTokenResponse)
	err := c.cc.Invoke(ctx, "/ununifi.derivatives.Msg/MintLiquidityProviderToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BurnLiquidityProviderToken(ctx context.Context, in *MsgBurnLiquidityProviderToken, opts ...grpc.CallOption) (*MsgBurnLiquidityProviderTokenResponse, error) {
	out := new(MsgBurnLiquidityProviderTokenResponse)
	err := c.cc.Invoke(ctx, "/ununifi.derivatives.Msg/BurnLiquidityProviderToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) OpenPosition(ctx context.Context, in *MsgOpenPosition, opts ...grpc.CallOption) (*MsgOpenPositionResponse, error) {
	out := new(MsgOpenPositionResponse)
	err := c.cc.Invoke(ctx, "/ununifi.derivatives.Msg/OpenPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClosePosition(ctx context.Context, in *MsgClosePosition, opts ...grpc.CallOption) (*MsgClosePositionResponse, error) {
	out := new(MsgClosePositionResponse)
	err := c.cc.Invoke(ctx, "/ununifi.derivatives.Msg/ClosePosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ReportLiquidation(ctx context.Context, in *MsgReportLiquidation, opts ...grpc.CallOption) (*MsgReportLiquidationResponse, error) {
	out := new(MsgReportLiquidationResponse)
	err := c.cc.Invoke(ctx, "/ununifi.derivatives.Msg/ReportLiquidation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ReportLevyPeriod(ctx context.Context, in *MsgReportLevyPeriod, opts ...grpc.CallOption) (*MsgReportLevyPeriodResponse, error) {
	out := new(MsgReportLevyPeriodResponse)
	err := c.cc.Invoke(ctx, "/ununifi.derivatives.Msg/ReportLevyPeriod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	MintLiquidityProviderToken(context.Context, *MsgMintLiquidityProviderToken) (*MsgMintLiquidityProviderTokenResponse, error)
	BurnLiquidityProviderToken(context.Context, *MsgBurnLiquidityProviderToken) (*MsgBurnLiquidityProviderTokenResponse, error)
	OpenPosition(context.Context, *MsgOpenPosition) (*MsgOpenPositionResponse, error)
	ClosePosition(context.Context, *MsgClosePosition) (*MsgClosePositionResponse, error)
	ReportLiquidation(context.Context, *MsgReportLiquidation) (*MsgReportLiquidationResponse, error)
	ReportLevyPeriod(context.Context, *MsgReportLevyPeriod) (*MsgReportLevyPeriodResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) MintLiquidityProviderToken(ctx context.Context, req *MsgMintLiquidityProviderToken) (*MsgMintLiquidityProviderTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintLiquidityProviderToken not implemented")
}
func (*UnimplementedMsgServer) BurnLiquidityProviderToken(ctx context.Context, req *MsgBurnLiquidityProviderToken) (*MsgBurnLiquidityProviderTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BurnLiquidityProviderToken not implemented")
}
func (*UnimplementedMsgServer) OpenPosition(ctx context.Context, req *MsgOpenPosition) (*MsgOpenPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenPosition not implemented")
}
func (*UnimplementedMsgServer) ClosePosition(ctx context.Context, req *MsgClosePosition) (*MsgClosePositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClosePosition not implemented")
}
func (*UnimplementedMsgServer) ReportLiquidation(ctx context.Context, req *MsgReportLiquidation) (*MsgReportLiquidationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportLiquidation not implemented")
}
func (*UnimplementedMsgServer) ReportLevyPeriod(ctx context.Context, req *MsgReportLevyPeriod) (*MsgReportLevyPeriodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportLevyPeriod not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_MintLiquidityProviderToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMintLiquidityProviderToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MintLiquidityProviderToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.derivatives.Msg/MintLiquidityProviderToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MintLiquidityProviderToken(ctx, req.(*MsgMintLiquidityProviderToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BurnLiquidityProviderToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBurnLiquidityProviderToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BurnLiquidityProviderToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.derivatives.Msg/BurnLiquidityProviderToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BurnLiquidityProviderToken(ctx, req.(*MsgBurnLiquidityProviderToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_OpenPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgOpenPosition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).OpenPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.derivatives.Msg/OpenPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).OpenPosition(ctx, req.(*MsgOpenPosition))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClosePosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClosePosition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClosePosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.derivatives.Msg/ClosePosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClosePosition(ctx, req.(*MsgClosePosition))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ReportLiquidation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReportLiquidation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ReportLiquidation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.derivatives.Msg/ReportLiquidation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ReportLiquidation(ctx, req.(*MsgReportLiquidation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ReportLevyPeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReportLevyPeriod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ReportLevyPeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.derivatives.Msg/ReportLevyPeriod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ReportLevyPeriod(ctx, req.(*MsgReportLevyPeriod))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ununifi.derivatives.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MintLiquidityProviderToken",
			Handler:    _Msg_MintLiquidityProviderToken_Handler,
		},
		{
			MethodName: "BurnLiquidityProviderToken",
			Handler:    _Msg_BurnLiquidityProviderToken_Handler,
		},
		{
			MethodName: "OpenPosition",
			Handler:    _Msg_OpenPosition_Handler,
		},
		{
			MethodName: "ClosePosition",
			Handler:    _Msg_ClosePosition_Handler,
		},
		{
			MethodName: "ReportLiquidation",
			Handler:    _Msg_ReportLiquidation_Handler,
		},
		{
			MethodName: "ReportLevyPeriod",
			Handler:    _Msg_ReportLevyPeriod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "derivatives/tx.proto",
}

func (m *MsgMintLiquidityProviderToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMintLiquidityProviderToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMintLiquidityProviderToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Sender.Size()
		i -= size
		if _, err := m.Sender.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgMintLiquidityProviderTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMintLiquidityProviderTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMintLiquidityProviderTokenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBurnLiquidityProviderToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBurnLiquidityProviderToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBurnLiquidityProviderToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RedeemDenom) > 0 {
		i -= len(m.RedeemDenom)
		copy(dAtA[i:], m.RedeemDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RedeemDenom)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Sender.Size()
		i -= size
		if _, err := m.Sender.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgBurnLiquidityProviderTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBurnLiquidityProviderTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBurnLiquidityProviderTokenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgOpenPosition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgOpenPosition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgOpenPosition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PositionInstance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Market.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Margin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Sender.Size()
		i -= size
		if _, err := m.Sender.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgOpenPositionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgOpenPositionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgOpenPositionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgClosePosition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClosePosition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClosePosition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PositionId) > 0 {
		i -= len(m.PositionId)
		copy(dAtA[i:], m.PositionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PositionId)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.Sender.Size()
		i -= size
		if _, err := m.Sender.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgClosePositionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClosePositionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClosePositionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgReportLiquidation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReportLiquidation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReportLiquidation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.RewardRecipient.Size()
		i -= size
		if _, err := m.RewardRecipient.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.PositionId) > 0 {
		i -= len(m.PositionId)
		copy(dAtA[i:], m.PositionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PositionId)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.Sender.Size()
		i -= size
		if _, err := m.Sender.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgReportLiquidationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReportLiquidationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReportLiquidationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgReportLevyPeriod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReportLevyPeriod) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReportLevyPeriod) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.RewardRecipient.Size()
		i -= size
		if _, err := m.RewardRecipient.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.PositionId) > 0 {
		i -= len(m.PositionId)
		copy(dAtA[i:], m.PositionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PositionId)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.Sender.Size()
		i -= size
		if _, err := m.Sender.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgReportLevyPeriodResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReportLevyPeriodResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReportLevyPeriodResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgMintLiquidityProviderToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Sender.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgMintLiquidityProviderTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBurnLiquidityProviderToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Sender.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.RedeemDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgBurnLiquidityProviderTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgOpenPosition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Sender.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.Margin.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.Market.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.PositionInstance.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgOpenPositionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgClosePosition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Sender.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.PositionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgClosePositionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgReportLiquidation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Sender.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.PositionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.RewardRecipient.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgReportLiquidationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgReportLevyPeriod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Sender.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.PositionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.RewardRecipient.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgReportLevyPeriodResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgMintLiquidityProviderToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMintLiquidityProviderToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMintLiquidityProviderToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMintLiquidityProviderTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMintLiquidityProviderTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMintLiquidityProviderTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBurnLiquidityProviderToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBurnLiquidityProviderToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBurnLiquidityProviderToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedeemDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedeemDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBurnLiquidityProviderTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBurnLiquidityProviderTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBurnLiquidityProviderTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgOpenPosition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgOpenPosition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgOpenPosition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Margin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Margin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Market", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Market.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionInstance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PositionInstance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgOpenPositionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgOpenPositionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgOpenPositionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClosePosition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClosePosition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClosePosition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PositionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClosePositionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClosePositionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClosePositionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReportLiquidation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReportLiquidation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReportLiquidation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PositionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardRecipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardRecipient.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReportLiquidationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReportLiquidationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReportLiquidationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReportLevyPeriod) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReportLevyPeriod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReportLevyPeriod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PositionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardRecipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardRecipient.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReportLevyPeriodResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReportLevyPeriodResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReportLevyPeriodResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
