// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ununifi/derivatives/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	types1 "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgDepositToPool struct {
	Sender string     `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
	Amount types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount" yaml:"amount"`
}

func (m *MsgDepositToPool) Reset()         { *m = MsgDepositToPool{} }
func (m *MsgDepositToPool) String() string { return proto.CompactTextString(m) }
func (*MsgDepositToPool) ProtoMessage()    {}
func (*MsgDepositToPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ece79e09138dc54, []int{0}
}
func (m *MsgDepositToPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDepositToPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDepositToPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDepositToPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDepositToPool.Merge(m, src)
}
func (m *MsgDepositToPool) XXX_Size() int {
	return m.Size()
}
func (m *MsgDepositToPool) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDepositToPool.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDepositToPool proto.InternalMessageInfo

func (m *MsgDepositToPool) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgDepositToPool) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

type MsgDepositToPoolResponse struct {
}

func (m *MsgDepositToPoolResponse) Reset()         { *m = MsgDepositToPoolResponse{} }
func (m *MsgDepositToPoolResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDepositToPoolResponse) ProtoMessage()    {}
func (*MsgDepositToPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ece79e09138dc54, []int{1}
}
func (m *MsgDepositToPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDepositToPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDepositToPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDepositToPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDepositToPoolResponse.Merge(m, src)
}
func (m *MsgDepositToPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDepositToPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDepositToPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDepositToPoolResponse proto.InternalMessageInfo

type MsgWithdrawFromPool struct {
	Sender      string                                 `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
	LptAmount   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=lpt_amount,json=lptAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"lpt_amount" yaml:"amount"`
	RedeemDenom string                                 `protobuf:"bytes,3,opt,name=redeem_denom,json=redeemDenom,proto3" json:"redeem_denom,omitempty" yaml:"redeem_denom"`
}

func (m *MsgWithdrawFromPool) Reset()         { *m = MsgWithdrawFromPool{} }
func (m *MsgWithdrawFromPool) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawFromPool) ProtoMessage()    {}
func (*MsgWithdrawFromPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ece79e09138dc54, []int{2}
}
func (m *MsgWithdrawFromPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawFromPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawFromPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawFromPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawFromPool.Merge(m, src)
}
func (m *MsgWithdrawFromPool) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawFromPool) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawFromPool.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawFromPool proto.InternalMessageInfo

func (m *MsgWithdrawFromPool) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgWithdrawFromPool) GetRedeemDenom() string {
	if m != nil {
		return m.RedeemDenom
	}
	return ""
}

type MsgWithdrawFromPoolResponse struct {
}

func (m *MsgWithdrawFromPoolResponse) Reset()         { *m = MsgWithdrawFromPoolResponse{} }
func (m *MsgWithdrawFromPoolResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawFromPoolResponse) ProtoMessage()    {}
func (*MsgWithdrawFromPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ece79e09138dc54, []int{3}
}
func (m *MsgWithdrawFromPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawFromPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawFromPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawFromPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawFromPoolResponse.Merge(m, src)
}
func (m *MsgWithdrawFromPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawFromPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawFromPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawFromPoolResponse proto.InternalMessageInfo

type MsgOpenPosition struct {
	Sender           string     `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
	Margin           types.Coin `protobuf:"bytes,2,opt,name=margin,proto3" json:"margin" yaml:"margin"`
	Market           Market     `protobuf:"bytes,3,opt,name=market,proto3" json:"market" yaml:"market"`
	PositionInstance types1.Any `protobuf:"bytes,4,opt,name=position_instance,json=positionInstance,proto3" json:"position_instance" yaml:"position_instance"`
}

func (m *MsgOpenPosition) Reset()         { *m = MsgOpenPosition{} }
func (m *MsgOpenPosition) String() string { return proto.CompactTextString(m) }
func (*MsgOpenPosition) ProtoMessage()    {}
func (*MsgOpenPosition) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ece79e09138dc54, []int{4}
}
func (m *MsgOpenPosition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgOpenPosition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgOpenPosition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgOpenPosition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgOpenPosition.Merge(m, src)
}
func (m *MsgOpenPosition) XXX_Size() int {
	return m.Size()
}
func (m *MsgOpenPosition) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgOpenPosition.DiscardUnknown(m)
}

var xxx_messageInfo_MsgOpenPosition proto.InternalMessageInfo

func (m *MsgOpenPosition) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgOpenPosition) GetMargin() types.Coin {
	if m != nil {
		return m.Margin
	}
	return types.Coin{}
}

func (m *MsgOpenPosition) GetMarket() Market {
	if m != nil {
		return m.Market
	}
	return Market{}
}

func (m *MsgOpenPosition) GetPositionInstance() types1.Any {
	if m != nil {
		return m.PositionInstance
	}
	return types1.Any{}
}

type MsgOpenPositionResponse struct {
}

func (m *MsgOpenPositionResponse) Reset()         { *m = MsgOpenPositionResponse{} }
func (m *MsgOpenPositionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgOpenPositionResponse) ProtoMessage()    {}
func (*MsgOpenPositionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ece79e09138dc54, []int{5}
}
func (m *MsgOpenPositionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgOpenPositionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgOpenPositionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgOpenPositionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgOpenPositionResponse.Merge(m, src)
}
func (m *MsgOpenPositionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgOpenPositionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgOpenPositionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgOpenPositionResponse proto.InternalMessageInfo

type MsgClosePosition struct {
	Sender     string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
	PositionId string `protobuf:"bytes,2,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty" yaml:"position_id"`
}

func (m *MsgClosePosition) Reset()         { *m = MsgClosePosition{} }
func (m *MsgClosePosition) String() string { return proto.CompactTextString(m) }
func (*MsgClosePosition) ProtoMessage()    {}
func (*MsgClosePosition) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ece79e09138dc54, []int{6}
}
func (m *MsgClosePosition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClosePosition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClosePosition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClosePosition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClosePosition.Merge(m, src)
}
func (m *MsgClosePosition) XXX_Size() int {
	return m.Size()
}
func (m *MsgClosePosition) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClosePosition.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClosePosition proto.InternalMessageInfo

func (m *MsgClosePosition) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgClosePosition) GetPositionId() string {
	if m != nil {
		return m.PositionId
	}
	return ""
}

type MsgClosePositionResponse struct {
}

func (m *MsgClosePositionResponse) Reset()         { *m = MsgClosePositionResponse{} }
func (m *MsgClosePositionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClosePositionResponse) ProtoMessage()    {}
func (*MsgClosePositionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ece79e09138dc54, []int{7}
}
func (m *MsgClosePositionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClosePositionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClosePositionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClosePositionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClosePositionResponse.Merge(m, src)
}
func (m *MsgClosePositionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClosePositionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClosePositionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClosePositionResponse proto.InternalMessageInfo

type MsgReportLiquidation struct {
	Sender          string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
	PositionId      string `protobuf:"bytes,2,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty" yaml:"position_id"`
	RewardRecipient string `protobuf:"bytes,3,opt,name=reward_recipient,json=rewardRecipient,proto3" json:"reward_recipient,omitempty" yaml:"sender"`
}

func (m *MsgReportLiquidation) Reset()         { *m = MsgReportLiquidation{} }
func (m *MsgReportLiquidation) String() string { return proto.CompactTextString(m) }
func (*MsgReportLiquidation) ProtoMessage()    {}
func (*MsgReportLiquidation) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ece79e09138dc54, []int{8}
}
func (m *MsgReportLiquidation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReportLiquidation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReportLiquidation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReportLiquidation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReportLiquidation.Merge(m, src)
}
func (m *MsgReportLiquidation) XXX_Size() int {
	return m.Size()
}
func (m *MsgReportLiquidation) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReportLiquidation.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReportLiquidation proto.InternalMessageInfo

func (m *MsgReportLiquidation) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgReportLiquidation) GetPositionId() string {
	if m != nil {
		return m.PositionId
	}
	return ""
}

func (m *MsgReportLiquidation) GetRewardRecipient() string {
	if m != nil {
		return m.RewardRecipient
	}
	return ""
}

type MsgReportLiquidationResponse struct {
}

func (m *MsgReportLiquidationResponse) Reset()         { *m = MsgReportLiquidationResponse{} }
func (m *MsgReportLiquidationResponse) String() string { return proto.CompactTextString(m) }
func (*MsgReportLiquidationResponse) ProtoMessage()    {}
func (*MsgReportLiquidationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ece79e09138dc54, []int{9}
}
func (m *MsgReportLiquidationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReportLiquidationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReportLiquidationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReportLiquidationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReportLiquidationResponse.Merge(m, src)
}
func (m *MsgReportLiquidationResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgReportLiquidationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReportLiquidationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReportLiquidationResponse proto.InternalMessageInfo

type MsgReportLevyPeriod struct {
	Sender          string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
	PositionId      string `protobuf:"bytes,2,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty" yaml:"position_id"`
	RewardRecipient string `protobuf:"bytes,3,opt,name=reward_recipient,json=rewardRecipient,proto3" json:"reward_recipient,omitempty" yaml:"sender"`
}

func (m *MsgReportLevyPeriod) Reset()         { *m = MsgReportLevyPeriod{} }
func (m *MsgReportLevyPeriod) String() string { return proto.CompactTextString(m) }
func (*MsgReportLevyPeriod) ProtoMessage()    {}
func (*MsgReportLevyPeriod) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ece79e09138dc54, []int{10}
}
func (m *MsgReportLevyPeriod) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReportLevyPeriod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReportLevyPeriod.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReportLevyPeriod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReportLevyPeriod.Merge(m, src)
}
func (m *MsgReportLevyPeriod) XXX_Size() int {
	return m.Size()
}
func (m *MsgReportLevyPeriod) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReportLevyPeriod.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReportLevyPeriod proto.InternalMessageInfo

func (m *MsgReportLevyPeriod) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgReportLevyPeriod) GetPositionId() string {
	if m != nil {
		return m.PositionId
	}
	return ""
}

func (m *MsgReportLevyPeriod) GetRewardRecipient() string {
	if m != nil {
		return m.RewardRecipient
	}
	return ""
}

type MsgReportLevyPeriodResponse struct {
}

func (m *MsgReportLevyPeriodResponse) Reset()         { *m = MsgReportLevyPeriodResponse{} }
func (m *MsgReportLevyPeriodResponse) String() string { return proto.CompactTextString(m) }
func (*MsgReportLevyPeriodResponse) ProtoMessage()    {}
func (*MsgReportLevyPeriodResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ece79e09138dc54, []int{11}
}
func (m *MsgReportLevyPeriodResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReportLevyPeriodResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReportLevyPeriodResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReportLevyPeriodResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReportLevyPeriodResponse.Merge(m, src)
}
func (m *MsgReportLevyPeriodResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgReportLevyPeriodResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReportLevyPeriodResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReportLevyPeriodResponse proto.InternalMessageInfo

type MsgAddMargin struct {
	Sender     string     `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
	Amount     types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount" yaml:"amount"`
	PositionId string     `protobuf:"bytes,3,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty" yaml:"position_id"`
}

func (m *MsgAddMargin) Reset()         { *m = MsgAddMargin{} }
func (m *MsgAddMargin) String() string { return proto.CompactTextString(m) }
func (*MsgAddMargin) ProtoMessage()    {}
func (*MsgAddMargin) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ece79e09138dc54, []int{12}
}
func (m *MsgAddMargin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddMargin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddMargin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddMargin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddMargin.Merge(m, src)
}
func (m *MsgAddMargin) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddMargin) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddMargin.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddMargin proto.InternalMessageInfo

func (m *MsgAddMargin) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgAddMargin) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *MsgAddMargin) GetPositionId() string {
	if m != nil {
		return m.PositionId
	}
	return ""
}

type MsgAddMarginResponse struct {
}

func (m *MsgAddMarginResponse) Reset()         { *m = MsgAddMarginResponse{} }
func (m *MsgAddMarginResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddMarginResponse) ProtoMessage()    {}
func (*MsgAddMarginResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ece79e09138dc54, []int{13}
}
func (m *MsgAddMarginResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddMarginResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddMarginResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddMarginResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddMarginResponse.Merge(m, src)
}
func (m *MsgAddMarginResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddMarginResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddMarginResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddMarginResponse proto.InternalMessageInfo

type MsgRemoveMargin struct {
	Sender     string     `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
	Amount     types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount" yaml:"amount"`
	PositionId string     `protobuf:"bytes,3,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty" yaml:"position_id"`
}

func (m *MsgRemoveMargin) Reset()         { *m = MsgRemoveMargin{} }
func (m *MsgRemoveMargin) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveMargin) ProtoMessage()    {}
func (*MsgRemoveMargin) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ece79e09138dc54, []int{14}
}
func (m *MsgRemoveMargin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveMargin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveMargin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveMargin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveMargin.Merge(m, src)
}
func (m *MsgRemoveMargin) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveMargin) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveMargin.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveMargin proto.InternalMessageInfo

func (m *MsgRemoveMargin) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgRemoveMargin) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *MsgRemoveMargin) GetPositionId() string {
	if m != nil {
		return m.PositionId
	}
	return ""
}

type MsgRemoveMarginResponse struct {
}

func (m *MsgRemoveMarginResponse) Reset()         { *m = MsgRemoveMarginResponse{} }
func (m *MsgRemoveMarginResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveMarginResponse) ProtoMessage()    {}
func (*MsgRemoveMarginResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ece79e09138dc54, []int{15}
}
func (m *MsgRemoveMarginResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveMarginResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveMarginResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveMarginResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveMarginResponse.Merge(m, src)
}
func (m *MsgRemoveMarginResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveMarginResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveMarginResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveMarginResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgDepositToPool)(nil), "ununifi.derivatives.MsgDepositToPool")
	proto.RegisterType((*MsgDepositToPoolResponse)(nil), "ununifi.derivatives.MsgDepositToPoolResponse")
	proto.RegisterType((*MsgWithdrawFromPool)(nil), "ununifi.derivatives.MsgWithdrawFromPool")
	proto.RegisterType((*MsgWithdrawFromPoolResponse)(nil), "ununifi.derivatives.MsgWithdrawFromPoolResponse")
	proto.RegisterType((*MsgOpenPosition)(nil), "ununifi.derivatives.MsgOpenPosition")
	proto.RegisterType((*MsgOpenPositionResponse)(nil), "ununifi.derivatives.MsgOpenPositionResponse")
	proto.RegisterType((*MsgClosePosition)(nil), "ununifi.derivatives.MsgClosePosition")
	proto.RegisterType((*MsgClosePositionResponse)(nil), "ununifi.derivatives.MsgClosePositionResponse")
	proto.RegisterType((*MsgReportLiquidation)(nil), "ununifi.derivatives.MsgReportLiquidation")
	proto.RegisterType((*MsgReportLiquidationResponse)(nil), "ununifi.derivatives.MsgReportLiquidationResponse")
	proto.RegisterType((*MsgReportLevyPeriod)(nil), "ununifi.derivatives.MsgReportLevyPeriod")
	proto.RegisterType((*MsgReportLevyPeriodResponse)(nil), "ununifi.derivatives.MsgReportLevyPeriodResponse")
	proto.RegisterType((*MsgAddMargin)(nil), "ununifi.derivatives.MsgAddMargin")
	proto.RegisterType((*MsgAddMarginResponse)(nil), "ununifi.derivatives.MsgAddMarginResponse")
	proto.RegisterType((*MsgRemoveMargin)(nil), "ununifi.derivatives.MsgRemoveMargin")
	proto.RegisterType((*MsgRemoveMarginResponse)(nil), "ununifi.derivatives.MsgRemoveMarginResponse")
}

func init() { proto.RegisterFile("ununifi/derivatives/tx.proto", fileDescriptor_0ece79e09138dc54) }

var fileDescriptor_0ece79e09138dc54 = []byte{
	// 836 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0x4f, 0x4f, 0xeb, 0x46,
	0x10, 0x8f, 0x1f, 0x55, 0xa4, 0x6c, 0x40, 0x2f, 0x18, 0xfa, 0x5e, 0xf0, 0xa3, 0x0e, 0xb5, 0xa0,
	0x0a, 0x12, 0xd8, 0x85, 0x1e, 0x2a, 0xa1, 0x4a, 0x15, 0x01, 0xa1, 0x52, 0xd5, 0x2a, 0xb2, 0x8a,
	0xaa, 0xf6, 0xd0, 0xc8, 0x89, 0x07, 0xb3, 0x4a, 0xbc, 0x6b, 0xbc, 0x9b, 0x40, 0x3e, 0x41, 0xaf,
	0xfd, 0x36, 0xed, 0xa1, 0x52, 0xaf, 0xf4, 0xc6, 0xb1, 0xaa, 0xaa, 0xa8, 0x82, 0x6f, 0xc0, 0x27,
	0xa8, 0xe2, 0x75, 0x1c, 0xc7, 0xb1, 0x45, 0xe8, 0xa1, 0x15, 0x27, 0xff, 0xd9, 0xdf, 0xcc, 0xfc,
	0x66, 0xf6, 0x37, 0xb3, 0x8b, 0xd6, 0x7b, 0xa4, 0x47, 0xf0, 0x05, 0x36, 0x1c, 0x08, 0x70, 0xdf,
	0xe6, 0xb8, 0x0f, 0xcc, 0xe0, 0x37, 0xba, 0x1f, 0x50, 0x4e, 0xe5, 0x95, 0x68, 0x55, 0x4f, 0xac,
	0x2a, 0xab, 0x2e, 0x75, 0x69, 0xb8, 0x6e, 0x8c, 0xde, 0x04, 0x54, 0xa9, 0xb9, 0x94, 0xba, 0x5d,
	0x30, 0xc2, 0xaf, 0x56, 0xef, 0xc2, 0xe0, 0xd8, 0x03, 0xc6, 0x6d, 0xcf, 0x8f, 0x00, 0x6b, 0x69,
	0x80, 0x4d, 0x06, 0xd1, 0x92, 0xda, 0xa6, 0xcc, 0xa3, 0xcc, 0x68, 0xd9, 0x0c, 0x8c, 0xfe, 0x5e,
	0x0b, 0xb8, 0xbd, 0x67, 0xb4, 0x29, 0x26, 0xd1, 0xfa, 0x56, 0x16, 0xc9, 0xc4, 0xbb, 0x80, 0x69,
	0x3f, 0x4a, 0xa8, 0x62, 0x32, 0xf7, 0x18, 0x7c, 0xca, 0x30, 0xff, 0x86, 0x9e, 0x51, 0xda, 0x95,
	0xb7, 0x51, 0x91, 0x01, 0x71, 0x20, 0xa8, 0x4a, 0x1b, 0x52, 0xbd, 0xd4, 0x58, 0x7e, 0x1c, 0xd6,
	0x96, 0x06, 0xb6, 0xd7, 0x3d, 0xd0, 0xc4, 0x7f, 0xcd, 0x8a, 0x00, 0xf2, 0x17, 0xa8, 0x68, 0x7b,
	0xb4, 0x47, 0x78, 0xf5, 0xd5, 0x86, 0x54, 0x2f, 0xef, 0xaf, 0xe9, 0x82, 0x97, 0x3e, 0xe2, 0xa5,
	0x47, 0xbc, 0xf4, 0x23, 0x8a, 0x49, 0xe3, 0xfd, 0xdb, 0x61, 0xad, 0x30, 0xf1, 0x24, 0xcc, 0x34,
	0x2b, 0xb2, 0xd7, 0x14, 0x54, 0x4d, 0x13, 0xb1, 0x80, 0xf9, 0x94, 0x30, 0xd0, 0xfe, 0x92, 0xd0,
	0x8a, 0xc9, 0xdc, 0x6f, 0x31, 0xbf, 0x74, 0x02, 0xfb, 0xfa, 0x24, 0xa0, 0xde, 0x73, 0x89, 0xfe,
	0x80, 0x50, 0xd7, 0xe7, 0xcd, 0x04, 0xd9, 0x52, 0xe3, 0xf3, 0x11, 0xa3, 0x3f, 0x87, 0xb5, 0x8f,
	0x5c, 0xcc, 0x2f, 0x7b, 0x2d, 0xbd, 0x4d, 0x3d, 0x23, 0x2a, 0xab, 0x78, 0xec, 0x32, 0xa7, 0x63,
	0xf0, 0x81, 0x0f, 0x4c, 0x3f, 0x25, 0x7c, 0x96, 0x7b, 0xa9, 0xeb, 0xf3, 0xc3, 0xf0, 0x5d, 0x3e,
	0x40, 0x8b, 0x01, 0x38, 0x00, 0x5e, 0xd3, 0x01, 0x42, 0xbd, 0xea, 0x42, 0x18, 0xe1, 0xed, 0xe3,
	0xb0, 0xb6, 0x22, 0x6c, 0x92, 0xab, 0x9a, 0x55, 0x16, 0x9f, 0xc7, 0xe1, 0xd7, 0x07, 0xe8, 0x5d,
	0x46, 0x76, 0x71, 0xf6, 0x3f, 0xbf, 0x42, 0xaf, 0x4d, 0xe6, 0x7e, 0xed, 0x03, 0x39, 0x1b, 0x15,
	0x07, 0x53, 0xf2, 0xcc, 0x2d, 0xf2, 0xec, 0xc0, 0xc5, 0xe4, 0xd9, 0x5b, 0x24, 0xcc, 0x34, 0x2b,
	0xb2, 0x97, 0xbf, 0x0c, 0x3d, 0x75, 0x80, 0x87, 0xd9, 0x95, 0xf7, 0xdf, 0xe9, 0x19, 0x5a, 0xd7,
	0xcd, 0x10, 0x92, 0xe1, 0xab, 0x03, 0x5c, 0xf8, 0xea, 0x00, 0x97, 0xdb, 0x68, 0xd9, 0x8f, 0x92,
	0x69, 0x62, 0xc2, 0xb8, 0x4d, 0xda, 0x50, 0x7d, 0x2f, 0x74, 0xbb, 0xaa, 0x0b, 0xd9, 0xeb, 0x63,
	0xd9, 0xeb, 0x87, 0x64, 0xd0, 0xd8, 0x88, 0xfc, 0x55, 0x85, 0xbf, 0x19, 0x63, 0xcd, 0xaa, 0x8c,
	0xff, 0x9d, 0x8e, 0x7f, 0xad, 0xa1, 0xb7, 0xa9, 0xc2, 0xc5, 0x45, 0xed, 0x87, 0xba, 0x3f, 0xea,
	0x52, 0x06, 0xff, 0xa6, 0xa8, 0x9f, 0xa2, 0xf2, 0x84, 0x81, 0x13, 0xe9, 0xe9, 0xcd, 0xe3, 0xb0,
	0x26, 0xa7, 0xe9, 0x39, 0x9a, 0x85, 0x62, 0x62, 0x4e, 0x24, 0xf3, 0xa9, 0xb8, 0x31, 0xa7, 0x5f,
	0x24, 0xb4, 0x6a, 0x32, 0xd7, 0x02, 0x9f, 0x06, 0xfc, 0x2b, 0x7c, 0xd5, 0xc3, 0x8e, 0xfd, 0x5f,
	0x11, 0x93, 0x3f, 0x43, 0x95, 0x00, 0xae, 0xed, 0xc0, 0x69, 0x06, 0xd0, 0xc6, 0x3e, 0x06, 0xc2,
	0x23, 0x11, 0x67, 0x44, 0x7b, 0x2d, 0xa0, 0xd6, 0x18, 0xa9, 0xa9, 0x68, 0x3d, 0x8b, 0xf9, 0x44,
	0xc3, 0xa2, 0x83, 0x23, 0x00, 0xf4, 0x07, 0x67, 0x10, 0x60, 0xea, 0xbc, 0x80, 0xcc, 0x44, 0x73,
	0xa6, 0x89, 0xc7, 0x89, 0xfd, 0x2a, 0xa1, 0x45, 0x93, 0xb9, 0x87, 0x8e, 0x63, 0x8a, 0x26, 0xf9,
	0x3f, 0x86, 0x67, 0xba, 0x36, 0x0b, 0x73, 0xcb, 0xf1, 0x4d, 0xa8, 0xb8, 0x98, 0x7d, 0x9c, 0xd6,
	0x6f, 0x52, 0x38, 0x73, 0x2c, 0xf0, 0x68, 0x1f, 0x5e, 0x64, 0x66, 0xa2, 0xf7, 0x93, 0x09, 0x8c,
	0x93, 0xdb, 0xff, 0xbd, 0x88, 0x16, 0x4c, 0xe6, 0xca, 0x80, 0x96, 0xa6, 0x0f, 0xbe, 0xad, 0xec,
	0x81, 0x96, 0x3a, 0x96, 0x94, 0xdd, 0xb9, 0x60, 0xe3, 0x70, 0x32, 0x41, 0x95, 0x99, 0x93, 0xab,
	0x9e, 0xe7, 0x22, 0x8d, 0x54, 0x3e, 0x9e, 0x17, 0x19, 0xc7, 0x6b, 0xa1, 0xc5, 0xa9, 0xb3, 0x62,
	0x33, 0xcf, 0x43, 0x12, 0xa5, 0xec, 0xcc, 0x83, 0x8a, 0x63, 0x00, 0x5a, 0x9a, 0x9e, 0x9d, 0xb9,
	0xa5, 0x9b, 0x82, 0xe5, 0x97, 0x2e, 0x73, 0x22, 0xca, 0x57, 0x68, 0x39, 0x63, 0x1a, 0xe6, 0xf9,
	0x98, 0x81, 0x2a, 0x7b, 0x73, 0x43, 0x93, 0xbb, 0x35, 0x33, 0xa5, 0xea, 0x4f, 0xb8, 0x89, 0x91,
	0xf9, 0xbb, 0x95, 0x37, 0x40, 0xe4, 0xef, 0x50, 0x69, 0x32, 0x3c, 0x3e, 0xcc, 0x33, 0x8f, 0x21,
	0xca, 0xf6, 0x93, 0x90, 0xa4, 0x10, 0xa6, 0x1a, 0x78, 0x33, 0x9f, 0xdc, 0x04, 0x95, 0x2f, 0x84,
	0xac, 0x5e, 0x6a, 0x9c, 0xdc, 0xde, 0xab, 0xd2, 0xdd, 0xbd, 0x2a, 0xfd, 0x7d, 0xaf, 0x4a, 0x3f,
	0x3d, 0xa8, 0x85, 0xbb, 0x07, 0xb5, 0xf0, 0xc7, 0x83, 0x5a, 0xf8, 0x7e, 0x27, 0x71, 0xab, 0x3a,
	0x27, 0xe7, 0x04, 0x9f, 0x60, 0xa3, 0x7d, 0x69, 0x63, 0x62, 0xdc, 0x4c, 0xdf, 0x9c, 0x47, 0xf7,
	0xab, 0x56, 0x31, 0x3c, 0xec, 0x3f, 0xf9, 0x27, 0x00, 0x00, 0xff, 0xff, 0x65, 0x54, 0xd1, 0x16,
	0x5d, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	DepositToPool(ctx context.Context, in *MsgDepositToPool, opts ...grpc.CallOption) (*MsgDepositToPoolResponse, error)
	WithdrawFromPool(ctx context.Context, in *MsgWithdrawFromPool, opts ...grpc.CallOption) (*MsgWithdrawFromPoolResponse, error)
	OpenPosition(ctx context.Context, in *MsgOpenPosition, opts ...grpc.CallOption) (*MsgOpenPositionResponse, error)
	ClosePosition(ctx context.Context, in *MsgClosePosition, opts ...grpc.CallOption) (*MsgClosePositionResponse, error)
	ReportLiquidation(ctx context.Context, in *MsgReportLiquidation, opts ...grpc.CallOption) (*MsgReportLiquidationResponse, error)
	ReportLevyPeriod(ctx context.Context, in *MsgReportLevyPeriod, opts ...grpc.CallOption) (*MsgReportLevyPeriodResponse, error)
	AddMargin(ctx context.Context, in *MsgAddMargin, opts ...grpc.CallOption) (*MsgAddMarginResponse, error)
	RemoveMargin(ctx context.Context, in *MsgRemoveMargin, opts ...grpc.CallOption) (*MsgRemoveMarginResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) DepositToPool(ctx context.Context, in *MsgDepositToPool, opts ...grpc.CallOption) (*MsgDepositToPoolResponse, error) {
	out := new(MsgDepositToPoolResponse)
	err := c.cc.Invoke(ctx, "/ununifi.derivatives.Msg/DepositToPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawFromPool(ctx context.Context, in *MsgWithdrawFromPool, opts ...grpc.CallOption) (*MsgWithdrawFromPoolResponse, error) {
	out := new(MsgWithdrawFromPoolResponse)
	err := c.cc.Invoke(ctx, "/ununifi.derivatives.Msg/WithdrawFromPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) OpenPosition(ctx context.Context, in *MsgOpenPosition, opts ...grpc.CallOption) (*MsgOpenPositionResponse, error) {
	out := new(MsgOpenPositionResponse)
	err := c.cc.Invoke(ctx, "/ununifi.derivatives.Msg/OpenPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClosePosition(ctx context.Context, in *MsgClosePosition, opts ...grpc.CallOption) (*MsgClosePositionResponse, error) {
	out := new(MsgClosePositionResponse)
	err := c.cc.Invoke(ctx, "/ununifi.derivatives.Msg/ClosePosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ReportLiquidation(ctx context.Context, in *MsgReportLiquidation, opts ...grpc.CallOption) (*MsgReportLiquidationResponse, error) {
	out := new(MsgReportLiquidationResponse)
	err := c.cc.Invoke(ctx, "/ununifi.derivatives.Msg/ReportLiquidation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ReportLevyPeriod(ctx context.Context, in *MsgReportLevyPeriod, opts ...grpc.CallOption) (*MsgReportLevyPeriodResponse, error) {
	out := new(MsgReportLevyPeriodResponse)
	err := c.cc.Invoke(ctx, "/ununifi.derivatives.Msg/ReportLevyPeriod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddMargin(ctx context.Context, in *MsgAddMargin, opts ...grpc.CallOption) (*MsgAddMarginResponse, error) {
	out := new(MsgAddMarginResponse)
	err := c.cc.Invoke(ctx, "/ununifi.derivatives.Msg/AddMargin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveMargin(ctx context.Context, in *MsgRemoveMargin, opts ...grpc.CallOption) (*MsgRemoveMarginResponse, error) {
	out := new(MsgRemoveMarginResponse)
	err := c.cc.Invoke(ctx, "/ununifi.derivatives.Msg/RemoveMargin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	DepositToPool(context.Context, *MsgDepositToPool) (*MsgDepositToPoolResponse, error)
	WithdrawFromPool(context.Context, *MsgWithdrawFromPool) (*MsgWithdrawFromPoolResponse, error)
	OpenPosition(context.Context, *MsgOpenPosition) (*MsgOpenPositionResponse, error)
	ClosePosition(context.Context, *MsgClosePosition) (*MsgClosePositionResponse, error)
	ReportLiquidation(context.Context, *MsgReportLiquidation) (*MsgReportLiquidationResponse, error)
	ReportLevyPeriod(context.Context, *MsgReportLevyPeriod) (*MsgReportLevyPeriodResponse, error)
	AddMargin(context.Context, *MsgAddMargin) (*MsgAddMarginResponse, error)
	RemoveMargin(context.Context, *MsgRemoveMargin) (*MsgRemoveMarginResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) DepositToPool(ctx context.Context, req *MsgDepositToPool) (*MsgDepositToPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositToPool not implemented")
}
func (*UnimplementedMsgServer) WithdrawFromPool(ctx context.Context, req *MsgWithdrawFromPool) (*MsgWithdrawFromPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawFromPool not implemented")
}
func (*UnimplementedMsgServer) OpenPosition(ctx context.Context, req *MsgOpenPosition) (*MsgOpenPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenPosition not implemented")
}
func (*UnimplementedMsgServer) ClosePosition(ctx context.Context, req *MsgClosePosition) (*MsgClosePositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClosePosition not implemented")
}
func (*UnimplementedMsgServer) ReportLiquidation(ctx context.Context, req *MsgReportLiquidation) (*MsgReportLiquidationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportLiquidation not implemented")
}
func (*UnimplementedMsgServer) ReportLevyPeriod(ctx context.Context, req *MsgReportLevyPeriod) (*MsgReportLevyPeriodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportLevyPeriod not implemented")
}
func (*UnimplementedMsgServer) AddMargin(ctx context.Context, req *MsgAddMargin) (*MsgAddMarginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMargin not implemented")
}
func (*UnimplementedMsgServer) RemoveMargin(ctx context.Context, req *MsgRemoveMargin) (*MsgRemoveMarginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMargin not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_DepositToPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDepositToPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DepositToPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.derivatives.Msg/DepositToPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DepositToPool(ctx, req.(*MsgDepositToPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawFromPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawFromPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawFromPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.derivatives.Msg/WithdrawFromPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawFromPool(ctx, req.(*MsgWithdrawFromPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_OpenPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgOpenPosition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).OpenPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.derivatives.Msg/OpenPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).OpenPosition(ctx, req.(*MsgOpenPosition))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClosePosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClosePosition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClosePosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.derivatives.Msg/ClosePosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClosePosition(ctx, req.(*MsgClosePosition))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ReportLiquidation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReportLiquidation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ReportLiquidation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.derivatives.Msg/ReportLiquidation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ReportLiquidation(ctx, req.(*MsgReportLiquidation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ReportLevyPeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReportLevyPeriod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ReportLevyPeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.derivatives.Msg/ReportLevyPeriod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ReportLevyPeriod(ctx, req.(*MsgReportLevyPeriod))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddMargin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddMargin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddMargin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.derivatives.Msg/AddMargin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddMargin(ctx, req.(*MsgAddMargin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveMargin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveMargin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveMargin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.derivatives.Msg/RemoveMargin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveMargin(ctx, req.(*MsgRemoveMargin))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ununifi.derivatives.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DepositToPool",
			Handler:    _Msg_DepositToPool_Handler,
		},
		{
			MethodName: "WithdrawFromPool",
			Handler:    _Msg_WithdrawFromPool_Handler,
		},
		{
			MethodName: "OpenPosition",
			Handler:    _Msg_OpenPosition_Handler,
		},
		{
			MethodName: "ClosePosition",
			Handler:    _Msg_ClosePosition_Handler,
		},
		{
			MethodName: "ReportLiquidation",
			Handler:    _Msg_ReportLiquidation_Handler,
		},
		{
			MethodName: "ReportLevyPeriod",
			Handler:    _Msg_ReportLevyPeriod_Handler,
		},
		{
			MethodName: "AddMargin",
			Handler:    _Msg_AddMargin_Handler,
		},
		{
			MethodName: "RemoveMargin",
			Handler:    _Msg_RemoveMargin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ununifi/derivatives/tx.proto",
}

func (m *MsgDepositToPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDepositToPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDepositToPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDepositToPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDepositToPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDepositToPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawFromPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawFromPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawFromPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RedeemDenom) > 0 {
		i -= len(m.RedeemDenom)
		copy(dAtA[i:], m.RedeemDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RedeemDenom)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.LptAmount.Size()
		i -= size
		if _, err := m.LptAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawFromPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawFromPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawFromPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgOpenPosition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgOpenPosition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgOpenPosition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PositionInstance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Market.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Margin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgOpenPositionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgOpenPositionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgOpenPositionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgClosePosition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClosePosition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClosePosition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PositionId) > 0 {
		i -= len(m.PositionId)
		copy(dAtA[i:], m.PositionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PositionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClosePositionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClosePositionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClosePositionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgReportLiquidation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReportLiquidation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReportLiquidation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardRecipient) > 0 {
		i -= len(m.RewardRecipient)
		copy(dAtA[i:], m.RewardRecipient)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RewardRecipient)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PositionId) > 0 {
		i -= len(m.PositionId)
		copy(dAtA[i:], m.PositionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PositionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgReportLiquidationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReportLiquidationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReportLiquidationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgReportLevyPeriod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReportLevyPeriod) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReportLevyPeriod) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardRecipient) > 0 {
		i -= len(m.RewardRecipient)
		copy(dAtA[i:], m.RewardRecipient)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RewardRecipient)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PositionId) > 0 {
		i -= len(m.PositionId)
		copy(dAtA[i:], m.PositionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PositionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgReportLevyPeriodResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReportLevyPeriodResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReportLevyPeriodResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddMargin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddMargin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddMargin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PositionId) > 0 {
		i -= len(m.PositionId)
		copy(dAtA[i:], m.PositionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PositionId)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddMarginResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddMarginResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddMarginResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRemoveMargin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveMargin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveMargin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PositionId) > 0 {
		i -= len(m.PositionId)
		copy(dAtA[i:], m.PositionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PositionId)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveMarginResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveMarginResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveMarginResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgDepositToPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgDepositToPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWithdrawFromPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.LptAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.RedeemDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgWithdrawFromPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgOpenPosition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Margin.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.Market.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.PositionInstance.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgOpenPositionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgClosePosition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PositionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgClosePositionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgReportLiquidation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PositionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RewardRecipient)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgReportLiquidationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgReportLevyPeriod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PositionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RewardRecipient)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgReportLevyPeriodResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddMargin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.PositionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddMarginResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRemoveMargin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.PositionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRemoveMarginResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgDepositToPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDepositToPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDepositToPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDepositToPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDepositToPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDepositToPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawFromPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawFromPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawFromPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LptAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LptAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedeemDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedeemDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawFromPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawFromPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawFromPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgOpenPosition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgOpenPosition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgOpenPosition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Margin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Margin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Market", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Market.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionInstance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PositionInstance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgOpenPositionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgOpenPositionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgOpenPositionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClosePosition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClosePosition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClosePosition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PositionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClosePositionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClosePositionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClosePositionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReportLiquidation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReportLiquidation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReportLiquidation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PositionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardRecipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardRecipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReportLiquidationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReportLiquidationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReportLiquidationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReportLevyPeriod) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReportLevyPeriod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReportLevyPeriod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PositionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardRecipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardRecipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReportLevyPeriodResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReportLevyPeriodResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReportLevyPeriodResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddMargin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddMargin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddMargin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PositionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddMarginResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddMarginResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddMarginResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveMargin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveMargin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveMargin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PositionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveMarginResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveMarginResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveMarginResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
