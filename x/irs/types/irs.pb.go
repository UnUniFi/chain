// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ununifi/irs/irs.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type InterestRateSwapVault struct {
	StrategyContract string `protobuf:"bytes,1,opt,name=strategy_contract,json=strategyContract,proto3" json:"strategy_contract,omitempty"`
	Name             string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description      string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	MaxMaturity      uint64 `protobuf:"varint,4,opt,name=max_maturity,json=maxMaturity,proto3" json:"max_maturity,omitempty"`
	Cycle            uint64 `protobuf:"varint,5,opt,name=cycle,proto3" json:"cycle,omitempty"`
	LastTrancheTime  uint64 `protobuf:"varint,6,opt,name=last_tranche_time,json=lastTrancheTime,proto3" json:"last_tranche_time,omitempty"`
	Denom            string `protobuf:"bytes,7,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *InterestRateSwapVault) Reset()         { *m = InterestRateSwapVault{} }
func (m *InterestRateSwapVault) String() string { return proto.CompactTextString(m) }
func (*InterestRateSwapVault) ProtoMessage()    {}
func (*InterestRateSwapVault) Descriptor() ([]byte, []int) {
	return fileDescriptor_d12c0f27bd074abe, []int{0}
}
func (m *InterestRateSwapVault) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterestRateSwapVault) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterestRateSwapVault.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterestRateSwapVault) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterestRateSwapVault.Merge(m, src)
}
func (m *InterestRateSwapVault) XXX_Size() int {
	return m.Size()
}
func (m *InterestRateSwapVault) XXX_DiscardUnknown() {
	xxx_messageInfo_InterestRateSwapVault.DiscardUnknown(m)
}

var xxx_messageInfo_InterestRateSwapVault proto.InternalMessageInfo

func (m *InterestRateSwapVault) GetStrategyContract() string {
	if m != nil {
		return m.StrategyContract
	}
	return ""
}

func (m *InterestRateSwapVault) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InterestRateSwapVault) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *InterestRateSwapVault) GetMaxMaturity() uint64 {
	if m != nil {
		return m.MaxMaturity
	}
	return 0
}

func (m *InterestRateSwapVault) GetCycle() uint64 {
	if m != nil {
		return m.Cycle
	}
	return 0
}

func (m *InterestRateSwapVault) GetLastTrancheTime() uint64 {
	if m != nil {
		return m.LastTrancheTime
	}
	return 0
}

func (m *InterestRateSwapVault) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func init() {
	proto.RegisterType((*InterestRateSwapVault)(nil), "ununifi.irs.InterestRateSwapVault")
}

func init() { proto.RegisterFile("ununifi/irs/irs.proto", fileDescriptor_d12c0f27bd074abe) }

var fileDescriptor_d12c0f27bd074abe = []byte{
	// 332 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0x31, 0x4b, 0x03, 0x31,
	0x18, 0x86, 0x7b, 0xda, 0x56, 0x4c, 0x05, 0x6d, 0x68, 0xe1, 0xec, 0x10, 0xaa, 0x38, 0x14, 0x85,
	0x86, 0xe2, 0xee, 0xa0, 0x20, 0x38, 0xb8, 0xd4, 0xd6, 0xc1, 0xe5, 0xc8, 0xa5, 0xf1, 0x1a, 0x68,
	0x92, 0x23, 0xf9, 0x4e, 0x7b, 0xff, 0xc2, 0x9f, 0xe5, 0xd8, 0xd1, 0x51, 0xda, 0xdf, 0xe0, 0x2e,
	0x97, 0x9c, 0xe0, 0x10, 0xf8, 0xde, 0xe7, 0x79, 0x09, 0x21, 0x1f, 0xea, 0x17, 0xba, 0xd0, 0xf2,
	0x55, 0x52, 0x69, 0x5d, 0x75, 0xc6, 0xb9, 0x35, 0x60, 0x70, 0xa7, 0xc6, 0x63, 0x69, 0xdd, 0xa0,
	0x97, 0x99, 0xcc, 0x78, 0x4e, 0xab, 0x29, 0x54, 0x06, 0xa7, 0xdc, 0x38, 0x65, 0x5c, 0x12, 0x44,
	0x08, 0xb5, 0x22, 0x21, 0xd1, 0x94, 0x39, 0x41, 0xdf, 0x26, 0xa9, 0x00, 0x36, 0xa1, 0xdc, 0x48,
	0x1d, 0xfc, 0xf9, 0x4f, 0x84, 0xfa, 0x0f, 0x1a, 0x84, 0x15, 0x0e, 0xa6, 0x0c, 0xc4, 0xd3, 0x3b,
	0xcb, 0x9f, 0x59, 0xb1, 0x02, 0x7c, 0x85, 0xba, 0x0e, 0x2c, 0x03, 0x91, 0x95, 0x09, 0x37, 0x1a,
	0x2c, 0xe3, 0x10, 0x47, 0xc3, 0x68, 0x74, 0x38, 0x3d, 0xf9, 0x13, 0x77, 0x35, 0xc7, 0x18, 0x35,
	0x35, 0x53, 0x22, 0xde, 0xf3, 0xde, 0xcf, 0x78, 0x88, 0x3a, 0x0b, 0xe1, 0xb8, 0x95, 0x39, 0x48,
	0xa3, 0xe3, 0x7d, 0xaf, 0xfe, 0x23, 0x7c, 0x86, 0x8e, 0x14, 0x5b, 0x27, 0x8a, 0x41, 0x61, 0x25,
	0x94, 0x71, 0x73, 0x18, 0x8d, 0x9a, 0xd3, 0x8e, 0x62, 0xeb, 0xc7, 0x1a, 0xe1, 0x1e, 0x6a, 0xf1,
	0x92, 0xaf, 0x44, 0xdc, 0xf2, 0x2e, 0x04, 0x7c, 0x89, 0xba, 0x2b, 0xe6, 0x20, 0x01, 0xcb, 0x34,
	0x5f, 0x8a, 0x04, 0xa4, 0x12, 0x71, 0xdb, 0x37, 0x8e, 0x2b, 0x31, 0x0b, 0x7c, 0x26, 0x95, 0xa8,
	0x6e, 0x58, 0x08, 0x6d, 0x54, 0x7c, 0xe0, 0x1f, 0x10, 0xc2, 0xed, 0xcd, 0xe7, 0x96, 0x44, 0x9b,
	0x2d, 0x89, 0xbe, 0xb7, 0x24, 0xfa, 0xd8, 0x91, 0xc6, 0x66, 0x47, 0x1a, 0x5f, 0x3b, 0xd2, 0x78,
	0xb9, 0xc8, 0x24, 0x2c, 0x8b, 0x74, 0xcc, 0x8d, 0xa2, 0x73, 0x3d, 0xd7, 0xf2, 0x5e, 0x52, 0xbe,
	0x64, 0x52, 0xd3, 0xb5, 0xdf, 0x0c, 0x94, 0xb9, 0x70, 0x69, 0xdb, 0x7f, 0xdf, 0xf5, 0x6f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x2d, 0xa7, 0xb7, 0x4c, 0xb5, 0x01, 0x00, 0x00,
}

func (m *InterestRateSwapVault) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterestRateSwapVault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterestRateSwapVault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintIrs(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x3a
	}
	if m.LastTrancheTime != 0 {
		i = encodeVarintIrs(dAtA, i, uint64(m.LastTrancheTime))
		i--
		dAtA[i] = 0x30
	}
	if m.Cycle != 0 {
		i = encodeVarintIrs(dAtA, i, uint64(m.Cycle))
		i--
		dAtA[i] = 0x28
	}
	if m.MaxMaturity != 0 {
		i = encodeVarintIrs(dAtA, i, uint64(m.MaxMaturity))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintIrs(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintIrs(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StrategyContract) > 0 {
		i -= len(m.StrategyContract)
		copy(dAtA[i:], m.StrategyContract)
		i = encodeVarintIrs(dAtA, i, uint64(len(m.StrategyContract)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintIrs(dAtA []byte, offset int, v uint64) int {
	offset -= sovIrs(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InterestRateSwapVault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StrategyContract)
	if l > 0 {
		n += 1 + l + sovIrs(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovIrs(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovIrs(uint64(l))
	}
	if m.MaxMaturity != 0 {
		n += 1 + sovIrs(uint64(m.MaxMaturity))
	}
	if m.Cycle != 0 {
		n += 1 + sovIrs(uint64(m.Cycle))
	}
	if m.LastTrancheTime != 0 {
		n += 1 + sovIrs(uint64(m.LastTrancheTime))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovIrs(uint64(l))
	}
	return n
}

func sovIrs(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIrs(x uint64) (n int) {
	return sovIrs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InterestRateSwapVault) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIrs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterestRateSwapVault: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterestRateSwapVault: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrategyContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIrs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIrs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIrs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StrategyContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIrs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIrs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIrs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIrs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIrs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIrs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMaturity", wireType)
			}
			m.MaxMaturity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIrs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxMaturity |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cycle", wireType)
			}
			m.Cycle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIrs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cycle |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTrancheTime", wireType)
			}
			m.LastTrancheTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIrs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastTrancheTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIrs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIrs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIrs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIrs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIrs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIrs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIrs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIrs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIrs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIrs
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIrs
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIrs
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIrs        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIrs          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIrs = fmt.Errorf("proto: unexpected end of group")
)
