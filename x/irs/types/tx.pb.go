// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ununifi/irs/tx.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TrancheType int32

const (
	TrancheType_NORMAL_YIELD             TrancheType = 0
	TrancheType_FIXED_YIELD              TrancheType = 1
	TrancheType_LEVERAGED_VARIABLE_YIELD TrancheType = 2
)

var TrancheType_name = map[int32]string{
	0: "NORMAL_YIELD",
	1: "FIXED_YIELD",
	2: "LEVERAGED_VARIABLE_YIELD",
}

var TrancheType_value = map[string]int32{
	"NORMAL_YIELD":             0,
	"FIXED_YIELD":              1,
	"LEVERAGED_VARIABLE_YIELD": 2,
}

func (x TrancheType) String() string {
	return proto.EnumName(TrancheType_name, int32(x))
}

func (TrancheType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d7c994e82459528c, []int{0}
}

type MsgUpdateParams struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7c994e82459528c, []int{0}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7c994e82459528c, []int{1}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

// this line is used by starport scaffolding # proto/tx/message
type MsgRegisterInterestRateSwapVault struct {
	Sender           string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	StrategyContract string `protobuf:"bytes,2,opt,name=strategy_contract,json=strategyContract,proto3" json:"strategy_contract,omitempty"`
	Name             string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description      string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	MaxMaturity      uint64 `protobuf:"varint,5,opt,name=max_maturity,json=maxMaturity,proto3" json:"max_maturity,omitempty"`
	Cycle            uint64 `protobuf:"varint,6,opt,name=cycle,proto3" json:"cycle,omitempty"`
}

func (m *MsgRegisterInterestRateSwapVault) Reset()         { *m = MsgRegisterInterestRateSwapVault{} }
func (m *MsgRegisterInterestRateSwapVault) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterInterestRateSwapVault) ProtoMessage()    {}
func (*MsgRegisterInterestRateSwapVault) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7c994e82459528c, []int{2}
}
func (m *MsgRegisterInterestRateSwapVault) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterInterestRateSwapVault) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterInterestRateSwapVault.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterInterestRateSwapVault) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterInterestRateSwapVault.Merge(m, src)
}
func (m *MsgRegisterInterestRateSwapVault) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterInterestRateSwapVault) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterInterestRateSwapVault.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterInterestRateSwapVault proto.InternalMessageInfo

type MsgRegisterInterestRateSwapVaultResponse struct {
}

func (m *MsgRegisterInterestRateSwapVaultResponse) Reset() {
	*m = MsgRegisterInterestRateSwapVaultResponse{}
}
func (m *MsgRegisterInterestRateSwapVaultResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterInterestRateSwapVaultResponse) ProtoMessage()    {}
func (*MsgRegisterInterestRateSwapVaultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7c994e82459528c, []int{3}
}
func (m *MsgRegisterInterestRateSwapVaultResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterInterestRateSwapVaultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterInterestRateSwapVaultResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterInterestRateSwapVaultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterInterestRateSwapVaultResponse.Merge(m, src)
}
func (m *MsgRegisterInterestRateSwapVaultResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterInterestRateSwapVaultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterInterestRateSwapVaultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterInterestRateSwapVaultResponse proto.InternalMessageInfo

type MsgDepositLiquidity struct {
	Sender         string                `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	TrancheId      uint64                `protobuf:"varint,2,opt,name=tranche_id,json=trancheId,proto3" json:"tranche_id,omitempty"`
	ShareOutAmount cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=share_out_amount,json=shareOutAmount,proto3,customtype=cosmossdk.io/math.Int" json:"share_out_amount"`
	TokenInMaxs    []types.Coin          `protobuf:"bytes,4,rep,name=token_in_maxs,json=tokenInMaxs,proto3" json:"token_in_maxs"`
}

func (m *MsgDepositLiquidity) Reset()         { *m = MsgDepositLiquidity{} }
func (m *MsgDepositLiquidity) String() string { return proto.CompactTextString(m) }
func (*MsgDepositLiquidity) ProtoMessage()    {}
func (*MsgDepositLiquidity) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7c994e82459528c, []int{4}
}
func (m *MsgDepositLiquidity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDepositLiquidity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDepositLiquidity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDepositLiquidity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDepositLiquidity.Merge(m, src)
}
func (m *MsgDepositLiquidity) XXX_Size() int {
	return m.Size()
}
func (m *MsgDepositLiquidity) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDepositLiquidity.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDepositLiquidity proto.InternalMessageInfo

type MsgDepositLiquidityResponse struct {
}

func (m *MsgDepositLiquidityResponse) Reset()         { *m = MsgDepositLiquidityResponse{} }
func (m *MsgDepositLiquidityResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDepositLiquidityResponse) ProtoMessage()    {}
func (*MsgDepositLiquidityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7c994e82459528c, []int{5}
}
func (m *MsgDepositLiquidityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDepositLiquidityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDepositLiquidityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDepositLiquidityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDepositLiquidityResponse.Merge(m, src)
}
func (m *MsgDepositLiquidityResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDepositLiquidityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDepositLiquidityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDepositLiquidityResponse proto.InternalMessageInfo

type MsgWithdrawLiquidity struct {
	Sender       string                `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	TrancheId    uint64                `protobuf:"varint,2,opt,name=tranche_id,json=trancheId,proto3" json:"tranche_id,omitempty"`
	ShareAmount  cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=share_amount,json=shareAmount,proto3,customtype=cosmossdk.io/math.Int" json:"share_amount"`
	TokenOutMins []types.Coin          `protobuf:"bytes,4,rep,name=token_out_mins,json=tokenOutMins,proto3" json:"token_out_mins"`
}

func (m *MsgWithdrawLiquidity) Reset()         { *m = MsgWithdrawLiquidity{} }
func (m *MsgWithdrawLiquidity) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawLiquidity) ProtoMessage()    {}
func (*MsgWithdrawLiquidity) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7c994e82459528c, []int{6}
}
func (m *MsgWithdrawLiquidity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawLiquidity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawLiquidity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawLiquidity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawLiquidity.Merge(m, src)
}
func (m *MsgWithdrawLiquidity) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawLiquidity) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawLiquidity.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawLiquidity proto.InternalMessageInfo

func (m *MsgWithdrawLiquidity) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgWithdrawLiquidity) GetTrancheId() uint64 {
	if m != nil {
		return m.TrancheId
	}
	return 0
}

func (m *MsgWithdrawLiquidity) GetTokenOutMins() []types.Coin {
	if m != nil {
		return m.TokenOutMins
	}
	return nil
}

type MsgWithdrawLiquidityResponse struct {
}

func (m *MsgWithdrawLiquidityResponse) Reset()         { *m = MsgWithdrawLiquidityResponse{} }
func (m *MsgWithdrawLiquidityResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawLiquidityResponse) ProtoMessage()    {}
func (*MsgWithdrawLiquidityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7c994e82459528c, []int{7}
}
func (m *MsgWithdrawLiquidityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawLiquidityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawLiquidityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawLiquidityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawLiquidityResponse.Merge(m, src)
}
func (m *MsgWithdrawLiquidityResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawLiquidityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawLiquidityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawLiquidityResponse proto.InternalMessageInfo

type MsgDepositToTranche struct {
	Sender      string                `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	TrancheId   uint64                `protobuf:"varint,2,opt,name=tranche_id,json=trancheId,proto3" json:"tranche_id,omitempty"`
	TrancheType TrancheType           `protobuf:"varint,3,opt,name=tranche_type,json=trancheType,proto3,enum=ununifi.irs.TrancheType" json:"tranche_type,omitempty"`
	Token       types.Coin            `protobuf:"bytes,4,opt,name=token,proto3" json:"token"`
	RequiredYt  cosmossdk_io_math.Int `protobuf:"bytes,5,opt,name=required_yt,json=requiredYt,proto3,customtype=cosmossdk.io/math.Int" json:"required_yt"`
}

func (m *MsgDepositToTranche) Reset()         { *m = MsgDepositToTranche{} }
func (m *MsgDepositToTranche) String() string { return proto.CompactTextString(m) }
func (*MsgDepositToTranche) ProtoMessage()    {}
func (*MsgDepositToTranche) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7c994e82459528c, []int{8}
}
func (m *MsgDepositToTranche) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDepositToTranche) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDepositToTranche.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDepositToTranche) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDepositToTranche.Merge(m, src)
}
func (m *MsgDepositToTranche) XXX_Size() int {
	return m.Size()
}
func (m *MsgDepositToTranche) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDepositToTranche.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDepositToTranche proto.InternalMessageInfo

type MsgDepositToTrancheResponse struct {
}

func (m *MsgDepositToTrancheResponse) Reset()         { *m = MsgDepositToTrancheResponse{} }
func (m *MsgDepositToTrancheResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDepositToTrancheResponse) ProtoMessage()    {}
func (*MsgDepositToTrancheResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7c994e82459528c, []int{9}
}
func (m *MsgDepositToTrancheResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDepositToTrancheResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDepositToTrancheResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDepositToTrancheResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDepositToTrancheResponse.Merge(m, src)
}
func (m *MsgDepositToTrancheResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDepositToTrancheResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDepositToTrancheResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDepositToTrancheResponse proto.InternalMessageInfo

type MsgWithdrawFromTranche struct {
	Sender      string                `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	TrancheId   uint64                `protobuf:"varint,2,opt,name=tranche_id,json=trancheId,proto3" json:"tranche_id,omitempty"`
	TrancheType TrancheType           `protobuf:"varint,3,opt,name=tranche_type,json=trancheType,proto3,enum=ununifi.irs.TrancheType" json:"tranche_type,omitempty"`
	Tokens      []types.Coin          `protobuf:"bytes,4,rep,name=tokens,proto3" json:"tokens"`
	RequiredUt  cosmossdk_io_math.Int `protobuf:"bytes,5,opt,name=required_ut,json=requiredUt,proto3,customtype=cosmossdk.io/math.Int" json:"required_ut"`
}

func (m *MsgWithdrawFromTranche) Reset()         { *m = MsgWithdrawFromTranche{} }
func (m *MsgWithdrawFromTranche) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawFromTranche) ProtoMessage()    {}
func (*MsgWithdrawFromTranche) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7c994e82459528c, []int{10}
}
func (m *MsgWithdrawFromTranche) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawFromTranche) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawFromTranche.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawFromTranche) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawFromTranche.Merge(m, src)
}
func (m *MsgWithdrawFromTranche) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawFromTranche) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawFromTranche.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawFromTranche proto.InternalMessageInfo

type MsgWithdrawFromTrancheResponse struct {
}

func (m *MsgWithdrawFromTrancheResponse) Reset()         { *m = MsgWithdrawFromTrancheResponse{} }
func (m *MsgWithdrawFromTrancheResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawFromTrancheResponse) ProtoMessage()    {}
func (*MsgWithdrawFromTrancheResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7c994e82459528c, []int{11}
}
func (m *MsgWithdrawFromTrancheResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawFromTrancheResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawFromTrancheResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawFromTrancheResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawFromTrancheResponse.Merge(m, src)
}
func (m *MsgWithdrawFromTrancheResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawFromTrancheResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawFromTrancheResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawFromTrancheResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("ununifi.irs.TrancheType", TrancheType_name, TrancheType_value)
	proto.RegisterType((*MsgUpdateParams)(nil), "ununifi.irs.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "ununifi.irs.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgRegisterInterestRateSwapVault)(nil), "ununifi.irs.MsgRegisterInterestRateSwapVault")
	proto.RegisterType((*MsgRegisterInterestRateSwapVaultResponse)(nil), "ununifi.irs.MsgRegisterInterestRateSwapVaultResponse")
	proto.RegisterType((*MsgDepositLiquidity)(nil), "ununifi.irs.MsgDepositLiquidity")
	proto.RegisterType((*MsgDepositLiquidityResponse)(nil), "ununifi.irs.MsgDepositLiquidityResponse")
	proto.RegisterType((*MsgWithdrawLiquidity)(nil), "ununifi.irs.MsgWithdrawLiquidity")
	proto.RegisterType((*MsgWithdrawLiquidityResponse)(nil), "ununifi.irs.MsgWithdrawLiquidityResponse")
	proto.RegisterType((*MsgDepositToTranche)(nil), "ununifi.irs.MsgDepositToTranche")
	proto.RegisterType((*MsgDepositToTrancheResponse)(nil), "ununifi.irs.MsgDepositToTrancheResponse")
	proto.RegisterType((*MsgWithdrawFromTranche)(nil), "ununifi.irs.MsgWithdrawFromTranche")
	proto.RegisterType((*MsgWithdrawFromTrancheResponse)(nil), "ununifi.irs.MsgWithdrawFromTrancheResponse")
}

func init() { proto.RegisterFile("ununifi/irs/tx.proto", fileDescriptor_d7c994e82459528c) }

var fileDescriptor_d7c994e82459528c = []byte{
	// 958 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x96, 0x41, 0x6f, 0x1b, 0x45,
	0x14, 0xc7, 0xbd, 0x89, 0x13, 0x29, 0x6f, 0x4d, 0xea, 0x6e, 0x5c, 0xba, 0x31, 0x89, 0xe3, 0x86,
	0x1e, 0x4c, 0xa2, 0xec, 0x92, 0xa0, 0x0a, 0x09, 0x24, 0x24, 0x3b, 0x71, 0x90, 0x25, 0x3b, 0x41,
	0xdb, 0x38, 0x50, 0x0e, 0xac, 0x26, 0xbb, 0xc3, 0x7a, 0xd4, 0xee, 0xec, 0x76, 0x66, 0xb6, 0xb5,
	0xaf, 0x48, 0x95, 0x90, 0xb8, 0x70, 0xe3, 0xda, 0x8f, 0xc0, 0xa1, 0x57, 0x2e, 0x9c, 0x7a, 0xac,
	0x7a, 0x42, 0x1c, 0x2a, 0x94, 0x1c, 0xe0, 0xc2, 0x57, 0x40, 0xc8, 0xbb, 0x63, 0xd7, 0x76, 0xec,
	0xc4, 0x29, 0x20, 0x71, 0xb2, 0xf7, 0xbd, 0xff, 0x7b, 0xf3, 0xde, 0x6f, 0xe7, 0xcd, 0x2c, 0xe4,
	0x22, 0x1a, 0x51, 0xf2, 0x35, 0x31, 0x09, 0xe3, 0xa6, 0x68, 0x1b, 0x21, 0x0b, 0x44, 0xa0, 0xa9,
	0xd2, 0x6a, 0x10, 0xc6, 0xf3, 0x39, 0x2f, 0xf0, 0x82, 0xd8, 0x6e, 0x76, 0xff, 0x25, 0x92, 0xfc,
	0x4d, 0x27, 0xe0, 0x7e, 0xc0, 0x4d, 0x9f, 0x7b, 0xe6, 0xa3, 0xed, 0xee, 0x8f, 0x74, 0x2c, 0x27,
	0x0e, 0x3b, 0x89, 0x48, 0x1e, 0xa4, 0xab, 0x20, 0x63, 0x4e, 0x10, 0xc7, 0xe6, 0xa3, 0xed, 0x13,
	0x2c, 0xd0, 0xb6, 0xe9, 0x04, 0x84, 0x4a, 0xff, 0x8d, 0xc1, 0x62, 0x08, 0xeb, 0x85, 0xe9, 0x83,
	0xe6, 0x10, 0x31, 0xe4, 0x4b, 0xcf, 0xfa, 0x77, 0x0a, 0x5c, 0x6b, 0x70, 0xaf, 0x19, 0xba, 0x48,
	0xe0, 0xcf, 0x62, 0x8f, 0xf6, 0x3e, 0xcc, 0x73, 0x4c, 0x5d, 0xcc, 0x74, 0xa5, 0xa8, 0x94, 0x16,
	0x2a, 0xfa, 0xcb, 0x67, 0x5b, 0x39, 0x59, 0x46, 0xd9, 0x75, 0x19, 0xe6, 0xfc, 0xae, 0x60, 0x84,
	0x7a, 0x96, 0xd4, 0x69, 0xdb, 0x30, 0x9f, 0x64, 0xd5, 0x67, 0x8a, 0x4a, 0x49, 0xdd, 0x59, 0x32,
	0x06, 0xda, 0x37, 0x92, 0xb4, 0x95, 0xf4, 0xf3, 0x57, 0x6b, 0x29, 0x4b, 0x0a, 0x3f, 0x5a, 0xfa,
	0xf6, 0xe9, 0x5a, 0xea, 0x8f, 0xa7, 0x6b, 0xa9, 0x6f, 0x7e, 0xff, 0x71, 0x43, 0xe6, 0x59, 0x5f,
	0x86, 0x9b, 0x23, 0xc5, 0x58, 0x98, 0x87, 0x01, 0xe5, 0x78, 0xfd, 0xc9, 0x0c, 0x14, 0x1b, 0xdc,
	0xb3, 0xb0, 0x47, 0xb8, 0xc0, 0xac, 0x46, 0x05, 0x66, 0x98, 0x0b, 0x0b, 0x09, 0x7c, 0xf7, 0x31,
	0x0a, 0x8f, 0x51, 0xf4, 0x40, 0xbc, 0x41, 0xe5, 0x9b, 0x70, 0x9d, 0x0b, 0x86, 0x04, 0xf6, 0x3a,
	0xb6, 0x13, 0x50, 0xc1, 0x90, 0x23, 0xe2, 0x26, 0x16, 0xac, 0x6c, 0xcf, 0xb1, 0x2b, 0xed, 0x9a,
	0x06, 0x69, 0x8a, 0x7c, 0xac, 0xcf, 0xc6, 0xfe, 0xf8, 0xbf, 0x56, 0x04, 0xd5, 0xc5, 0xdc, 0x61,
	0x24, 0x14, 0x24, 0xa0, 0x7a, 0x3a, 0x76, 0x0d, 0x9a, 0xb4, 0x5b, 0x90, 0xf1, 0x51, 0xdb, 0xf6,
	0x91, 0x88, 0x18, 0x11, 0x1d, 0x7d, 0xae, 0xa8, 0x94, 0xd2, 0x96, 0xea, 0xa3, 0x76, 0x43, 0x9a,
	0xb4, 0x1c, 0xcc, 0x39, 0x1d, 0xe7, 0x01, 0xd6, 0xe7, 0x63, 0x5f, 0xf2, 0x30, 0x1e, 0xd1, 0x06,
	0x94, 0x2e, 0xc3, 0xd0, 0x67, 0xf6, 0xc3, 0x0c, 0x2c, 0x35, 0xb8, 0xb7, 0x87, 0xc3, 0x80, 0x13,
	0x51, 0x27, 0x0f, 0x23, 0xe2, 0x76, 0x97, 0xbb, 0x3a, 0xa6, 0x55, 0x00, 0xc1, 0x10, 0x75, 0x5a,
	0xd8, 0x26, 0x6e, 0xcc, 0x27, 0x6d, 0x2d, 0x48, 0x4b, 0xcd, 0xd5, 0x9a, 0x90, 0xe5, 0x2d, 0xc4,
	0xb0, 0x1d, 0x44, 0xc2, 0x46, 0x7e, 0x10, 0x51, 0x91, 0x40, 0xaa, 0x6c, 0x76, 0x5f, 0xfa, 0xaf,
	0xaf, 0xd6, 0x6e, 0x24, 0xe9, 0xb9, 0x7b, 0xdf, 0x20, 0x81, 0xe9, 0x23, 0xd1, 0x32, 0x6a, 0x54,
	0xbc, 0x7c, 0xb6, 0x05, 0x72, 0xdd, 0x1a, 0x15, 0xd6, 0x62, 0x9c, 0xe4, 0x30, 0x12, 0xe5, 0x38,
	0x85, 0xb6, 0x0b, 0x6f, 0x89, 0xe0, 0x3e, 0xa6, 0x36, 0xa1, 0xb6, 0x8f, 0xda, 0x5c, 0x4f, 0x17,
	0x67, 0x4b, 0xea, 0xce, 0xb2, 0x21, 0x63, 0xba, 0x53, 0x60, 0xc8, 0x29, 0x30, 0x76, 0x03, 0x42,
	0xe5, 0x1e, 0x53, 0xe3, 0xa8, 0x1a, 0x6d, 0xa0, 0xf6, 0x84, 0x8d, 0xb6, 0x0a, 0xef, 0x8c, 0x01,
	0xd3, 0x07, 0xf7, 0x97, 0x02, 0xb9, 0x06, 0xf7, 0x3e, 0x27, 0xa2, 0xe5, 0x32, 0xf4, 0xf8, 0x3f,
	0x24, 0x77, 0x00, 0x99, 0x84, 0xdc, 0x9b, 0x53, 0x53, 0xe3, 0x04, 0x12, 0x59, 0x15, 0x16, 0x13,
	0x64, 0xdd, 0x37, 0xe1, 0x13, 0x3a, 0x35, 0xb3, 0x4c, 0x1c, 0x76, 0x18, 0x89, 0x06, 0xa1, 0x7c,
	0xbd, 0x00, 0x2b, 0xe3, 0xfa, 0xef, 0x03, 0xfa, 0x69, 0x68, 0x67, 0x1d, 0x05, 0x47, 0x49, 0x43,
	0xff, 0x3e, 0x9f, 0x8f, 0x21, 0xd3, 0x73, 0x8b, 0x4e, 0x98, 0x8c, 0xde, 0xe2, 0x8e, 0x3e, 0x74,
	0xbe, 0xc8, 0xc5, 0x8f, 0x3a, 0x21, 0xb6, 0x54, 0xf1, 0xfa, 0x41, 0xbb, 0x03, 0x73, 0x71, 0x57,
	0xf1, 0x54, 0x4e, 0xc1, 0x20, 0x51, 0x6b, 0x75, 0x50, 0x19, 0x7e, 0x18, 0x11, 0x86, 0x5d, 0xbb,
	0x23, 0xe2, 0x79, 0xbd, 0xe2, 0x2b, 0x81, 0x5e, 0xfc, 0x3d, 0x31, 0xc5, 0xfe, 0xeb, 0xe3, 0xeb,
	0xe3, 0xfd, 0x79, 0x06, 0xde, 0x1e, 0xe0, 0xbf, 0xcf, 0x02, 0xff, 0xff, 0x49, 0xf8, 0x43, 0x98,
	0x8f, 0x99, 0x4d, 0xbd, 0xcd, 0xa4, 0x7c, 0x88, 0x71, 0xf4, 0xcf, 0x18, 0x37, 0x27, 0x30, 0x2e,
	0x42, 0x61, 0x3c, 0xc3, 0x1e, 0xe6, 0x8d, 0x03, 0x50, 0x07, 0x3a, 0xd3, 0xb2, 0x90, 0x39, 0x38,
	0xb4, 0x1a, 0xe5, 0xba, 0x7d, 0xaf, 0x56, 0xad, 0xef, 0x65, 0x53, 0xda, 0x35, 0x50, 0xf7, 0x6b,
	0x5f, 0x54, 0xf7, 0xa4, 0x41, 0xd1, 0x56, 0x40, 0xaf, 0x57, 0x8f, 0xab, 0x56, 0xf9, 0xd3, 0xea,
	0x9e, 0x7d, 0x5c, 0xb6, 0x6a, 0xe5, 0x4a, 0xbd, 0x2a, 0xbd, 0x33, 0x3b, 0x7f, 0xa6, 0x61, 0xb6,
	0xc1, 0x3d, 0xcd, 0x82, 0xcc, 0xd0, 0x85, 0xba, 0x32, 0x04, 0x73, 0xe4, 0x86, 0xcb, 0xdf, 0xbe,
	0xc8, 0xdb, 0xab, 0x55, 0x7b, 0xa2, 0xc0, 0xea, 0xc5, 0x97, 0xdf, 0xd6, 0x68, 0x9e, 0x0b, 0xe5,
	0xf9, 0x3b, 0x57, 0x92, 0xf7, 0xeb, 0xf8, 0x0a, 0xb2, 0xe7, 0xee, 0x93, 0xe2, 0x68, 0xaa, 0x51,
	0x45, 0xbe, 0x74, 0x99, 0xa2, 0x9f, 0x1f, 0xc1, 0xf5, 0xf3, 0xc7, 0xee, 0xad, 0xd1, 0xf0, 0x73,
	0x92, 0xfc, 0x7b, 0x97, 0x4a, 0xc6, 0xb4, 0xf0, 0xfa, 0xe0, 0x9a, 0xd4, 0x42, 0x5f, 0x31, 0xb1,
	0x85, 0x73, 0xd3, 0xab, 0x79, 0xb0, 0x34, 0x6e, 0x72, 0xdf, 0x9d, 0x54, 0xe1, 0x80, 0x28, 0xbf,
	0x39, 0x85, 0xa8, 0xb7, 0x50, 0xe5, 0x93, 0xe7, 0xa7, 0x05, 0xe5, 0xc5, 0x69, 0x41, 0xf9, 0xed,
	0xb4, 0xa0, 0x7c, 0x7f, 0x56, 0x48, 0xbd, 0x38, 0x2b, 0xa4, 0x7e, 0x39, 0x2b, 0xa4, 0xbe, 0xbc,
	0xed, 0x11, 0xd1, 0x8a, 0x4e, 0x0c, 0x27, 0xf0, 0xcd, 0x26, 0x6d, 0x52, 0xb2, 0x4f, 0x4c, 0xa7,
	0x85, 0x08, 0x35, 0xdb, 0xc9, 0x77, 0x6a, 0x27, 0xc4, 0xfc, 0x64, 0x3e, 0xfe, 0x06, 0xfc, 0xe0,
	0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x93, 0x6a, 0x24, 0xc9, 0xc3, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// this line is used by starport scaffolding # proto/tx/rpc
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	RegisterInterestRateSwapVault(ctx context.Context, in *MsgRegisterInterestRateSwapVault, opts ...grpc.CallOption) (*MsgRegisterInterestRateSwapVaultResponse, error)
	DepositLiquidity(ctx context.Context, in *MsgDepositLiquidity, opts ...grpc.CallOption) (*MsgDepositLiquidityResponse, error)
	WithdrawLiquidity(ctx context.Context, in *MsgWithdrawLiquidity, opts ...grpc.CallOption) (*MsgWithdrawLiquidityResponse, error)
	DepositToTranche(ctx context.Context, in *MsgDepositToTranche, opts ...grpc.CallOption) (*MsgDepositToTrancheResponse, error)
	WithdrawFromTranche(ctx context.Context, in *MsgWithdrawFromTranche, opts ...grpc.CallOption) (*MsgWithdrawFromTrancheResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/ununifi.irs.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterInterestRateSwapVault(ctx context.Context, in *MsgRegisterInterestRateSwapVault, opts ...grpc.CallOption) (*MsgRegisterInterestRateSwapVaultResponse, error) {
	out := new(MsgRegisterInterestRateSwapVaultResponse)
	err := c.cc.Invoke(ctx, "/ununifi.irs.Msg/RegisterInterestRateSwapVault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DepositLiquidity(ctx context.Context, in *MsgDepositLiquidity, opts ...grpc.CallOption) (*MsgDepositLiquidityResponse, error) {
	out := new(MsgDepositLiquidityResponse)
	err := c.cc.Invoke(ctx, "/ununifi.irs.Msg/DepositLiquidity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawLiquidity(ctx context.Context, in *MsgWithdrawLiquidity, opts ...grpc.CallOption) (*MsgWithdrawLiquidityResponse, error) {
	out := new(MsgWithdrawLiquidityResponse)
	err := c.cc.Invoke(ctx, "/ununifi.irs.Msg/WithdrawLiquidity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DepositToTranche(ctx context.Context, in *MsgDepositToTranche, opts ...grpc.CallOption) (*MsgDepositToTrancheResponse, error) {
	out := new(MsgDepositToTrancheResponse)
	err := c.cc.Invoke(ctx, "/ununifi.irs.Msg/DepositToTranche", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawFromTranche(ctx context.Context, in *MsgWithdrawFromTranche, opts ...grpc.CallOption) (*MsgWithdrawFromTrancheResponse, error) {
	out := new(MsgWithdrawFromTrancheResponse)
	err := c.cc.Invoke(ctx, "/ununifi.irs.Msg/WithdrawFromTranche", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// this line is used by starport scaffolding # proto/tx/rpc
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	RegisterInterestRateSwapVault(context.Context, *MsgRegisterInterestRateSwapVault) (*MsgRegisterInterestRateSwapVaultResponse, error)
	DepositLiquidity(context.Context, *MsgDepositLiquidity) (*MsgDepositLiquidityResponse, error)
	WithdrawLiquidity(context.Context, *MsgWithdrawLiquidity) (*MsgWithdrawLiquidityResponse, error)
	DepositToTranche(context.Context, *MsgDepositToTranche) (*MsgDepositToTrancheResponse, error)
	WithdrawFromTranche(context.Context, *MsgWithdrawFromTranche) (*MsgWithdrawFromTrancheResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) RegisterInterestRateSwapVault(ctx context.Context, req *MsgRegisterInterestRateSwapVault) (*MsgRegisterInterestRateSwapVaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterInterestRateSwapVault not implemented")
}
func (*UnimplementedMsgServer) DepositLiquidity(ctx context.Context, req *MsgDepositLiquidity) (*MsgDepositLiquidityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositLiquidity not implemented")
}
func (*UnimplementedMsgServer) WithdrawLiquidity(ctx context.Context, req *MsgWithdrawLiquidity) (*MsgWithdrawLiquidityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawLiquidity not implemented")
}
func (*UnimplementedMsgServer) DepositToTranche(ctx context.Context, req *MsgDepositToTranche) (*MsgDepositToTrancheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositToTranche not implemented")
}
func (*UnimplementedMsgServer) WithdrawFromTranche(ctx context.Context, req *MsgWithdrawFromTranche) (*MsgWithdrawFromTrancheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawFromTranche not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.irs.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterInterestRateSwapVault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterInterestRateSwapVault)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterInterestRateSwapVault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.irs.Msg/RegisterInterestRateSwapVault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterInterestRateSwapVault(ctx, req.(*MsgRegisterInterestRateSwapVault))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DepositLiquidity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDepositLiquidity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DepositLiquidity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.irs.Msg/DepositLiquidity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DepositLiquidity(ctx, req.(*MsgDepositLiquidity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawLiquidity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawLiquidity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawLiquidity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.irs.Msg/WithdrawLiquidity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawLiquidity(ctx, req.(*MsgWithdrawLiquidity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DepositToTranche_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDepositToTranche)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DepositToTranche(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.irs.Msg/DepositToTranche",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DepositToTranche(ctx, req.(*MsgDepositToTranche))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawFromTranche_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawFromTranche)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawFromTranche(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.irs.Msg/WithdrawFromTranche",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawFromTranche(ctx, req.(*MsgWithdrawFromTranche))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ununifi.irs.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "RegisterInterestRateSwapVault",
			Handler:    _Msg_RegisterInterestRateSwapVault_Handler,
		},
		{
			MethodName: "DepositLiquidity",
			Handler:    _Msg_DepositLiquidity_Handler,
		},
		{
			MethodName: "WithdrawLiquidity",
			Handler:    _Msg_WithdrawLiquidity_Handler,
		},
		{
			MethodName: "DepositToTranche",
			Handler:    _Msg_DepositToTranche_Handler,
		},
		{
			MethodName: "WithdrawFromTranche",
			Handler:    _Msg_WithdrawFromTranche_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ununifi/irs/tx.proto",
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRegisterInterestRateSwapVault) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterInterestRateSwapVault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterInterestRateSwapVault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cycle != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Cycle))
		i--
		dAtA[i] = 0x30
	}
	if m.MaxMaturity != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MaxMaturity))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.StrategyContract) > 0 {
		i -= len(m.StrategyContract)
		copy(dAtA[i:], m.StrategyContract)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StrategyContract)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterInterestRateSwapVaultResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterInterestRateSwapVaultResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterInterestRateSwapVaultResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDepositLiquidity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDepositLiquidity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDepositLiquidity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenInMaxs) > 0 {
		for iNdEx := len(m.TokenInMaxs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TokenInMaxs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size := m.ShareOutAmount.Size()
		i -= size
		if _, err := m.ShareOutAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.TrancheId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TrancheId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDepositLiquidityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDepositLiquidityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDepositLiquidityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawLiquidity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawLiquidity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawLiquidity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenOutMins) > 0 {
		for iNdEx := len(m.TokenOutMins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TokenOutMins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size := m.ShareAmount.Size()
		i -= size
		if _, err := m.ShareAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.TrancheId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TrancheId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawLiquidityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawLiquidityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawLiquidityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDepositToTranche) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDepositToTranche) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDepositToTranche) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.RequiredYt.Size()
		i -= size
		if _, err := m.RequiredYt.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.Token.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.TrancheType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TrancheType))
		i--
		dAtA[i] = 0x18
	}
	if m.TrancheId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TrancheId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDepositToTrancheResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDepositToTrancheResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDepositToTrancheResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawFromTranche) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawFromTranche) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawFromTranche) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.RequiredUt.Size()
		i -= size
		if _, err := m.RequiredUt.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Tokens) > 0 {
		for iNdEx := len(m.Tokens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tokens[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.TrancheType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TrancheType))
		i--
		dAtA[i] = 0x18
	}
	if m.TrancheId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TrancheId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawFromTrancheResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawFromTrancheResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawFromTrancheResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRegisterInterestRateSwapVault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.StrategyContract)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MaxMaturity != 0 {
		n += 1 + sovTx(uint64(m.MaxMaturity))
	}
	if m.Cycle != 0 {
		n += 1 + sovTx(uint64(m.Cycle))
	}
	return n
}

func (m *MsgRegisterInterestRateSwapVaultResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDepositLiquidity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TrancheId != 0 {
		n += 1 + sovTx(uint64(m.TrancheId))
	}
	l = m.ShareOutAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.TokenInMaxs) > 0 {
		for _, e := range m.TokenInMaxs {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgDepositLiquidityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWithdrawLiquidity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TrancheId != 0 {
		n += 1 + sovTx(uint64(m.TrancheId))
	}
	l = m.ShareAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.TokenOutMins) > 0 {
		for _, e := range m.TokenOutMins {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgWithdrawLiquidityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDepositToTranche) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TrancheId != 0 {
		n += 1 + sovTx(uint64(m.TrancheId))
	}
	if m.TrancheType != 0 {
		n += 1 + sovTx(uint64(m.TrancheType))
	}
	l = m.Token.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.RequiredYt.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgDepositToTrancheResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWithdrawFromTranche) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TrancheId != 0 {
		n += 1 + sovTx(uint64(m.TrancheId))
	}
	if m.TrancheType != 0 {
		n += 1 + sovTx(uint64(m.TrancheType))
	}
	if len(m.Tokens) > 0 {
		for _, e := range m.Tokens {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = m.RequiredUt.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgWithdrawFromTrancheResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterInterestRateSwapVault) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterInterestRateSwapVault: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterInterestRateSwapVault: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrategyContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StrategyContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMaturity", wireType)
			}
			m.MaxMaturity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxMaturity |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cycle", wireType)
			}
			m.Cycle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cycle |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterInterestRateSwapVaultResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterInterestRateSwapVaultResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterInterestRateSwapVaultResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDepositLiquidity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDepositLiquidity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDepositLiquidity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrancheId", wireType)
			}
			m.TrancheId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrancheId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareOutAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ShareOutAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenInMaxs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenInMaxs = append(m.TokenInMaxs, types.Coin{})
			if err := m.TokenInMaxs[len(m.TokenInMaxs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDepositLiquidityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDepositLiquidityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDepositLiquidityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawLiquidity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawLiquidity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawLiquidity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrancheId", wireType)
			}
			m.TrancheId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrancheId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ShareAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenOutMins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenOutMins = append(m.TokenOutMins, types.Coin{})
			if err := m.TokenOutMins[len(m.TokenOutMins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawLiquidityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawLiquidityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawLiquidityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDepositToTranche) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDepositToTranche: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDepositToTranche: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrancheId", wireType)
			}
			m.TrancheId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrancheId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrancheType", wireType)
			}
			m.TrancheType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrancheType |= TrancheType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredYt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RequiredYt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDepositToTrancheResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDepositToTrancheResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDepositToTrancheResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawFromTranche) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawFromTranche: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawFromTranche: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrancheId", wireType)
			}
			m.TrancheId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrancheId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrancheType", wireType)
			}
			m.TrancheType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrancheType |= TrancheType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tokens = append(m.Tokens, types.Coin{})
			if err := m.Tokens[len(m.Tokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredUt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RequiredUt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawFromTrancheResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawFromTrancheResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawFromTrancheResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
