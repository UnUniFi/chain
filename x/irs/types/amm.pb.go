// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ununifi/irs/amm.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TranchePool struct {
	Id               uint64                      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StrategyContract string                      `protobuf:"bytes,2,opt,name=strategy_contract,json=strategyContract,proto3" json:"strategy_contract,omitempty"`
	StartTime        uint64                      `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	Maturity         uint64                      `protobuf:"varint,4,opt,name=maturity,proto3" json:"maturity,omitempty"`
	SwapFee          cosmossdk_io_math.LegacyDec `protobuf:"bytes,5,opt,name=swap_fee,json=swapFee,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"swap_fee"`
	ExitFee          cosmossdk_io_math.LegacyDec `protobuf:"bytes,6,opt,name=exit_fee,json=exitFee,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"exit_fee"`
	// sum of all LP tokens sent out
	TotalShares types.Coin `protobuf:"bytes,7,opt,name=total_shares,json=totalShares,proto3" json:"total_shares"`
	// Pool assets are sorted by denomination
	PoolAssets   []types.Coin `protobuf:"bytes,8,rep,name=pool_assets,json=poolAssets,proto3" json:"pool_assets"`
	Denom        string       `protobuf:"bytes,9,opt,name=denom,proto3" json:"denom,omitempty"`
	DepositDenom string       `protobuf:"bytes,10,opt,name=deposit_denom,json=depositDenom,proto3" json:"deposit_denom,omitempty"`
}

func (m *TranchePool) Reset()         { *m = TranchePool{} }
func (m *TranchePool) String() string { return proto.CompactTextString(m) }
func (*TranchePool) ProtoMessage()    {}
func (*TranchePool) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe6e065b00bf65b, []int{0}
}
func (m *TranchePool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TranchePool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TranchePool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TranchePool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TranchePool.Merge(m, src)
}
func (m *TranchePool) XXX_Size() int {
	return m.Size()
}
func (m *TranchePool) XXX_DiscardUnknown() {
	xxx_messageInfo_TranchePool.DiscardUnknown(m)
}

var xxx_messageInfo_TranchePool proto.InternalMessageInfo

func (m *TranchePool) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TranchePool) GetStrategyContract() string {
	if m != nil {
		return m.StrategyContract
	}
	return ""
}

func (m *TranchePool) GetStartTime() uint64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *TranchePool) GetMaturity() uint64 {
	if m != nil {
		return m.Maturity
	}
	return 0
}

func (m *TranchePool) GetTotalShares() types.Coin {
	if m != nil {
		return m.TotalShares
	}
	return types.Coin{}
}

func (m *TranchePool) GetPoolAssets() []types.Coin {
	if m != nil {
		return m.PoolAssets
	}
	return nil
}

func (m *TranchePool) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *TranchePool) GetDepositDenom() string {
	if m != nil {
		return m.DepositDenom
	}
	return ""
}

func init() {
	proto.RegisterType((*TranchePool)(nil), "ununifi.irs.TranchePool")
}

func init() { proto.RegisterFile("ununifi/irs/amm.proto", fileDescriptor_2fe6e065b00bf65b) }

var fileDescriptor_2fe6e065b00bf65b = []byte{
	// 430 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x41, 0x6f, 0xd3, 0x40,
	0x10, 0x85, 0xe3, 0x24, 0x6d, 0x93, 0x4d, 0x41, 0x60, 0x15, 0xc9, 0x0d, 0xc2, 0x8d, 0x28, 0x87,
	0x48, 0x48, 0x5e, 0x15, 0xee, 0x15, 0xa4, 0x55, 0x4f, 0x1c, 0x50, 0x68, 0x2f, 0x5c, 0xac, 0x8d,
	0x3d, 0xb5, 0x47, 0xc4, 0x3b, 0xd6, 0xee, 0x04, 0x9a, 0x7f, 0xc1, 0xaf, 0x42, 0x3d, 0xf6, 0x88,
	0x38, 0x54, 0x28, 0xf9, 0x23, 0x68, 0xd7, 0x86, 0x33, 0xbd, 0xf9, 0xbd, 0xe7, 0xef, 0x49, 0xfb,
	0x34, 0xe2, 0xd9, 0x4a, 0xaf, 0x34, 0x5e, 0xa3, 0x44, 0x63, 0xa5, 0xaa, 0xaa, 0xa4, 0x36, 0xc4,
	0x14, 0x8e, 0x5a, 0x3b, 0x41, 0x63, 0xc7, 0x07, 0x05, 0x15, 0xe4, 0x7d, 0xe9, 0xbe, 0x9a, 0x5f,
	0xc6, 0x87, 0x19, 0xd9, 0x8a, 0x6c, 0xda, 0x04, 0x8d, 0x68, 0xa3, 0xb8, 0x51, 0x72, 0xa1, 0x2c,
	0xc8, 0xaf, 0x27, 0x0b, 0x60, 0x75, 0x22, 0x33, 0x42, 0xdd, 0xe4, 0x2f, 0x7f, 0xf4, 0xc4, 0xe8,
	0xd2, 0x28, 0x9d, 0x95, 0xf0, 0x91, 0x68, 0x19, 0x3e, 0x16, 0x5d, 0xcc, 0xa3, 0x60, 0x12, 0x4c,
	0xfb, 0xf3, 0x2e, 0xe6, 0xe1, 0x6b, 0xf1, 0xd4, 0xb2, 0x51, 0x0c, 0xc5, 0x3a, 0xcd, 0x48, 0xb3,
	0x51, 0x19, 0x47, 0xdd, 0x49, 0x30, 0x1d, 0xce, 0x9f, 0xfc, 0x0d, 0xce, 0x5a, 0x3f, 0x7c, 0x21,
	0x84, 0x65, 0x65, 0x38, 0x65, 0xac, 0x20, 0xea, 0xf9, 0x92, 0xa1, 0x77, 0x2e, 0xb1, 0x82, 0x70,
	0x2c, 0x06, 0x95, 0xe2, 0x95, 0x41, 0x5e, 0x47, 0x7d, 0x1f, 0xfe, 0xd3, 0xe1, 0xa9, 0x18, 0xd8,
	0x6f, 0xaa, 0x4e, 0xaf, 0x01, 0xa2, 0x1d, 0x57, 0x3f, 0x3b, 0xbe, 0xbd, 0x3f, 0xea, 0xfc, 0xba,
	0x3f, 0x7a, 0xde, 0xbc, 0xc0, 0xe6, 0x5f, 0x12, 0x24, 0x59, 0x29, 0x2e, 0x93, 0x0f, 0x50, 0xa8,
	0x6c, 0x7d, 0x0e, 0xd9, 0x7c, 0xcf, 0x41, 0x17, 0x00, 0x8e, 0x87, 0x1b, 0x64, 0xcf, 0xef, 0x3e,
	0x80, 0x77, 0x90, 0xe3, 0x67, 0x62, 0x9f, 0x89, 0xd5, 0x32, 0xb5, 0xa5, 0x32, 0x60, 0xa3, 0xbd,
	0x49, 0x30, 0x1d, 0xbd, 0x39, 0x4c, 0xda, 0x31, 0xdd, 0x7c, 0x49, 0x3b, 0x5f, 0x72, 0x46, 0xa8,
	0x67, 0x7d, 0x57, 0x3f, 0x1f, 0x79, 0xe8, 0x93, 0x67, 0xc2, 0x77, 0x62, 0x54, 0x13, 0x2d, 0x53,
	0x65, 0x2d, 0xb0, 0x8d, 0x06, 0x93, 0xde, 0xff, 0x54, 0x08, 0xc7, 0xbc, 0xf7, 0x48, 0x78, 0x20,
	0x76, 0x72, 0xd0, 0x54, 0x45, 0x43, 0xbf, 0x70, 0x23, 0xc2, 0x63, 0xf1, 0x28, 0x87, 0x9a, 0x2c,
	0x72, 0xda, 0xa4, 0xc2, 0xa7, 0xfb, 0xad, 0x79, 0xee, 0xbc, 0xd9, 0xe9, 0xed, 0x26, 0x0e, 0xee,
	0x36, 0x71, 0xf0, 0x7b, 0x13, 0x07, 0xdf, 0xb7, 0x71, 0xe7, 0x6e, 0x1b, 0x77, 0x7e, 0x6e, 0xe3,
	0xce, 0xe7, 0x57, 0x05, 0x72, 0xb9, 0x5a, 0x24, 0x19, 0x55, 0xf2, 0x4a, 0x5f, 0x69, 0xbc, 0x40,
	0x99, 0x95, 0x0a, 0xb5, 0xbc, 0xf1, 0xa7, 0xc6, 0xeb, 0x1a, 0xec, 0x62, 0xd7, 0xdf, 0xc3, 0xdb,
	0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd1, 0x4e, 0x4b, 0x79, 0x86, 0x02, 0x00, 0x00,
}

func (m *TranchePool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TranchePool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TranchePool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DepositDenom) > 0 {
		i -= len(m.DepositDenom)
		copy(dAtA[i:], m.DepositDenom)
		i = encodeVarintAmm(dAtA, i, uint64(len(m.DepositDenom)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintAmm(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.PoolAssets) > 0 {
		for iNdEx := len(m.PoolAssets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PoolAssets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAmm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	{
		size, err := m.TotalShares.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAmm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.ExitFee.Size()
		i -= size
		if _, err := m.ExitFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAmm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.SwapFee.Size()
		i -= size
		if _, err := m.SwapFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAmm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.Maturity != 0 {
		i = encodeVarintAmm(dAtA, i, uint64(m.Maturity))
		i--
		dAtA[i] = 0x20
	}
	if m.StartTime != 0 {
		i = encodeVarintAmm(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.StrategyContract) > 0 {
		i -= len(m.StrategyContract)
		copy(dAtA[i:], m.StrategyContract)
		i = encodeVarintAmm(dAtA, i, uint64(len(m.StrategyContract)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintAmm(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAmm(dAtA []byte, offset int, v uint64) int {
	offset -= sovAmm(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TranchePool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAmm(uint64(m.Id))
	}
	l = len(m.StrategyContract)
	if l > 0 {
		n += 1 + l + sovAmm(uint64(l))
	}
	if m.StartTime != 0 {
		n += 1 + sovAmm(uint64(m.StartTime))
	}
	if m.Maturity != 0 {
		n += 1 + sovAmm(uint64(m.Maturity))
	}
	l = m.SwapFee.Size()
	n += 1 + l + sovAmm(uint64(l))
	l = m.ExitFee.Size()
	n += 1 + l + sovAmm(uint64(l))
	l = m.TotalShares.Size()
	n += 1 + l + sovAmm(uint64(l))
	if len(m.PoolAssets) > 0 {
		for _, e := range m.PoolAssets {
			l = e.Size()
			n += 1 + l + sovAmm(uint64(l))
		}
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovAmm(uint64(l))
	}
	l = len(m.DepositDenom)
	if l > 0 {
		n += 1 + l + sovAmm(uint64(l))
	}
	return n
}

func sovAmm(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAmm(x uint64) (n int) {
	return sovAmm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TranchePool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TranchePool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TranchePool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrategyContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StrategyContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maturity", wireType)
			}
			m.Maturity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Maturity |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SwapFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExitFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalShares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalShares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolAssets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolAssets = append(m.PoolAssets, types.Coin{})
			if err := m.PoolAssets[len(m.PoolAssets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAmm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAmm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAmm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAmm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAmm
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAmm
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAmm
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAmm        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAmm          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAmm = fmt.Errorf("proto: unexpected end of group")
)
