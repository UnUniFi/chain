// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ununifi/irs/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e7a0ad685398d1e, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e7a0ad685398d1e, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryVaultsRequest is request type for the Query/Vaults RPC method.
type QueryVaultsRequest struct {
}

func (m *QueryVaultsRequest) Reset()         { *m = QueryVaultsRequest{} }
func (m *QueryVaultsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVaultsRequest) ProtoMessage()    {}
func (*QueryVaultsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e7a0ad685398d1e, []int{2}
}
func (m *QueryVaultsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultsRequest.Merge(m, src)
}
func (m *QueryVaultsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultsRequest proto.InternalMessageInfo

// QueryVaultsResponse is response type for the Query/Vaults RPC method.
type QueryVaultsResponse struct {
	Vaults []InterestRateSwapVault `protobuf:"bytes,1,rep,name=vaults,proto3" json:"vaults"`
}

func (m *QueryVaultsResponse) Reset()         { *m = QueryVaultsResponse{} }
func (m *QueryVaultsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVaultsResponse) ProtoMessage()    {}
func (*QueryVaultsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e7a0ad685398d1e, []int{3}
}
func (m *QueryVaultsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultsResponse.Merge(m, src)
}
func (m *QueryVaultsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultsResponse proto.InternalMessageInfo

func (m *QueryVaultsResponse) GetVaults() []InterestRateSwapVault {
	if m != nil {
		return m.Vaults
	}
	return nil
}

// QueryVaultRequest is request type for the Query/Vault RPC method.
type QueryVaultByContractRequest struct {
	StrategyContract string `protobuf:"bytes,1,opt,name=strategy_contract,json=strategyContract,proto3" json:"strategy_contract,omitempty"`
}

func (m *QueryVaultByContractRequest) Reset()         { *m = QueryVaultByContractRequest{} }
func (m *QueryVaultByContractRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVaultByContractRequest) ProtoMessage()    {}
func (*QueryVaultByContractRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e7a0ad685398d1e, []int{4}
}
func (m *QueryVaultByContractRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultByContractRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultByContractRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultByContractRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultByContractRequest.Merge(m, src)
}
func (m *QueryVaultByContractRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultByContractRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultByContractRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultByContractRequest proto.InternalMessageInfo

func (m *QueryVaultByContractRequest) GetStrategyContract() string {
	if m != nil {
		return m.StrategyContract
	}
	return ""
}

// QueryVaultResponse is response type for the Query/Vault RPC method.
type QueryVaultByContractResponse struct {
	Vault InterestRateSwapVault `protobuf:"bytes,1,opt,name=vault,proto3" json:"vault"`
}

func (m *QueryVaultByContractResponse) Reset()         { *m = QueryVaultByContractResponse{} }
func (m *QueryVaultByContractResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVaultByContractResponse) ProtoMessage()    {}
func (*QueryVaultByContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e7a0ad685398d1e, []int{5}
}
func (m *QueryVaultByContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultByContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultByContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultByContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultByContractResponse.Merge(m, src)
}
func (m *QueryVaultByContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultByContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultByContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultByContractResponse proto.InternalMessageInfo

func (m *QueryVaultByContractResponse) GetVault() InterestRateSwapVault {
	if m != nil {
		return m.Vault
	}
	return InterestRateSwapVault{}
}

// QueryVaultDetailsRequest is request type for the Query/VaultDetails RPC method.
type QueryVaultDetailsRequest struct {
	StrategyContract string `protobuf:"bytes,1,opt,name=strategy_contract,json=strategyContract,proto3" json:"strategy_contract,omitempty"`
	Maturity         string `protobuf:"bytes,2,opt,name=maturity,proto3" json:"maturity,omitempty"`
}

func (m *QueryVaultDetailsRequest) Reset()         { *m = QueryVaultDetailsRequest{} }
func (m *QueryVaultDetailsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVaultDetailsRequest) ProtoMessage()    {}
func (*QueryVaultDetailsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e7a0ad685398d1e, []int{6}
}
func (m *QueryVaultDetailsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultDetailsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultDetailsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultDetailsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultDetailsRequest.Merge(m, src)
}
func (m *QueryVaultDetailsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultDetailsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultDetailsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultDetailsRequest proto.InternalMessageInfo

func (m *QueryVaultDetailsRequest) GetStrategyContract() string {
	if m != nil {
		return m.StrategyContract
	}
	return ""
}

func (m *QueryVaultDetailsRequest) GetMaturity() string {
	if m != nil {
		return m.Maturity
	}
	return ""
}

// QueryVaultDetailsResponse is response type for the Query/VaultDetails RPC method.
type QueryVaultDetailsResponse struct {
	LiquidityPool string `protobuf:"bytes,1,opt,name=liquidity_pool,json=liquidityPool,proto3" json:"liquidity_pool,omitempty"`
	FyRate        string `protobuf:"bytes,2,opt,name=fy_rate,json=fyRate,proto3" json:"fy_rate,omitempty"`
	LvyRate       string `protobuf:"bytes,3,opt,name=lvy_rate,json=lvyRate,proto3" json:"lvy_rate,omitempty"`
}

func (m *QueryVaultDetailsResponse) Reset()         { *m = QueryVaultDetailsResponse{} }
func (m *QueryVaultDetailsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVaultDetailsResponse) ProtoMessage()    {}
func (*QueryVaultDetailsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e7a0ad685398d1e, []int{7}
}
func (m *QueryVaultDetailsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultDetailsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultDetailsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultDetailsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultDetailsResponse.Merge(m, src)
}
func (m *QueryVaultDetailsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultDetailsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultDetailsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultDetailsResponse proto.InternalMessageInfo

func (m *QueryVaultDetailsResponse) GetLiquidityPool() string {
	if m != nil {
		return m.LiquidityPool
	}
	return ""
}

func (m *QueryVaultDetailsResponse) GetFyRate() string {
	if m != nil {
		return m.FyRate
	}
	return ""
}

func (m *QueryVaultDetailsResponse) GetLvyRate() string {
	if m != nil {
		return m.LvyRate
	}
	return ""
}

// QueryAllTranchesRequest is request type for the Query/Tranches RPC method.
type QueryAllTranchesRequest struct {
}

func (m *QueryAllTranchesRequest) Reset()         { *m = QueryAllTranchesRequest{} }
func (m *QueryAllTranchesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllTranchesRequest) ProtoMessage()    {}
func (*QueryAllTranchesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e7a0ad685398d1e, []int{8}
}
func (m *QueryAllTranchesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTranchesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTranchesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTranchesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTranchesRequest.Merge(m, src)
}
func (m *QueryAllTranchesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTranchesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTranchesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTranchesRequest proto.InternalMessageInfo

// QueryTranchesRequest is request type for the Query/Tranches RPC method.
type QueryTranchesRequest struct {
	StrategyContract string `protobuf:"bytes,1,opt,name=strategy_contract,json=strategyContract,proto3" json:"strategy_contract,omitempty"`
}

func (m *QueryTranchesRequest) Reset()         { *m = QueryTranchesRequest{} }
func (m *QueryTranchesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTranchesRequest) ProtoMessage()    {}
func (*QueryTranchesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e7a0ad685398d1e, []int{9}
}
func (m *QueryTranchesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTranchesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTranchesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTranchesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTranchesRequest.Merge(m, src)
}
func (m *QueryTranchesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTranchesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTranchesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTranchesRequest proto.InternalMessageInfo

func (m *QueryTranchesRequest) GetStrategyContract() string {
	if m != nil {
		return m.StrategyContract
	}
	return ""
}

// QueryTranchesResponse is response type for the Query/Tranches RPC method.
type QueryTranchesResponse struct {
	Tranches []TranchePool `protobuf:"bytes,1,rep,name=tranches,proto3" json:"tranches"`
}

func (m *QueryTranchesResponse) Reset()         { *m = QueryTranchesResponse{} }
func (m *QueryTranchesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTranchesResponse) ProtoMessage()    {}
func (*QueryTranchesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e7a0ad685398d1e, []int{10}
}
func (m *QueryTranchesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTranchesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTranchesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTranchesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTranchesResponse.Merge(m, src)
}
func (m *QueryTranchesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTranchesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTranchesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTranchesResponse proto.InternalMessageInfo

func (m *QueryTranchesResponse) GetTranches() []TranchePool {
	if m != nil {
		return m.Tranches
	}
	return nil
}

// QueryTranchRequest is request type for the Query/Tranches RPC method.
type QueryTrancheRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryTrancheRequest) Reset()         { *m = QueryTrancheRequest{} }
func (m *QueryTrancheRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTrancheRequest) ProtoMessage()    {}
func (*QueryTrancheRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e7a0ad685398d1e, []int{11}
}
func (m *QueryTrancheRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTrancheRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTrancheRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTrancheRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTrancheRequest.Merge(m, src)
}
func (m *QueryTrancheRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTrancheRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTrancheRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTrancheRequest proto.InternalMessageInfo

func (m *QueryTrancheRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// QueryTranchResponse is response type for the Query/Tranch RPC method.
type QueryTrancheResponse struct {
	Tranche TranchePool `protobuf:"bytes,1,opt,name=tranche,proto3" json:"tranche"`
}

func (m *QueryTrancheResponse) Reset()         { *m = QueryTrancheResponse{} }
func (m *QueryTrancheResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTrancheResponse) ProtoMessage()    {}
func (*QueryTrancheResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e7a0ad685398d1e, []int{12}
}
func (m *QueryTrancheResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTrancheResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTrancheResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTrancheResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTrancheResponse.Merge(m, src)
}
func (m *QueryTrancheResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTrancheResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTrancheResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTrancheResponse proto.InternalMessageInfo

func (m *QueryTrancheResponse) GetTranche() TranchePool {
	if m != nil {
		return m.Tranche
	}
	return TranchePool{}
}

// QueryEstimateSwapInPoolRequest is request type for the Query/EstimateSwapInPool RPC method.
type QueryEstimateSwapInPoolRequest struct {
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	Denom  string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Amount string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *QueryEstimateSwapInPoolRequest) Reset()         { *m = QueryEstimateSwapInPoolRequest{} }
func (m *QueryEstimateSwapInPoolRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEstimateSwapInPoolRequest) ProtoMessage()    {}
func (*QueryEstimateSwapInPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e7a0ad685398d1e, []int{13}
}
func (m *QueryEstimateSwapInPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEstimateSwapInPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEstimateSwapInPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEstimateSwapInPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEstimateSwapInPoolRequest.Merge(m, src)
}
func (m *QueryEstimateSwapInPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEstimateSwapInPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEstimateSwapInPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEstimateSwapInPoolRequest proto.InternalMessageInfo

func (m *QueryEstimateSwapInPoolRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *QueryEstimateSwapInPoolRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *QueryEstimateSwapInPoolRequest) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type QueryEstimateSwapInPoolResponse struct {
	Amount types.Coin `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount"`
}

func (m *QueryEstimateSwapInPoolResponse) Reset()         { *m = QueryEstimateSwapInPoolResponse{} }
func (m *QueryEstimateSwapInPoolResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEstimateSwapInPoolResponse) ProtoMessage()    {}
func (*QueryEstimateSwapInPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e7a0ad685398d1e, []int{14}
}
func (m *QueryEstimateSwapInPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEstimateSwapInPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEstimateSwapInPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEstimateSwapInPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEstimateSwapInPoolResponse.Merge(m, src)
}
func (m *QueryEstimateSwapInPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEstimateSwapInPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEstimateSwapInPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEstimateSwapInPoolResponse proto.InternalMessageInfo

func (m *QueryEstimateSwapInPoolResponse) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

type QueryEstimateMintPtYtPairRequest struct {
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	Denom  string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Amount string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *QueryEstimateMintPtYtPairRequest) Reset()         { *m = QueryEstimateMintPtYtPairRequest{} }
func (m *QueryEstimateMintPtYtPairRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEstimateMintPtYtPairRequest) ProtoMessage()    {}
func (*QueryEstimateMintPtYtPairRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e7a0ad685398d1e, []int{15}
}
func (m *QueryEstimateMintPtYtPairRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEstimateMintPtYtPairRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEstimateMintPtYtPairRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEstimateMintPtYtPairRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEstimateMintPtYtPairRequest.Merge(m, src)
}
func (m *QueryEstimateMintPtYtPairRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEstimateMintPtYtPairRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEstimateMintPtYtPairRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEstimateMintPtYtPairRequest proto.InternalMessageInfo

func (m *QueryEstimateMintPtYtPairRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *QueryEstimateMintPtYtPairRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *QueryEstimateMintPtYtPairRequest) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type QueryEstimateMintPtYtPairResponse struct {
	PtAmount types.Coin `protobuf:"bytes,1,opt,name=pt_amount,json=ptAmount,proto3" json:"pt_amount"`
	YtAmount types.Coin `protobuf:"bytes,2,opt,name=yt_amount,json=ytAmount,proto3" json:"yt_amount"`
}

func (m *QueryEstimateMintPtYtPairResponse) Reset()         { *m = QueryEstimateMintPtYtPairResponse{} }
func (m *QueryEstimateMintPtYtPairResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEstimateMintPtYtPairResponse) ProtoMessage()    {}
func (*QueryEstimateMintPtYtPairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e7a0ad685398d1e, []int{16}
}
func (m *QueryEstimateMintPtYtPairResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEstimateMintPtYtPairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEstimateMintPtYtPairResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEstimateMintPtYtPairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEstimateMintPtYtPairResponse.Merge(m, src)
}
func (m *QueryEstimateMintPtYtPairResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEstimateMintPtYtPairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEstimateMintPtYtPairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEstimateMintPtYtPairResponse proto.InternalMessageInfo

func (m *QueryEstimateMintPtYtPairResponse) GetPtAmount() types.Coin {
	if m != nil {
		return m.PtAmount
	}
	return types.Coin{}
}

func (m *QueryEstimateMintPtYtPairResponse) GetYtAmount() types.Coin {
	if m != nil {
		return m.YtAmount
	}
	return types.Coin{}
}

type QueryEstimateRedeemYtRequest struct {
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	Denom  string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Amount string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *QueryEstimateRedeemYtRequest) Reset()         { *m = QueryEstimateRedeemYtRequest{} }
func (m *QueryEstimateRedeemYtRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEstimateRedeemYtRequest) ProtoMessage()    {}
func (*QueryEstimateRedeemYtRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e7a0ad685398d1e, []int{17}
}
func (m *QueryEstimateRedeemYtRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEstimateRedeemYtRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEstimateRedeemYtRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEstimateRedeemYtRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEstimateRedeemYtRequest.Merge(m, src)
}
func (m *QueryEstimateRedeemYtRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEstimateRedeemYtRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEstimateRedeemYtRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEstimateRedeemYtRequest proto.InternalMessageInfo

func (m *QueryEstimateRedeemYtRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *QueryEstimateRedeemYtRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *QueryEstimateRedeemYtRequest) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type QueryEstimateRedeemYtResponse struct {
	Amount types.Coin `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount"`
}

func (m *QueryEstimateRedeemYtResponse) Reset()         { *m = QueryEstimateRedeemYtResponse{} }
func (m *QueryEstimateRedeemYtResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEstimateRedeemYtResponse) ProtoMessage()    {}
func (*QueryEstimateRedeemYtResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e7a0ad685398d1e, []int{18}
}
func (m *QueryEstimateRedeemYtResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEstimateRedeemYtResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEstimateRedeemYtResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEstimateRedeemYtResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEstimateRedeemYtResponse.Merge(m, src)
}
func (m *QueryEstimateRedeemYtResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEstimateRedeemYtResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEstimateRedeemYtResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEstimateRedeemYtResponse proto.InternalMessageInfo

func (m *QueryEstimateRedeemYtResponse) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "ununifi.irs.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "ununifi.irs.QueryParamsResponse")
	proto.RegisterType((*QueryVaultsRequest)(nil), "ununifi.irs.QueryVaultsRequest")
	proto.RegisterType((*QueryVaultsResponse)(nil), "ununifi.irs.QueryVaultsResponse")
	proto.RegisterType((*QueryVaultByContractRequest)(nil), "ununifi.irs.QueryVaultByContractRequest")
	proto.RegisterType((*QueryVaultByContractResponse)(nil), "ununifi.irs.QueryVaultByContractResponse")
	proto.RegisterType((*QueryVaultDetailsRequest)(nil), "ununifi.irs.QueryVaultDetailsRequest")
	proto.RegisterType((*QueryVaultDetailsResponse)(nil), "ununifi.irs.QueryVaultDetailsResponse")
	proto.RegisterType((*QueryAllTranchesRequest)(nil), "ununifi.irs.QueryAllTranchesRequest")
	proto.RegisterType((*QueryTranchesRequest)(nil), "ununifi.irs.QueryTranchesRequest")
	proto.RegisterType((*QueryTranchesResponse)(nil), "ununifi.irs.QueryTranchesResponse")
	proto.RegisterType((*QueryTrancheRequest)(nil), "ununifi.irs.QueryTrancheRequest")
	proto.RegisterType((*QueryTrancheResponse)(nil), "ununifi.irs.QueryTrancheResponse")
	proto.RegisterType((*QueryEstimateSwapInPoolRequest)(nil), "ununifi.irs.QueryEstimateSwapInPoolRequest")
	proto.RegisterType((*QueryEstimateSwapInPoolResponse)(nil), "ununifi.irs.QueryEstimateSwapInPoolResponse")
	proto.RegisterType((*QueryEstimateMintPtYtPairRequest)(nil), "ununifi.irs.QueryEstimateMintPtYtPairRequest")
	proto.RegisterType((*QueryEstimateMintPtYtPairResponse)(nil), "ununifi.irs.QueryEstimateMintPtYtPairResponse")
	proto.RegisterType((*QueryEstimateRedeemYtRequest)(nil), "ununifi.irs.QueryEstimateRedeemYtRequest")
	proto.RegisterType((*QueryEstimateRedeemYtResponse)(nil), "ununifi.irs.QueryEstimateRedeemYtResponse")
}

func init() { proto.RegisterFile("ununifi/irs/query.proto", fileDescriptor_4e7a0ad685398d1e) }

var fileDescriptor_4e7a0ad685398d1e = []byte{
	// 1049 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0xa6, 0x8d, 0x93, 0xbe, 0x40, 0x29, 0x93, 0x84, 0xd8, 0x4e, 0x71, 0x92, 0x55, 0xd2,
	0xe6, 0x07, 0xf6, 0x2a, 0xe1, 0x00, 0x42, 0x55, 0x44, 0x93, 0x82, 0x08, 0x12, 0x52, 0x70, 0x29,
	0xd0, 0x1e, 0xb0, 0x26, 0xf6, 0xc4, 0x19, 0x69, 0x77, 0x66, 0xb3, 0x3b, 0x76, 0x59, 0xa2, 0x5c,
	0x10, 0x7f, 0x00, 0x02, 0x89, 0x0b, 0x07, 0x0e, 0xf0, 0xc7, 0xf4, 0x58, 0x89, 0x0b, 0x27, 0x84,
	0x12, 0x4e, 0xfc, 0x15, 0x68, 0x67, 0xdf, 0x6e, 0xbd, 0xde, 0xdd, 0xd4, 0x85, 0xde, 0x32, 0xf3,
	0xbe, 0xf7, 0x7d, 0xdf, 0xdb, 0x37, 0x79, 0xcf, 0x30, 0xdf, 0x13, 0x3d, 0xc1, 0x8f, 0xb8, 0xc5,
	0x3d, 0xdf, 0x3a, 0xe9, 0x31, 0x2f, 0x68, 0xb8, 0x9e, 0x54, 0x92, 0x4c, 0x63, 0xa0, 0xc1, 0x3d,
	0xbf, 0x3a, 0xdb, 0x95, 0x5d, 0xa9, 0xef, 0xad, 0xf0, 0xaf, 0x08, 0x52, 0xad, 0xb4, 0xa5, 0xef,
	0x48, 0xbf, 0x15, 0x05, 0xa2, 0x03, 0x86, 0x6e, 0x76, 0xa5, 0xec, 0xda, 0xcc, 0xa2, 0x2e, 0xb7,
	0xa8, 0x10, 0x52, 0x51, 0xc5, 0xa5, 0x88, 0xa3, 0x1b, 0x11, 0xd6, 0x3a, 0xa4, 0x3e, 0x8b, 0x44,
	0xad, 0xfe, 0xd6, 0x21, 0x53, 0x74, 0xcb, 0x72, 0x69, 0x97, 0x0b, 0x0d, 0x46, 0x6c, 0x6d, 0x10,
	0x1b, 0xa3, 0xda, 0x92, 0xc7, 0xf1, 0xf2, 0x60, 0x01, 0x2e, 0xf5, 0xa8, 0x13, 0xab, 0xcc, 0x0d,
	0x46, 0xb8, 0x97, 0x7b, 0x4d, 0x1d, 0x27, 0xba, 0x36, 0x67, 0x81, 0x7c, 0x1a, 0x3a, 0x39, 0xd0,
	0x14, 0x4d, 0x76, 0xd2, 0x63, 0xbe, 0x32, 0x3f, 0x82, 0x99, 0xd4, 0xad, 0xef, 0x4a, 0xe1, 0x33,
	0xb2, 0x05, 0xa5, 0x48, 0xaa, 0x6c, 0x2c, 0x19, 0x6b, 0xd3, 0xdb, 0x33, 0x8d, 0x81, 0xaf, 0xd5,
	0x88, 0xc0, 0xbb, 0x57, 0x9f, 0xfc, 0xb9, 0x38, 0xd6, 0x44, 0x60, 0xc2, 0xff, 0x39, 0xed, 0xd9,
	0x2a, 0xe1, 0xff, 0x02, 0xf9, 0xe3, 0x5b, 0xe4, 0x7f, 0x1f, 0x4a, 0x7d, 0x7d, 0x53, 0x36, 0x96,
	0xae, 0xac, 0x4d, 0x6f, 0x9b, 0x29, 0xfe, 0x7d, 0xa1, 0x98, 0xc7, 0x7c, 0xd5, 0xa4, 0x8a, 0xdd,
	0x7f, 0x4c, 0x5d, 0x9d, 0x1c, 0xcb, 0x45, 0x79, 0xe6, 0xc7, 0xb0, 0xf0, 0x8c, 0x78, 0x37, 0xd8,
	0x93, 0x42, 0x79, 0xb4, 0xad, 0x50, 0x97, 0x6c, 0xc2, 0xeb, 0xbe, 0xf2, 0xa8, 0x62, 0xdd, 0xa0,
	0xd5, 0xc6, 0x98, 0xae, 0xe5, 0x5a, 0xf3, 0x46, 0x1c, 0x88, 0x73, 0xcc, 0xaf, 0xe0, 0x66, 0x3e,
	0x17, 0xba, 0xdd, 0x81, 0x09, 0xad, 0x8a, 0x1f, 0x63, 0x74, 0xb3, 0x51, 0x9a, 0xd9, 0x86, 0xf2,
	0x33, 0xfe, 0x7b, 0x4c, 0x51, 0x6e, 0xfb, 0xff, 0xc5, 0x28, 0xa9, 0xc2, 0x94, 0x43, 0x55, 0xcf,
	0xe3, 0x2a, 0x28, 0x8f, 0x6b, 0x4c, 0x72, 0x36, 0xfb, 0x50, 0xc9, 0x11, 0xc1, 0x0a, 0x56, 0xe1,
	0xba, 0xcd, 0x4f, 0x7a, 0xbc, 0xc3, 0x55, 0xd0, 0x72, 0xa5, 0xb4, 0x51, 0xe2, 0xd5, 0xe4, 0xf6,
	0x40, 0x4a, 0x9b, 0xcc, 0xc3, 0xe4, 0x51, 0xd0, 0x0a, 0x45, 0x91, 0xbe, 0x74, 0x14, 0x84, 0x75,
	0x91, 0x0a, 0x4c, 0xd9, 0x7d, 0x8c, 0x5c, 0xd1, 0x91, 0x49, 0xbb, 0xaf, 0x43, 0x66, 0x05, 0xe6,
	0xb5, 0xee, 0x5d, 0xdb, 0xfe, 0xcc, 0xa3, 0xa2, 0x7d, 0xcc, 0x92, 0xe6, 0xef, 0xc1, 0xac, 0x0e,
	0x0d, 0xdd, 0xbf, 0x58, 0x73, 0xee, 0xc3, 0xdc, 0x10, 0x09, 0xd6, 0xf4, 0x1e, 0x4c, 0x29, 0xbc,
	0xc3, 0x57, 0x54, 0x4e, 0x35, 0x06, 0x13, 0xc2, 0xc2, 0xb0, 0x1d, 0x09, 0xde, 0x5c, 0xc5, 0x67,
	0x89, 0x98, 0xd8, 0xd8, 0x75, 0x18, 0xe7, 0x1d, 0xed, 0xe4, 0x6a, 0x73, 0x9c, 0x77, 0xcc, 0x83,
	0x74, 0x01, 0x89, 0xf4, 0xbb, 0x30, 0x89, 0x54, 0xf8, 0x24, 0x9e, 0xa7, 0x1c, 0xc3, 0xcd, 0x2e,
	0xd4, 0x34, 0xe3, 0x07, 0xbe, 0xe2, 0x0e, 0xbe, 0x98, 0x7d, 0x11, 0x22, 0x63, 0x0f, 0xf3, 0x30,
	0x19, 0x36, 0xa8, 0x95, 0x18, 0x29, 0x85, 0xc7, 0xfd, 0x0e, 0x99, 0x85, 0x89, 0x0e, 0x13, 0xd2,
	0xc1, 0xd6, 0x44, 0x07, 0xf2, 0x06, 0x94, 0xa8, 0x23, 0x7b, 0x42, 0x61, 0x5f, 0xf0, 0x64, 0x3e,
	0x82, 0xc5, 0x42, 0x21, 0xac, 0xe2, 0x9d, 0x24, 0x35, 0x2a, 0xa2, 0xd2, 0xc0, 0x11, 0x17, 0x8e,
	0xa2, 0x06, 0x8e, 0xa2, 0xc6, 0x9e, 0xe4, 0x22, 0xfe, 0xdf, 0x43, 0x6e, 0x0e, 0x4b, 0x29, 0xee,
	0x4f, 0xb8, 0x50, 0x07, 0xea, 0xa1, 0x3a, 0xa0, 0xdc, 0x7b, 0xc9, 0x65, 0xfc, 0x62, 0xc0, 0xf2,
	0x25, 0x5a, 0x58, 0xc9, 0x1d, 0xb8, 0xe6, 0xaa, 0xd6, 0x8b, 0x15, 0x33, 0xe5, 0xaa, 0xbb, 0x3a,
	0x21, 0xcc, 0x0e, 0x92, 0xec, 0xf1, 0x11, 0xb3, 0x03, 0xcc, 0x36, 0x19, 0x0e, 0x8f, 0xd8, 0x60,
	0x93, 0x75, 0x18, 0x73, 0x1e, 0xaa, 0x97, 0xfc, 0x21, 0xbe, 0x84, 0x37, 0x0b, 0x64, 0xfe, 0x67,
	0x37, 0xb7, 0xff, 0x01, 0x98, 0xd0, 0xd4, 0xe4, 0x18, 0x4a, 0xd1, 0x68, 0x27, 0x8b, 0xa9, 0xf7,
	0x9c, 0xdd, 0x1b, 0xd5, 0xa5, 0x62, 0x40, 0xe4, 0xc7, 0x5c, 0xf8, 0xf6, 0xf7, 0xbf, 0x7f, 0x1c,
	0x9f, 0x23, 0x33, 0x56, 0x76, 0x81, 0x85, 0x4a, 0xd1, 0x46, 0xc8, 0x53, 0x4a, 0x6d, 0x90, 0x3c,
	0xa5, 0xf4, 0x32, 0x29, 0x50, 0x8a, 0xf6, 0x04, 0xf9, 0xc9, 0x80, 0xd7, 0x86, 0xe6, 0x3a, 0x59,
	0x2b, 0xa0, 0xcc, 0xac, 0x91, 0xea, 0xfa, 0x08, 0x48, 0x74, 0xd1, 0xd0, 0x2e, 0xd6, 0xc8, 0xad,
	0xac, 0x0b, 0xeb, 0x34, 0x33, 0xee, 0xce, 0xc8, 0xaf, 0x06, 0xbc, 0x32, 0x38, 0xab, 0xc9, 0x6a,
	0x81, 0x56, 0x7a, 0x61, 0x54, 0x6f, 0x3d, 0x0f, 0x86, 0x7e, 0xee, 0x69, 0x3f, 0x3b, 0xe4, 0xce,
	0x68, 0x7e, 0x2c, 0x5c, 0x24, 0x9c, 0xf9, 0xd6, 0x69, 0xbc, 0x54, 0xce, 0xc8, 0x37, 0x30, 0x3d,
	0x30, 0xd8, 0xc9, 0x4a, 0x56, 0x3c, 0x3b, 0xf7, 0xab, 0x66, 0x16, 0x35, 0x3c, 0xbd, 0xcd, 0x65,
	0x6d, 0x6f, 0x81, 0x54, 0x52, 0xf6, 0xa8, 0x6d, 0xd7, 0xe3, 0x21, 0x4d, 0xbe, 0x33, 0x60, 0x2a,
	0x51, 0x5e, 0xbe, 0x8c, 0x73, 0x74, 0xd9, 0x2d, 0x2d, 0xbb, 0x49, 0xd6, 0x53, 0xb2, 0xb1, 0x64,
	0x6e, 0xa3, 0x4e, 0x60, 0x12, 0x69, 0xc8, 0x52, 0xa1, 0x42, 0xec, 0x61, 0xf9, 0x12, 0xc4, 0xa5,
	0x95, 0xa3, 0x05, 0xeb, 0x94, 0x77, 0xce, 0xc8, 0xcf, 0x06, 0x90, 0xec, 0xe0, 0x26, 0x9b, 0x59,
	0xf2, 0xc2, 0x3d, 0x52, 0x7d, 0x6b, 0x34, 0x30, 0x9a, 0xda, 0xd0, 0xa6, 0x56, 0x88, 0x99, 0x32,
	0xc5, 0x30, 0xa1, 0xee, 0x3f, 0xa6, 0x6e, 0x9d, 0x8b, 0x7a, 0x38, 0xba, 0xc8, 0x6f, 0x06, 0xcc,
	0xe6, 0x8d, 0x63, 0x52, 0x2f, 0x96, 0xcc, 0x59, 0x11, 0xd5, 0xc6, 0xa8, 0x70, 0xf4, 0x58, 0xd7,
	0x1e, 0x6f, 0x93, 0xd5, 0x7c, 0x8f, 0x0e, 0x17, 0xaa, 0xee, 0xaa, 0x7a, 0xa0, 0xea, 0x6e, 0xe8,
	0xe6, 0x07, 0x03, 0x6e, 0x0c, 0x4f, 0x4b, 0xb2, 0x5e, 0xac, 0x39, 0x34, 0xb8, 0xab, 0x1b, 0xa3,
	0x40, 0xd1, 0xda, 0x6d, 0x6d, 0x6d, 0x99, 0x2c, 0xe6, 0x5b, 0xf3, 0x34, 0xbe, 0x1e, 0xa8, 0xdd,
	0x9d, 0x27, 0xe7, 0x35, 0xe3, 0xe9, 0x79, 0xcd, 0xf8, 0xeb, 0xbc, 0x66, 0x7c, 0x7f, 0x51, 0x1b,
	0x7b, 0x7a, 0x51, 0x1b, 0xfb, 0xe3, 0xa2, 0x36, 0xf6, 0x68, 0xa5, 0xcb, 0xd5, 0x71, 0xef, 0xb0,
	0xd1, 0x96, 0x8e, 0xf5, 0x40, 0x3c, 0x10, 0xfc, 0x43, 0x6e, 0xb5, 0x8f, 0x29, 0x17, 0xd6, 0xd7,
	0xd1, 0x03, 0x09, 0x5c, 0xe6, 0x1f, 0x96, 0xf4, 0x8f, 0xf9, 0xb7, 0xff, 0x0d, 0x00, 0x00, 0xff,
	0xff, 0x59, 0x6f, 0x2e, 0x03, 0xd7, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Vaults queries the InterestRateSwapVaults
	Vaults(ctx context.Context, in *QueryVaultsRequest, opts ...grpc.CallOption) (*QueryVaultsResponse, error)
	// Vault queries a single InterestRateSwapVault
	VaultByContract(ctx context.Context, in *QueryVaultByContractRequest, opts ...grpc.CallOption) (*QueryVaultByContractResponse, error)
	// VaultDetails queries the details of the vault
	VaultDetails(ctx context.Context, in *QueryVaultDetailsRequest, opts ...grpc.CallOption) (*QueryVaultDetailsResponse, error)
	// Tranches by Strategy
	AllTranches(ctx context.Context, in *QueryAllTranchesRequest, opts ...grpc.CallOption) (*QueryTranchesResponse, error)
	// Tranches by Strategy
	Tranches(ctx context.Context, in *QueryTranchesRequest, opts ...grpc.CallOption) (*QueryTranchesResponse, error)
	// Tranche by id
	Tranche(ctx context.Context, in *QueryTrancheRequest, opts ...grpc.CallOption) (*QueryTrancheResponse, error)
	// Estimate swap amount of UT/PT (in the pool)
	EstimateSwapInPool(ctx context.Context, in *QueryEstimateSwapInPoolRequest, opts ...grpc.CallOption) (*QueryEstimateSwapInPoolResponse, error)
	// Estimate mint amountof PT&YT pair
	EstimateMintPtYtPair(ctx context.Context, in *QueryEstimateMintPtYtPairRequest, opts ...grpc.CallOption) (*QueryEstimateMintPtYtPairResponse, error)
	// Estimate redeem amount of YT after maturity
	EstimateRedeemYt(ctx context.Context, in *QueryEstimateRedeemYtRequest, opts ...grpc.CallOption) (*QueryEstimateRedeemYtResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/ununifi.irs.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Vaults(ctx context.Context, in *QueryVaultsRequest, opts ...grpc.CallOption) (*QueryVaultsResponse, error) {
	out := new(QueryVaultsResponse)
	err := c.cc.Invoke(ctx, "/ununifi.irs.Query/Vaults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VaultByContract(ctx context.Context, in *QueryVaultByContractRequest, opts ...grpc.CallOption) (*QueryVaultByContractResponse, error) {
	out := new(QueryVaultByContractResponse)
	err := c.cc.Invoke(ctx, "/ununifi.irs.Query/VaultByContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VaultDetails(ctx context.Context, in *QueryVaultDetailsRequest, opts ...grpc.CallOption) (*QueryVaultDetailsResponse, error) {
	out := new(QueryVaultDetailsResponse)
	err := c.cc.Invoke(ctx, "/ununifi.irs.Query/VaultDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllTranches(ctx context.Context, in *QueryAllTranchesRequest, opts ...grpc.CallOption) (*QueryTranchesResponse, error) {
	out := new(QueryTranchesResponse)
	err := c.cc.Invoke(ctx, "/ununifi.irs.Query/AllTranches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Tranches(ctx context.Context, in *QueryTranchesRequest, opts ...grpc.CallOption) (*QueryTranchesResponse, error) {
	out := new(QueryTranchesResponse)
	err := c.cc.Invoke(ctx, "/ununifi.irs.Query/Tranches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Tranche(ctx context.Context, in *QueryTrancheRequest, opts ...grpc.CallOption) (*QueryTrancheResponse, error) {
	out := new(QueryTrancheResponse)
	err := c.cc.Invoke(ctx, "/ununifi.irs.Query/Tranche", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EstimateSwapInPool(ctx context.Context, in *QueryEstimateSwapInPoolRequest, opts ...grpc.CallOption) (*QueryEstimateSwapInPoolResponse, error) {
	out := new(QueryEstimateSwapInPoolResponse)
	err := c.cc.Invoke(ctx, "/ununifi.irs.Query/EstimateSwapInPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EstimateMintPtYtPair(ctx context.Context, in *QueryEstimateMintPtYtPairRequest, opts ...grpc.CallOption) (*QueryEstimateMintPtYtPairResponse, error) {
	out := new(QueryEstimateMintPtYtPairResponse)
	err := c.cc.Invoke(ctx, "/ununifi.irs.Query/EstimateMintPtYtPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EstimateRedeemYt(ctx context.Context, in *QueryEstimateRedeemYtRequest, opts ...grpc.CallOption) (*QueryEstimateRedeemYtResponse, error) {
	out := new(QueryEstimateRedeemYtResponse)
	err := c.cc.Invoke(ctx, "/ununifi.irs.Query/EstimateRedeemYt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Vaults queries the InterestRateSwapVaults
	Vaults(context.Context, *QueryVaultsRequest) (*QueryVaultsResponse, error)
	// Vault queries a single InterestRateSwapVault
	VaultByContract(context.Context, *QueryVaultByContractRequest) (*QueryVaultByContractResponse, error)
	// VaultDetails queries the details of the vault
	VaultDetails(context.Context, *QueryVaultDetailsRequest) (*QueryVaultDetailsResponse, error)
	// Tranches by Strategy
	AllTranches(context.Context, *QueryAllTranchesRequest) (*QueryTranchesResponse, error)
	// Tranches by Strategy
	Tranches(context.Context, *QueryTranchesRequest) (*QueryTranchesResponse, error)
	// Tranche by id
	Tranche(context.Context, *QueryTrancheRequest) (*QueryTrancheResponse, error)
	// Estimate swap amount of UT/PT (in the pool)
	EstimateSwapInPool(context.Context, *QueryEstimateSwapInPoolRequest) (*QueryEstimateSwapInPoolResponse, error)
	// Estimate mint amountof PT&YT pair
	EstimateMintPtYtPair(context.Context, *QueryEstimateMintPtYtPairRequest) (*QueryEstimateMintPtYtPairResponse, error)
	// Estimate redeem amount of YT after maturity
	EstimateRedeemYt(context.Context, *QueryEstimateRedeemYtRequest) (*QueryEstimateRedeemYtResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Vaults(ctx context.Context, req *QueryVaultsRequest) (*QueryVaultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vaults not implemented")
}
func (*UnimplementedQueryServer) VaultByContract(ctx context.Context, req *QueryVaultByContractRequest) (*QueryVaultByContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VaultByContract not implemented")
}
func (*UnimplementedQueryServer) VaultDetails(ctx context.Context, req *QueryVaultDetailsRequest) (*QueryVaultDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VaultDetails not implemented")
}
func (*UnimplementedQueryServer) AllTranches(ctx context.Context, req *QueryAllTranchesRequest) (*QueryTranchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllTranches not implemented")
}
func (*UnimplementedQueryServer) Tranches(ctx context.Context, req *QueryTranchesRequest) (*QueryTranchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tranches not implemented")
}
func (*UnimplementedQueryServer) Tranche(ctx context.Context, req *QueryTrancheRequest) (*QueryTrancheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tranche not implemented")
}
func (*UnimplementedQueryServer) EstimateSwapInPool(ctx context.Context, req *QueryEstimateSwapInPoolRequest) (*QueryEstimateSwapInPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateSwapInPool not implemented")
}
func (*UnimplementedQueryServer) EstimateMintPtYtPair(ctx context.Context, req *QueryEstimateMintPtYtPairRequest) (*QueryEstimateMintPtYtPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateMintPtYtPair not implemented")
}
func (*UnimplementedQueryServer) EstimateRedeemYt(ctx context.Context, req *QueryEstimateRedeemYtRequest) (*QueryEstimateRedeemYtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateRedeemYt not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.irs.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Vaults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVaultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Vaults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.irs.Query/Vaults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Vaults(ctx, req.(*QueryVaultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VaultByContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVaultByContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VaultByContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.irs.Query/VaultByContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VaultByContract(ctx, req.(*QueryVaultByContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VaultDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVaultDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VaultDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.irs.Query/VaultDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VaultDetails(ctx, req.(*QueryVaultDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllTranches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTranchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllTranches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.irs.Query/AllTranches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllTranches(ctx, req.(*QueryAllTranchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Tranches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTranchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Tranches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.irs.Query/Tranches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Tranches(ctx, req.(*QueryTranchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Tranche_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTrancheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Tranche(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.irs.Query/Tranche",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Tranche(ctx, req.(*QueryTrancheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EstimateSwapInPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEstimateSwapInPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EstimateSwapInPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.irs.Query/EstimateSwapInPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EstimateSwapInPool(ctx, req.(*QueryEstimateSwapInPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EstimateMintPtYtPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEstimateMintPtYtPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EstimateMintPtYtPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.irs.Query/EstimateMintPtYtPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EstimateMintPtYtPair(ctx, req.(*QueryEstimateMintPtYtPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EstimateRedeemYt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEstimateRedeemYtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EstimateRedeemYt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.irs.Query/EstimateRedeemYt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EstimateRedeemYt(ctx, req.(*QueryEstimateRedeemYtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ununifi.irs.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Vaults",
			Handler:    _Query_Vaults_Handler,
		},
		{
			MethodName: "VaultByContract",
			Handler:    _Query_VaultByContract_Handler,
		},
		{
			MethodName: "VaultDetails",
			Handler:    _Query_VaultDetails_Handler,
		},
		{
			MethodName: "AllTranches",
			Handler:    _Query_AllTranches_Handler,
		},
		{
			MethodName: "Tranches",
			Handler:    _Query_Tranches_Handler,
		},
		{
			MethodName: "Tranche",
			Handler:    _Query_Tranche_Handler,
		},
		{
			MethodName: "EstimateSwapInPool",
			Handler:    _Query_EstimateSwapInPool_Handler,
		},
		{
			MethodName: "EstimateMintPtYtPair",
			Handler:    _Query_EstimateMintPtYtPair_Handler,
		},
		{
			MethodName: "EstimateRedeemYt",
			Handler:    _Query_EstimateRedeemYt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ununifi/irs/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryVaultsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryVaultsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Vaults) > 0 {
		for iNdEx := len(m.Vaults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vaults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryVaultByContractRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultByContractRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultByContractRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StrategyContract) > 0 {
		i -= len(m.StrategyContract)
		copy(dAtA[i:], m.StrategyContract)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StrategyContract)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVaultByContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultByContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultByContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Vault.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryVaultDetailsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultDetailsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultDetailsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Maturity) > 0 {
		i -= len(m.Maturity)
		copy(dAtA[i:], m.Maturity)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Maturity)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StrategyContract) > 0 {
		i -= len(m.StrategyContract)
		copy(dAtA[i:], m.StrategyContract)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StrategyContract)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVaultDetailsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultDetailsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultDetailsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LvyRate) > 0 {
		i -= len(m.LvyRate)
		copy(dAtA[i:], m.LvyRate)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.LvyRate)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FyRate) > 0 {
		i -= len(m.FyRate)
		copy(dAtA[i:], m.FyRate)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.FyRate)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LiquidityPool) > 0 {
		i -= len(m.LiquidityPool)
		copy(dAtA[i:], m.LiquidityPool)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.LiquidityPool)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTranchesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTranchesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTranchesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTranchesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTranchesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTranchesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StrategyContract) > 0 {
		i -= len(m.StrategyContract)
		copy(dAtA[i:], m.StrategyContract)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StrategyContract)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTranchesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTranchesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTranchesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tranches) > 0 {
		for iNdEx := len(m.Tranches) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tranches[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTrancheRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTrancheRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTrancheRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTrancheResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTrancheResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTrancheResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Tranche.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryEstimateSwapInPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEstimateSwapInPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEstimateSwapInPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryEstimateSwapInPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEstimateSwapInPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEstimateSwapInPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryEstimateMintPtYtPairRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEstimateMintPtYtPairRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEstimateMintPtYtPairRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryEstimateMintPtYtPairResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEstimateMintPtYtPairResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEstimateMintPtYtPairResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.YtAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.PtAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryEstimateRedeemYtRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEstimateRedeemYtRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEstimateRedeemYtRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryEstimateRedeemYtResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEstimateRedeemYtResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEstimateRedeemYtResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryVaultsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryVaultsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Vaults) > 0 {
		for _, e := range m.Vaults {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryVaultByContractRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StrategyContract)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVaultByContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Vault.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryVaultDetailsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StrategyContract)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Maturity)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVaultDetailsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LiquidityPool)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.FyRate)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.LvyRate)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTranchesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTranchesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StrategyContract)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTranchesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tranches) > 0 {
		for _, e := range m.Tranches {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryTrancheRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryTrancheResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Tranche.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryEstimateSwapInPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEstimateSwapInPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryEstimateMintPtYtPairRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEstimateMintPtYtPairResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PtAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.YtAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryEstimateRedeemYtRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEstimateRedeemYtResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vaults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vaults = append(m.Vaults, InterestRateSwapVault{})
			if err := m.Vaults[len(m.Vaults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultByContractRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultByContractRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultByContractRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrategyContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StrategyContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultByContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultByContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultByContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Vault.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultDetailsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultDetailsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultDetailsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrategyContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StrategyContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maturity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Maturity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultDetailsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultDetailsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultDetailsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityPool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidityPool = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FyRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FyRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LvyRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LvyRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTranchesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTranchesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTranchesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTranchesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTranchesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTranchesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrategyContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StrategyContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTranchesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTranchesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTranchesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tranches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tranches = append(m.Tranches, TranchePool{})
			if err := m.Tranches[len(m.Tranches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTrancheRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTrancheRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTrancheRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTrancheResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTrancheResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTrancheResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tranche", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tranche.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEstimateSwapInPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEstimateSwapInPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEstimateSwapInPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEstimateSwapInPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEstimateSwapInPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEstimateSwapInPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEstimateMintPtYtPairRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEstimateMintPtYtPairRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEstimateMintPtYtPairRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEstimateMintPtYtPairResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEstimateMintPtYtPairResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEstimateMintPtYtPairResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PtAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PtAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field YtAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.YtAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEstimateRedeemYtRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEstimateRedeemYtRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEstimateRedeemYtRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEstimateRedeemYtResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEstimateRedeemYtResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEstimateRedeemYtResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
