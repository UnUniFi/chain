// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: yieldaggregatorv1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_558874aa520757b9, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_558874aa520757b9, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type AssetManagementAccountInfo struct {
	Id                     string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                   string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	AssetManagementTargets []AssetManagementTarget `protobuf:"bytes,3,rep,name=asset_management_targets,json=assetManagementTargets,proto3" json:"asset_management_targets"`
}

func (m *AssetManagementAccountInfo) Reset()         { *m = AssetManagementAccountInfo{} }
func (m *AssetManagementAccountInfo) String() string { return proto.CompactTextString(m) }
func (*AssetManagementAccountInfo) ProtoMessage()    {}
func (*AssetManagementAccountInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_558874aa520757b9, []int{2}
}
func (m *AssetManagementAccountInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetManagementAccountInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetManagementAccountInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetManagementAccountInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetManagementAccountInfo.Merge(m, src)
}
func (m *AssetManagementAccountInfo) XXX_Size() int {
	return m.Size()
}
func (m *AssetManagementAccountInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetManagementAccountInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AssetManagementAccountInfo proto.InternalMessageInfo

func (m *AssetManagementAccountInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AssetManagementAccountInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AssetManagementAccountInfo) GetAssetManagementTargets() []AssetManagementTarget {
	if m != nil {
		return m.AssetManagementTargets
	}
	return nil
}

type QueryAssetManagementAccountRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryAssetManagementAccountRequest) Reset()         { *m = QueryAssetManagementAccountRequest{} }
func (m *QueryAssetManagementAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAssetManagementAccountRequest) ProtoMessage()    {}
func (*QueryAssetManagementAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_558874aa520757b9, []int{3}
}
func (m *QueryAssetManagementAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAssetManagementAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAssetManagementAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAssetManagementAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAssetManagementAccountRequest.Merge(m, src)
}
func (m *QueryAssetManagementAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAssetManagementAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAssetManagementAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAssetManagementAccountRequest proto.InternalMessageInfo

func (m *QueryAssetManagementAccountRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QueryAssetManagementAccountResponse struct {
	Account AssetManagementAccountInfo `protobuf:"bytes,1,opt,name=account,proto3" json:"account"`
}

func (m *QueryAssetManagementAccountResponse) Reset()         { *m = QueryAssetManagementAccountResponse{} }
func (m *QueryAssetManagementAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAssetManagementAccountResponse) ProtoMessage()    {}
func (*QueryAssetManagementAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_558874aa520757b9, []int{4}
}
func (m *QueryAssetManagementAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAssetManagementAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAssetManagementAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAssetManagementAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAssetManagementAccountResponse.Merge(m, src)
}
func (m *QueryAssetManagementAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAssetManagementAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAssetManagementAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAssetManagementAccountResponse proto.InternalMessageInfo

func (m *QueryAssetManagementAccountResponse) GetAccount() AssetManagementAccountInfo {
	if m != nil {
		return m.Account
	}
	return AssetManagementAccountInfo{}
}

type QueryAllAssetManagementAccountsRequest struct {
}

func (m *QueryAllAssetManagementAccountsRequest) Reset() {
	*m = QueryAllAssetManagementAccountsRequest{}
}
func (m *QueryAllAssetManagementAccountsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllAssetManagementAccountsRequest) ProtoMessage()    {}
func (*QueryAllAssetManagementAccountsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_558874aa520757b9, []int{5}
}
func (m *QueryAllAssetManagementAccountsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAssetManagementAccountsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAssetManagementAccountsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAssetManagementAccountsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAssetManagementAccountsRequest.Merge(m, src)
}
func (m *QueryAllAssetManagementAccountsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAssetManagementAccountsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAssetManagementAccountsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAssetManagementAccountsRequest proto.InternalMessageInfo

type QueryAllAssetManagementAccountsResponse struct {
	Accounts []AssetManagementAccountInfo `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts"`
}

func (m *QueryAllAssetManagementAccountsResponse) Reset() {
	*m = QueryAllAssetManagementAccountsResponse{}
}
func (m *QueryAllAssetManagementAccountsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllAssetManagementAccountsResponse) ProtoMessage()    {}
func (*QueryAllAssetManagementAccountsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_558874aa520757b9, []int{6}
}
func (m *QueryAllAssetManagementAccountsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAssetManagementAccountsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAssetManagementAccountsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAssetManagementAccountsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAssetManagementAccountsResponse.Merge(m, src)
}
func (m *QueryAllAssetManagementAccountsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAssetManagementAccountsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAssetManagementAccountsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAssetManagementAccountsResponse proto.InternalMessageInfo

func (m *QueryAllAssetManagementAccountsResponse) GetAccounts() []AssetManagementAccountInfo {
	if m != nil {
		return m.Accounts
	}
	return nil
}

type QueryUserInfo struct {
	Amount        []types.Coin   `protobuf:"bytes,1,rep,name=amount,proto3" json:"amount"`
	FarmingOrders []FarmingOrder `protobuf:"bytes,2,rep,name=farming_orders,json=farmingOrders,proto3" json:"farming_orders"`
	FarmedCounter uint64         `protobuf:"varint,3,opt,name=farmed_counter,json=farmedCounter,proto3" json:"farmed_counter,omitempty"`
}

func (m *QueryUserInfo) Reset()         { *m = QueryUserInfo{} }
func (m *QueryUserInfo) String() string { return proto.CompactTextString(m) }
func (*QueryUserInfo) ProtoMessage()    {}
func (*QueryUserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_558874aa520757b9, []int{7}
}
func (m *QueryUserInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserInfo.Merge(m, src)
}
func (m *QueryUserInfo) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserInfo proto.InternalMessageInfo

func (m *QueryUserInfo) GetAmount() []types.Coin {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *QueryUserInfo) GetFarmingOrders() []FarmingOrder {
	if m != nil {
		return m.FarmingOrders
	}
	return nil
}

func (m *QueryUserInfo) GetFarmedCounter() uint64 {
	if m != nil {
		return m.FarmedCounter
	}
	return 0
}

type QueryUserInfoRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryUserInfoRequest) Reset()         { *m = QueryUserInfoRequest{} }
func (m *QueryUserInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUserInfoRequest) ProtoMessage()    {}
func (*QueryUserInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_558874aa520757b9, []int{8}
}
func (m *QueryUserInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserInfoRequest.Merge(m, src)
}
func (m *QueryUserInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserInfoRequest proto.InternalMessageInfo

func (m *QueryUserInfoRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryUserInfoResponse struct {
	UserInfo QueryUserInfo `protobuf:"bytes,1,opt,name=user_info,json=userInfo,proto3" json:"user_info"`
}

func (m *QueryUserInfoResponse) Reset()         { *m = QueryUserInfoResponse{} }
func (m *QueryUserInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUserInfoResponse) ProtoMessage()    {}
func (*QueryUserInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_558874aa520757b9, []int{9}
}
func (m *QueryUserInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserInfoResponse.Merge(m, src)
}
func (m *QueryUserInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserInfoResponse proto.InternalMessageInfo

func (m *QueryUserInfoResponse) GetUserInfo() QueryUserInfo {
	if m != nil {
		return m.UserInfo
	}
	return QueryUserInfo{}
}

type QueryAllFarmingUnitsRequest struct {
}

func (m *QueryAllFarmingUnitsRequest) Reset()         { *m = QueryAllFarmingUnitsRequest{} }
func (m *QueryAllFarmingUnitsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllFarmingUnitsRequest) ProtoMessage()    {}
func (*QueryAllFarmingUnitsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_558874aa520757b9, []int{10}
}
func (m *QueryAllFarmingUnitsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFarmingUnitsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFarmingUnitsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFarmingUnitsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFarmingUnitsRequest.Merge(m, src)
}
func (m *QueryAllFarmingUnitsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFarmingUnitsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFarmingUnitsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFarmingUnitsRequest proto.InternalMessageInfo

type QueryAllFarmingUnitsResponse struct {
	Units []FarmingUnit `protobuf:"bytes,1,rep,name=units,proto3" json:"units"`
}

func (m *QueryAllFarmingUnitsResponse) Reset()         { *m = QueryAllFarmingUnitsResponse{} }
func (m *QueryAllFarmingUnitsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllFarmingUnitsResponse) ProtoMessage()    {}
func (*QueryAllFarmingUnitsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_558874aa520757b9, []int{11}
}
func (m *QueryAllFarmingUnitsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFarmingUnitsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFarmingUnitsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFarmingUnitsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFarmingUnitsResponse.Merge(m, src)
}
func (m *QueryAllFarmingUnitsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFarmingUnitsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFarmingUnitsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFarmingUnitsResponse proto.InternalMessageInfo

func (m *QueryAllFarmingUnitsResponse) GetUnits() []FarmingUnit {
	if m != nil {
		return m.Units
	}
	return nil
}

type QueryDailyRewardPercentsRequest struct {
}

func (m *QueryDailyRewardPercentsRequest) Reset()         { *m = QueryDailyRewardPercentsRequest{} }
func (m *QueryDailyRewardPercentsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDailyRewardPercentsRequest) ProtoMessage()    {}
func (*QueryDailyRewardPercentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_558874aa520757b9, []int{12}
}
func (m *QueryDailyRewardPercentsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDailyRewardPercentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDailyRewardPercentsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDailyRewardPercentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDailyRewardPercentsRequest.Merge(m, src)
}
func (m *QueryDailyRewardPercentsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDailyRewardPercentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDailyRewardPercentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDailyRewardPercentsRequest proto.InternalMessageInfo

type QueryDailyRewardPercentsResponse struct {
	DailyPercents []DailyPercent `protobuf:"bytes,1,rep,name=daily_percents,json=dailyPercents,proto3" json:"daily_percents"`
}

func (m *QueryDailyRewardPercentsResponse) Reset()         { *m = QueryDailyRewardPercentsResponse{} }
func (m *QueryDailyRewardPercentsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDailyRewardPercentsResponse) ProtoMessage()    {}
func (*QueryDailyRewardPercentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_558874aa520757b9, []int{13}
}
func (m *QueryDailyRewardPercentsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDailyRewardPercentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDailyRewardPercentsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDailyRewardPercentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDailyRewardPercentsResponse.Merge(m, src)
}
func (m *QueryDailyRewardPercentsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDailyRewardPercentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDailyRewardPercentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDailyRewardPercentsResponse proto.InternalMessageInfo

func (m *QueryDailyRewardPercentsResponse) GetDailyPercents() []DailyPercent {
	if m != nil {
		return m.DailyPercents
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "ununifi.chain.yieldaggregator.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "ununifi.chain.yieldaggregator.QueryParamsResponse")
	proto.RegisterType((*AssetManagementAccountInfo)(nil), "ununifi.chain.yieldaggregator.AssetManagementAccountInfo")
	proto.RegisterType((*QueryAssetManagementAccountRequest)(nil), "ununifi.chain.yieldaggregator.QueryAssetManagementAccountRequest")
	proto.RegisterType((*QueryAssetManagementAccountResponse)(nil), "ununifi.chain.yieldaggregator.QueryAssetManagementAccountResponse")
	proto.RegisterType((*QueryAllAssetManagementAccountsRequest)(nil), "ununifi.chain.yieldaggregator.QueryAllAssetManagementAccountsRequest")
	proto.RegisterType((*QueryAllAssetManagementAccountsResponse)(nil), "ununifi.chain.yieldaggregator.QueryAllAssetManagementAccountsResponse")
	proto.RegisterType((*QueryUserInfo)(nil), "ununifi.chain.yieldaggregator.QueryUserInfo")
	proto.RegisterType((*QueryUserInfoRequest)(nil), "ununifi.chain.yieldaggregator.QueryUserInfoRequest")
	proto.RegisterType((*QueryUserInfoResponse)(nil), "ununifi.chain.yieldaggregator.QueryUserInfoResponse")
	proto.RegisterType((*QueryAllFarmingUnitsRequest)(nil), "ununifi.chain.yieldaggregator.QueryAllFarmingUnitsRequest")
	proto.RegisterType((*QueryAllFarmingUnitsResponse)(nil), "ununifi.chain.yieldaggregator.QueryAllFarmingUnitsResponse")
	proto.RegisterType((*QueryDailyRewardPercentsRequest)(nil), "ununifi.chain.yieldaggregator.QueryDailyRewardPercentsRequest")
	proto.RegisterType((*QueryDailyRewardPercentsResponse)(nil), "ununifi.chain.yieldaggregator.QueryDailyRewardPercentsResponse")
}

func init() { proto.RegisterFile("yieldaggregatorv1/query.proto", fileDescriptor_558874aa520757b9) }

var fileDescriptor_558874aa520757b9 = []byte{
	// 905 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xdd, 0x6e, 0x1b, 0x45,
	0x18, 0xcd, 0x3a, 0xa9, 0xdb, 0x7c, 0x55, 0x83, 0x34, 0x0d, 0x95, 0x59, 0x1a, 0xd7, 0x2c, 0x2a,
	0x35, 0x05, 0xed, 0x62, 0xd7, 0x6a, 0xf9, 0x53, 0x20, 0x09, 0x58, 0x42, 0x02, 0xb5, 0x58, 0x58,
	0x2a, 0xe5, 0xc2, 0x1a, 0x7b, 0xc7, 0x9b, 0x91, 0xbc, 0x33, 0xee, 0xcc, 0x6e, 0xc1, 0x2a, 0x95,
	0x10, 0x17, 0x5c, 0x23, 0xf1, 0x02, 0xbc, 0x03, 0x12, 0x2f, 0xc0, 0x4d, 0xb9, 0xab, 0x84, 0x84,
	0xb8, 0x02, 0x94, 0x20, 0xf1, 0x00, 0xbc, 0x00, 0xda, 0x99, 0xd9, 0xc5, 0x76, 0xd7, 0x59, 0xbb,
	0xe5, 0xce, 0x3b, 0xdf, 0x9c, 0x33, 0xe7, 0x7c, 0xf3, 0xcd, 0x49, 0x60, 0x67, 0x42, 0xc9, 0xc8,
	0xc7, 0x41, 0x20, 0x48, 0x80, 0x23, 0x2e, 0xee, 0x35, 0xbc, 0xbb, 0x31, 0x11, 0x13, 0x77, 0x2c,
	0x78, 0xc4, 0xd1, 0x4e, 0xcc, 0x62, 0x46, 0x87, 0xd4, 0x1d, 0x1c, 0x62, 0xca, 0xdc, 0xb9, 0xcd,
	0xf6, 0x76, 0xc0, 0x03, 0xae, 0x76, 0x7a, 0xc9, 0x2f, 0x0d, 0xb2, 0x2f, 0x06, 0x9c, 0x07, 0x23,
	0xe2, 0xe1, 0x31, 0xf5, 0x30, 0x63, 0x3c, 0xc2, 0x11, 0xe5, 0x4c, 0x9a, 0x6a, 0x75, 0xc0, 0x65,
	0xc8, 0xa5, 0xd7, 0xc7, 0x92, 0x78, 0xf7, 0x1a, 0x7d, 0x12, 0xe1, 0x86, 0x37, 0xe0, 0x94, 0x99,
	0xfa, 0xd5, 0xe9, 0xba, 0xd2, 0x92, 0xed, 0x1a, 0xe3, 0x80, 0x32, 0x45, 0x96, 0x72, 0x3d, 0xae,
	0x7e, 0x8c, 0x05, 0x0e, 0xd3, 0xb3, 0x72, 0xdc, 0x61, 0x29, 0x49, 0xa4, 0xcb, 0xce, 0x36, 0xa0,
	0x8f, 0x93, 0x03, 0x6e, 0x29, 0x4c, 0x87, 0xdc, 0x8d, 0x89, 0x8c, 0x9c, 0x3b, 0x70, 0x7e, 0x66,
	0x55, 0x8e, 0x39, 0x93, 0x04, 0x1d, 0x40, 0x59, 0x73, 0x57, 0xac, 0x9a, 0x55, 0x3f, 0xdb, 0xbc,
	0xec, 0x9e, 0xd8, 0x1b, 0x57, 0xc3, 0xf7, 0x37, 0x1e, 0xfe, 0x7e, 0x69, 0xad, 0x63, 0xa0, 0xce,
	0x8f, 0x16, 0xd8, 0x7b, 0x89, 0x82, 0x8f, 0x30, 0xc3, 0x01, 0x09, 0x09, 0x8b, 0xf6, 0x06, 0x03,
	0x1e, 0xb3, 0xe8, 0x03, 0x36, 0xe4, 0x68, 0x0b, 0x4a, 0xd4, 0x57, 0xfc, 0x9b, 0x9d, 0x12, 0xf5,
	0x11, 0x82, 0x0d, 0x86, 0x43, 0x52, 0x29, 0xa9, 0x15, 0xf5, 0x1b, 0x45, 0x50, 0x51, 0x1e, 0x7a,
	0x61, 0x46, 0xd1, 0x8b, 0xb0, 0x08, 0x48, 0x24, 0x2b, 0xeb, 0xb5, 0xf5, 0xfa, 0xd9, 0x66, 0xab,
	0x40, 0xd9, 0x9c, 0x80, 0x4f, 0x14, 0xd8, 0x08, 0xbd, 0x80, 0xf3, 0x8a, 0xd2, 0x69, 0x81, 0xa3,
	0x9a, 0x92, 0x2f, 0xde, 0xb4, 0x6e, 0x5e, 0xbf, 0xf3, 0x95, 0x05, 0x2f, 0x9e, 0x08, 0x33, 0xbd,
	0xfd, 0x14, 0x4e, 0x63, 0xbd, 0x64, 0x9a, 0xfb, 0xc6, 0x6a, 0x16, 0xa6, 0x7a, 0x68, 0x7c, 0xa4,
	0x7c, 0x4e, 0x1d, 0x5e, 0xd2, 0x0a, 0x46, 0xa3, 0x7c, 0x50, 0x76, 0xef, 0xdf, 0x58, 0x70, 0xa5,
	0x70, 0xab, 0x11, 0xfc, 0x19, 0x9c, 0x31, 0x07, 0x24, 0xe3, 0xb0, 0xfe, 0x7f, 0x28, 0xce, 0x08,
	0x9d, 0x9f, 0x2d, 0x38, 0xa7, 0x84, 0x74, 0x25, 0x11, 0x6a, 0x2e, 0x6e, 0x40, 0x19, 0x87, 0xa6,
	0x3d, 0xc9, 0x61, 0xcf, 0xb9, 0xfa, 0x91, 0xb8, 0xc9, 0x23, 0x71, 0xcd, 0xf3, 0x70, 0x0f, 0x38,
	0x65, 0xe9, 0xbc, 0xe9, 0xed, 0xe8, 0x36, 0x6c, 0x0d, 0xb1, 0x08, 0x29, 0x0b, 0x7a, 0x5c, 0xf8,
	0x44, 0xc8, 0x4a, 0x49, 0x11, 0xbc, 0x52, 0xa0, 0xb6, 0xad, 0x41, 0x37, 0x13, 0x8c, 0xa1, 0x3c,
	0x37, 0x9c, 0x5a, 0x93, 0xe8, 0xb2, 0x66, 0x26, 0x7e, 0x4f, 0xa9, 0x26, 0xa2, 0xb2, 0x5e, 0xb3,
	0xea, 0x1b, 0x7a, 0x1b, 0xf1, 0x0f, 0xf4, 0xa2, 0xf3, 0x1a, 0x6c, 0xcf, 0x58, 0x49, 0x27, 0xa5,
	0x02, 0xa7, 0xb1, 0xef, 0x0b, 0x22, 0xa5, 0x19, 0x97, 0xf4, 0xd3, 0x39, 0x84, 0x67, 0xe7, 0x10,
	0xa6, 0xe7, 0x37, 0x61, 0x33, 0x96, 0x44, 0xf4, 0x28, 0x1b, 0x72, 0x33, 0x26, 0xaf, 0x16, 0xd8,
	0x98, 0x21, 0x4a, 0xfb, 0x1c, 0x9b, 0x6f, 0x67, 0x07, 0x9e, 0x4f, 0xef, 0xdb, 0xf8, 0xed, 0x32,
	0xfa, 0xdf, 0x3c, 0x0c, 0xe1, 0x62, 0x7e, 0xd9, 0xe8, 0x69, 0xc3, 0xa9, 0x38, 0x59, 0x30, 0x77,
	0x72, 0x75, 0xb9, 0x96, 0x26, 0x1c, 0x46, 0x89, 0x86, 0x3b, 0x2f, 0xc0, 0x25, 0x75, 0xce, 0x7b,
	0x98, 0x8e, 0x26, 0x1d, 0xf2, 0x39, 0x16, 0xfe, 0x2d, 0x22, 0x06, 0x64, 0x6a, 0x34, 0xbf, 0x84,
	0xda, 0xe2, 0x2d, 0x46, 0xce, 0x6d, 0xd8, 0xf2, 0x93, 0x72, 0x6f, 0x6c, 0x2a, 0x46, 0x57, 0xd1,
	0x55, 0x2b, 0x4e, 0xc3, 0x96, 0x5e, 0xb5, 0x3f, 0xb5, 0x26, 0x9b, 0x7f, 0x6c, 0xc2, 0x29, 0x75,
	0x3c, 0xfa, 0xde, 0x82, 0xb2, 0xce, 0x35, 0xd4, 0x58, 0xa6, 0xf5, 0x33, 0xc1, 0x6a, 0x37, 0x57,
	0x81, 0x68, 0x57, 0x8e, 0xf7, 0xf5, 0x2f, 0x7f, 0x7d, 0x57, 0x7a, 0x19, 0x5d, 0xf1, 0xba, 0xac,
	0xcb, 0x68, 0x9b, 0x7a, 0x0a, 0xeb, 0x2d, 0x0a, 0x7e, 0xf4, 0xb7, 0x05, 0x17, 0xf2, 0xdf, 0x1a,
	0xda, 0x5b, 0xe6, 0xfc, 0x13, 0x03, 0xce, 0xde, 0x7f, 0x1a, 0x0a, 0x63, 0xa9, 0xad, 0x2c, 0xbd,
	0x8b, 0x76, 0x0b, 0x2d, 0x3d, 0x96, 0xf3, 0x26, 0x22, 0xbc, 0xfb, 0xd4, 0x7f, 0x80, 0xfe, 0x49,
	0xfe, 0x96, 0x2c, 0x8c, 0x2a, 0xf4, 0xfe, 0x52, 0x52, 0x8b, 0x52, 0xd1, 0x6e, 0x3f, 0x2d, 0xcd,
	0xea, 0xae, 0x47, 0xa3, 0xde, 0x22, 0xe7, 0x12, 0xfd, 0x60, 0xc1, 0x99, 0x2c, 0x17, 0xaf, 0xad,
	0xf2, 0xfe, 0x53, 0x47, 0xad, 0xd5, 0x40, 0x46, 0xff, 0xdb, 0x4a, 0xff, 0x75, 0xd4, 0x2a, 0xd4,
	0x9f, 0x85, 0x94, 0x77, 0xdf, 0x64, 0xda, 0x03, 0xf4, 0x93, 0x05, 0xcf, 0xcc, 0xe5, 0x08, 0x7a,
	0x73, 0xc9, 0xce, 0xe6, 0x64, 0x93, 0xfd, 0xd6, 0x13, 0x61, 0x8d, 0x95, 0x1b, 0xca, 0x4a, 0x03,
	0x79, 0x4b, 0x5d, 0x45, 0x66, 0x47, 0xa2, 0x5f, 0x2d, 0x38, 0x9f, 0x13, 0x41, 0x68, 0x77, 0x19,
	0x35, 0x8b, 0xe3, 0xcd, 0x7e, 0xe7, 0x89, 0xf1, 0xc6, 0xd1, 0xae, 0x72, 0xf4, 0x3a, 0xba, 0x5e,
	0xe8, 0x48, 0x47, 0xa4, 0x50, 0x34, 0x59, 0x52, 0xee, 0x7f, 0xf8, 0xf0, 0xa8, 0x6a, 0x3d, 0x3a,
	0xaa, 0x5a, 0x7f, 0x1e, 0x55, 0xad, 0x6f, 0x8f, 0xab, 0x6b, 0x8f, 0x8e, 0xab, 0x6b, 0xbf, 0x1d,
	0x57, 0xd7, 0xee, 0x34, 0x03, 0x1a, 0x1d, 0xc6, 0x7d, 0x77, 0xc0, 0xc3, 0x39, 0xee, 0x2f, 0x72,
	0xd8, 0xa3, 0xc9, 0x98, 0xc8, 0x7e, 0x59, 0xfd, 0x77, 0x79, 0xed, 0xdf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xa9, 0x2f, 0x4b, 0x70, 0x5c, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	AssetManagementAccount(ctx context.Context, in *QueryAssetManagementAccountRequest, opts ...grpc.CallOption) (*QueryAssetManagementAccountResponse, error)
	AllAssetManagementAccounts(ctx context.Context, in *QueryAllAssetManagementAccountsRequest, opts ...grpc.CallOption) (*QueryAllAssetManagementAccountsResponse, error)
	UserInfo(ctx context.Context, in *QueryUserInfoRequest, opts ...grpc.CallOption) (*QueryUserInfoResponse, error)
	AllFarmingUnits(ctx context.Context, in *QueryAllFarmingUnitsRequest, opts ...grpc.CallOption) (*QueryAllFarmingUnitsResponse, error)
	DailyRewardPercents(ctx context.Context, in *QueryDailyRewardPercentsRequest, opts ...grpc.CallOption) (*QueryDailyRewardPercentsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/ununifi.chain.yieldaggregator.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AssetManagementAccount(ctx context.Context, in *QueryAssetManagementAccountRequest, opts ...grpc.CallOption) (*QueryAssetManagementAccountResponse, error) {
	out := new(QueryAssetManagementAccountResponse)
	err := c.cc.Invoke(ctx, "/ununifi.chain.yieldaggregator.Query/AssetManagementAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllAssetManagementAccounts(ctx context.Context, in *QueryAllAssetManagementAccountsRequest, opts ...grpc.CallOption) (*QueryAllAssetManagementAccountsResponse, error) {
	out := new(QueryAllAssetManagementAccountsResponse)
	err := c.cc.Invoke(ctx, "/ununifi.chain.yieldaggregator.Query/AllAssetManagementAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserInfo(ctx context.Context, in *QueryUserInfoRequest, opts ...grpc.CallOption) (*QueryUserInfoResponse, error) {
	out := new(QueryUserInfoResponse)
	err := c.cc.Invoke(ctx, "/ununifi.chain.yieldaggregator.Query/UserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllFarmingUnits(ctx context.Context, in *QueryAllFarmingUnitsRequest, opts ...grpc.CallOption) (*QueryAllFarmingUnitsResponse, error) {
	out := new(QueryAllFarmingUnitsResponse)
	err := c.cc.Invoke(ctx, "/ununifi.chain.yieldaggregator.Query/AllFarmingUnits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DailyRewardPercents(ctx context.Context, in *QueryDailyRewardPercentsRequest, opts ...grpc.CallOption) (*QueryDailyRewardPercentsResponse, error) {
	out := new(QueryDailyRewardPercentsResponse)
	err := c.cc.Invoke(ctx, "/ununifi.chain.yieldaggregator.Query/DailyRewardPercents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	AssetManagementAccount(context.Context, *QueryAssetManagementAccountRequest) (*QueryAssetManagementAccountResponse, error)
	AllAssetManagementAccounts(context.Context, *QueryAllAssetManagementAccountsRequest) (*QueryAllAssetManagementAccountsResponse, error)
	UserInfo(context.Context, *QueryUserInfoRequest) (*QueryUserInfoResponse, error)
	AllFarmingUnits(context.Context, *QueryAllFarmingUnitsRequest) (*QueryAllFarmingUnitsResponse, error)
	DailyRewardPercents(context.Context, *QueryDailyRewardPercentsRequest) (*QueryDailyRewardPercentsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) AssetManagementAccount(ctx context.Context, req *QueryAssetManagementAccountRequest) (*QueryAssetManagementAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssetManagementAccount not implemented")
}
func (*UnimplementedQueryServer) AllAssetManagementAccounts(ctx context.Context, req *QueryAllAssetManagementAccountsRequest) (*QueryAllAssetManagementAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllAssetManagementAccounts not implemented")
}
func (*UnimplementedQueryServer) UserInfo(ctx context.Context, req *QueryUserInfoRequest) (*QueryUserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfo not implemented")
}
func (*UnimplementedQueryServer) AllFarmingUnits(ctx context.Context, req *QueryAllFarmingUnitsRequest) (*QueryAllFarmingUnitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllFarmingUnits not implemented")
}
func (*UnimplementedQueryServer) DailyRewardPercents(ctx context.Context, req *QueryDailyRewardPercentsRequest) (*QueryDailyRewardPercentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DailyRewardPercents not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.chain.yieldaggregator.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AssetManagementAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAssetManagementAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AssetManagementAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.chain.yieldaggregator.Query/AssetManagementAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AssetManagementAccount(ctx, req.(*QueryAssetManagementAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllAssetManagementAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAssetManagementAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllAssetManagementAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.chain.yieldaggregator.Query/AllAssetManagementAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllAssetManagementAccounts(ctx, req.(*QueryAllAssetManagementAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.chain.yieldaggregator.Query/UserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserInfo(ctx, req.(*QueryUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllFarmingUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllFarmingUnitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllFarmingUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.chain.yieldaggregator.Query/AllFarmingUnits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllFarmingUnits(ctx, req.(*QueryAllFarmingUnitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DailyRewardPercents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDailyRewardPercentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DailyRewardPercents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.chain.yieldaggregator.Query/DailyRewardPercents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DailyRewardPercents(ctx, req.(*QueryDailyRewardPercentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ununifi.chain.yieldaggregator.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "AssetManagementAccount",
			Handler:    _Query_AssetManagementAccount_Handler,
		},
		{
			MethodName: "AllAssetManagementAccounts",
			Handler:    _Query_AllAssetManagementAccounts_Handler,
		},
		{
			MethodName: "UserInfo",
			Handler:    _Query_UserInfo_Handler,
		},
		{
			MethodName: "AllFarmingUnits",
			Handler:    _Query_AllFarmingUnits_Handler,
		},
		{
			MethodName: "DailyRewardPercents",
			Handler:    _Query_DailyRewardPercents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yieldaggregatorv1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AssetManagementAccountInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetManagementAccountInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetManagementAccountInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssetManagementTargets) > 0 {
		for iNdEx := len(m.AssetManagementTargets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AssetManagementTargets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAssetManagementAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAssetManagementAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAssetManagementAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAssetManagementAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAssetManagementAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAssetManagementAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllAssetManagementAccountsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAssetManagementAccountsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAssetManagementAccountsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllAssetManagementAccountsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAssetManagementAccountsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAssetManagementAccountsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for iNdEx := len(m.Accounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Accounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FarmedCounter != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.FarmedCounter))
		i--
		dAtA[i] = 0x18
	}
	if len(m.FarmingOrders) > 0 {
		for iNdEx := len(m.FarmingOrders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FarmingOrders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.UserInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllFarmingUnitsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFarmingUnitsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFarmingUnitsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllFarmingUnitsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFarmingUnitsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFarmingUnitsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Units) > 0 {
		for iNdEx := len(m.Units) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Units[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDailyRewardPercentsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDailyRewardPercentsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDailyRewardPercentsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryDailyRewardPercentsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDailyRewardPercentsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDailyRewardPercentsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DailyPercents) > 0 {
		for iNdEx := len(m.DailyPercents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DailyPercents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *AssetManagementAccountInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.AssetManagementTargets) > 0 {
		for _, e := range m.AssetManagementTargets {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAssetManagementAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAssetManagementAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Account.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllAssetManagementAccountsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllAssetManagementAccountsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for _, e := range m.Accounts {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryUserInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.FarmingOrders) > 0 {
		for _, e := range m.FarmingOrders {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.FarmedCounter != 0 {
		n += 1 + sovQuery(uint64(m.FarmedCounter))
	}
	return n
}

func (m *QueryUserInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUserInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.UserInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllFarmingUnitsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllFarmingUnitsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Units) > 0 {
		for _, e := range m.Units {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryDailyRewardPercentsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryDailyRewardPercentsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DailyPercents) > 0 {
		for _, e := range m.DailyPercents {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetManagementAccountInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetManagementAccountInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetManagementAccountInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetManagementTargets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetManagementTargets = append(m.AssetManagementTargets, AssetManagementTarget{})
			if err := m.AssetManagementTargets[len(m.AssetManagementTargets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAssetManagementAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAssetManagementAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAssetManagementAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAssetManagementAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAssetManagementAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAssetManagementAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAssetManagementAccountsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAssetManagementAccountsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAssetManagementAccountsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAssetManagementAccountsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAssetManagementAccountsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAssetManagementAccountsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accounts = append(m.Accounts, AssetManagementAccountInfo{})
			if err := m.Accounts[len(m.Accounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FarmingOrders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FarmingOrders = append(m.FarmingOrders, FarmingOrder{})
			if err := m.FarmingOrders[len(m.FarmingOrders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FarmedCounter", wireType)
			}
			m.FarmedCounter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FarmedCounter |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UserInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFarmingUnitsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFarmingUnitsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFarmingUnitsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFarmingUnitsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFarmingUnitsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFarmingUnitsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Units", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Units = append(m.Units, FarmingUnit{})
			if err := m.Units[len(m.Units)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDailyRewardPercentsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDailyRewardPercentsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDailyRewardPercentsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDailyRewardPercentsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDailyRewardPercentsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDailyRewardPercentsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DailyPercents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DailyPercents = append(m.DailyPercents, DailyPercent{})
			if err := m.DailyPercents[len(m.DailyPercents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
