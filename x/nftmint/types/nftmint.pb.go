// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nftmint/nftmint.proto

package types

import (
	fmt "fmt"
	github_com_UnUniFi_chain_types "github.com/UnUniFi/chain/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MintingPermission int32

const (
	MintingPermission_OnlyOwner MintingPermission = 0
	MintingPermission_Anyone    MintingPermission = 1
	MintingPermission_WhiteList MintingPermission = 2
)

var MintingPermission_name = map[int32]string{
	0: "OnlyOwner",
	1: "Anyone",
	2: "WhiteList",
}

var MintingPermission_value = map[string]int32{
	"OnlyOwner": 0,
	"Anyone":    1,
	"WhiteList": 2,
}

func (x MintingPermission) String() string {
	return proto.EnumName(MintingPermission_name, int32(x))
}

func (MintingPermission) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_828f2ddeb82d86e5, []int{0}
}

type ClassAttributes struct {
	ClassId           string                                           `protobuf:"bytes,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	Owner             *github_com_UnUniFi_chain_types.StringAccAddress `protobuf:"bytes,2,opt,name=owner,proto3,customtype=github.com/UnUniFi/chain/types.StringAccAddress" json:"owner,omitempty"`
	BaseTokenUri      string                                           `protobuf:"bytes,3,opt,name=base_token_uri,json=baseTokenUri,proto3" json:"base_token_uri,omitempty"`
	MintingPermission MintingPermission                                `protobuf:"varint,4,opt,name=minting_permission,json=mintingPermission,proto3,enum=ununifi.nftmint.MintingPermission" json:"minting_permission,omitempty"`
	TokenSupplyCap    uint64                                           `protobuf:"varint,5,opt,name=token_supply_cap,json=tokenSupplyCap,proto3" json:"token_supply_cap,omitempty"`
}

func (m *ClassAttributes) Reset()         { *m = ClassAttributes{} }
func (m *ClassAttributes) String() string { return proto.CompactTextString(m) }
func (*ClassAttributes) ProtoMessage()    {}
func (*ClassAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_828f2ddeb82d86e5, []int{0}
}
func (m *ClassAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClassAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClassAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClassAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClassAttributes.Merge(m, src)
}
func (m *ClassAttributes) XXX_Size() int {
	return m.Size()
}
func (m *ClassAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_ClassAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_ClassAttributes proto.InternalMessageInfo

func (m *ClassAttributes) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *ClassAttributes) GetBaseTokenUri() string {
	if m != nil {
		return m.BaseTokenUri
	}
	return ""
}

func (m *ClassAttributes) GetMintingPermission() MintingPermission {
	if m != nil {
		return m.MintingPermission
	}
	return MintingPermission_OnlyOwner
}

func (m *ClassAttributes) GetTokenSupplyCap() uint64 {
	if m != nil {
		return m.TokenSupplyCap
	}
	return 0
}

type NFTAttributes struct {
	ClassId string                                           `protobuf:"bytes,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	NftId   string                                           `protobuf:"bytes,2,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
	Minter  *github_com_UnUniFi_chain_types.StringAccAddress `protobuf:"bytes,3,opt,name=minter,proto3,customtype=github.com/UnUniFi/chain/types.StringAccAddress" json:"minter,omitempty"`
}

func (m *NFTAttributes) Reset()         { *m = NFTAttributes{} }
func (m *NFTAttributes) String() string { return proto.CompactTextString(m) }
func (*NFTAttributes) ProtoMessage()    {}
func (*NFTAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_828f2ddeb82d86e5, []int{1}
}
func (m *NFTAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NFTAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NFTAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NFTAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NFTAttributes.Merge(m, src)
}
func (m *NFTAttributes) XXX_Size() int {
	return m.Size()
}
func (m *NFTAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_NFTAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_NFTAttributes proto.InternalMessageInfo

func (m *NFTAttributes) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *NFTAttributes) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

type OwningList struct {
	Owner   string   `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	ClassId []string `protobuf:"bytes,2,rep,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
}

func (m *OwningList) Reset()         { *m = OwningList{} }
func (m *OwningList) String() string { return proto.CompactTextString(m) }
func (*OwningList) ProtoMessage()    {}
func (*OwningList) Descriptor() ([]byte, []int) {
	return fileDescriptor_828f2ddeb82d86e5, []int{2}
}
func (m *OwningList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OwningList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OwningList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OwningList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OwningList.Merge(m, src)
}
func (m *OwningList) XXX_Size() int {
	return m.Size()
}
func (m *OwningList) XXX_DiscardUnknown() {
	xxx_messageInfo_OwningList.DiscardUnknown(m)
}

var xxx_messageInfo_OwningList proto.InternalMessageInfo

func (m *OwningList) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *OwningList) GetClassId() []string {
	if m != nil {
		return m.ClassId
	}
	return nil
}

type Params struct {
	MaxTokenSupplyLimit uint64 `protobuf:"varint,1,opt,name=MaxTokenSupplyLimit,proto3" json:"MaxTokenSupplyLimit,omitempty"`
	MinClassNameLen     uint64 `protobuf:"varint,2,opt,name=MinClassNameLen,proto3" json:"MinClassNameLen,omitempty"`
	MaxClassNameLen     uint64 `protobuf:"varint,3,opt,name=MaxClassNameLen,proto3" json:"MaxClassNameLen,omitempty"`
	MaxClassUriLen      uint64 `protobuf:"varint,4,opt,name=MaxClassUriLen,proto3" json:"MaxClassUriLen,omitempty"`
	MaxBaseTokenUriLen  uint64 `protobuf:"varint,5,opt,name=MaxBaseTokenUriLen,proto3" json:"MaxBaseTokenUriLen,omitempty"`
	MaxSymbolLen        uint64 `protobuf:"varint,6,opt,name=MaxSymbolLen,proto3" json:"MaxSymbolLen,omitempty"`
	MaxDescriptionLen   uint64 `protobuf:"varint,7,opt,name=MaxDescriptionLen,proto3" json:"MaxDescriptionLen,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_828f2ddeb82d86e5, []int{3}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetMaxTokenSupplyLimit() uint64 {
	if m != nil {
		return m.MaxTokenSupplyLimit
	}
	return 0
}

func (m *Params) GetMinClassNameLen() uint64 {
	if m != nil {
		return m.MinClassNameLen
	}
	return 0
}

func (m *Params) GetMaxClassNameLen() uint64 {
	if m != nil {
		return m.MaxClassNameLen
	}
	return 0
}

func (m *Params) GetMaxClassUriLen() uint64 {
	if m != nil {
		return m.MaxClassUriLen
	}
	return 0
}

func (m *Params) GetMaxBaseTokenUriLen() uint64 {
	if m != nil {
		return m.MaxBaseTokenUriLen
	}
	return 0
}

func (m *Params) GetMaxSymbolLen() uint64 {
	if m != nil {
		return m.MaxSymbolLen
	}
	return 0
}

func (m *Params) GetMaxDescriptionLen() uint64 {
	if m != nil {
		return m.MaxDescriptionLen
	}
	return 0
}

type EventCreateClass struct {
	Owner             string            `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	ClassId           string            `protobuf:"bytes,2,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	BaseTokenUri      string            `protobuf:"bytes,3,opt,name=base_token_uri,json=baseTokenUri,proto3" json:"base_token_uri,omitempty"`
	TokenSupplyCap    string            `protobuf:"bytes,4,opt,name=token_supply_cap,json=tokenSupplyCap,proto3" json:"token_supply_cap,omitempty"`
	MintingPermission MintingPermission `protobuf:"varint,5,opt,name=minting_permission,json=mintingPermission,proto3,enum=ununifi.nftmint.MintingPermission" json:"minting_permission,omitempty"`
}

func (m *EventCreateClass) Reset()         { *m = EventCreateClass{} }
func (m *EventCreateClass) String() string { return proto.CompactTextString(m) }
func (*EventCreateClass) ProtoMessage()    {}
func (*EventCreateClass) Descriptor() ([]byte, []int) {
	return fileDescriptor_828f2ddeb82d86e5, []int{4}
}
func (m *EventCreateClass) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCreateClass) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCreateClass.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCreateClass) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCreateClass.Merge(m, src)
}
func (m *EventCreateClass) XXX_Size() int {
	return m.Size()
}
func (m *EventCreateClass) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCreateClass.DiscardUnknown(m)
}

var xxx_messageInfo_EventCreateClass proto.InternalMessageInfo

func (m *EventCreateClass) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *EventCreateClass) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *EventCreateClass) GetBaseTokenUri() string {
	if m != nil {
		return m.BaseTokenUri
	}
	return ""
}

func (m *EventCreateClass) GetTokenSupplyCap() string {
	if m != nil {
		return m.TokenSupplyCap
	}
	return ""
}

func (m *EventCreateClass) GetMintingPermission() MintingPermission {
	if m != nil {
		return m.MintingPermission
	}
	return MintingPermission_OnlyOwner
}

type EventSendClass struct {
	Sender   string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Receiver string `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
	ClassId  string `protobuf:"bytes,3,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
}

func (m *EventSendClass) Reset()         { *m = EventSendClass{} }
func (m *EventSendClass) String() string { return proto.CompactTextString(m) }
func (*EventSendClass) ProtoMessage()    {}
func (*EventSendClass) Descriptor() ([]byte, []int) {
	return fileDescriptor_828f2ddeb82d86e5, []int{5}
}
func (m *EventSendClass) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSendClass) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSendClass.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSendClass) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSendClass.Merge(m, src)
}
func (m *EventSendClass) XXX_Size() int {
	return m.Size()
}
func (m *EventSendClass) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSendClass.DiscardUnknown(m)
}

var xxx_messageInfo_EventSendClass proto.InternalMessageInfo

func (m *EventSendClass) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventSendClass) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *EventSendClass) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

type EventUpdateBaseTokenUri struct {
	Owner        string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	ClassId      string `protobuf:"bytes,2,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	BaseTokenUri string `protobuf:"bytes,3,opt,name=base_token_uri,json=baseTokenUri,proto3" json:"base_token_uri,omitempty"`
}

func (m *EventUpdateBaseTokenUri) Reset()         { *m = EventUpdateBaseTokenUri{} }
func (m *EventUpdateBaseTokenUri) String() string { return proto.CompactTextString(m) }
func (*EventUpdateBaseTokenUri) ProtoMessage()    {}
func (*EventUpdateBaseTokenUri) Descriptor() ([]byte, []int) {
	return fileDescriptor_828f2ddeb82d86e5, []int{6}
}
func (m *EventUpdateBaseTokenUri) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventUpdateBaseTokenUri) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventUpdateBaseTokenUri.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventUpdateBaseTokenUri) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventUpdateBaseTokenUri.Merge(m, src)
}
func (m *EventUpdateBaseTokenUri) XXX_Size() int {
	return m.Size()
}
func (m *EventUpdateBaseTokenUri) XXX_DiscardUnknown() {
	xxx_messageInfo_EventUpdateBaseTokenUri.DiscardUnknown(m)
}

var xxx_messageInfo_EventUpdateBaseTokenUri proto.InternalMessageInfo

func (m *EventUpdateBaseTokenUri) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *EventUpdateBaseTokenUri) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *EventUpdateBaseTokenUri) GetBaseTokenUri() string {
	if m != nil {
		return m.BaseTokenUri
	}
	return ""
}

type EventUpdateTokenSupplyCap struct {
	Owner          string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	ClassId        string `protobuf:"bytes,2,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	TokenSupplyCap string `protobuf:"bytes,3,opt,name=token_supply_cap,json=tokenSupplyCap,proto3" json:"token_supply_cap,omitempty"`
}

func (m *EventUpdateTokenSupplyCap) Reset()         { *m = EventUpdateTokenSupplyCap{} }
func (m *EventUpdateTokenSupplyCap) String() string { return proto.CompactTextString(m) }
func (*EventUpdateTokenSupplyCap) ProtoMessage()    {}
func (*EventUpdateTokenSupplyCap) Descriptor() ([]byte, []int) {
	return fileDescriptor_828f2ddeb82d86e5, []int{7}
}
func (m *EventUpdateTokenSupplyCap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventUpdateTokenSupplyCap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventUpdateTokenSupplyCap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventUpdateTokenSupplyCap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventUpdateTokenSupplyCap.Merge(m, src)
}
func (m *EventUpdateTokenSupplyCap) XXX_Size() int {
	return m.Size()
}
func (m *EventUpdateTokenSupplyCap) XXX_DiscardUnknown() {
	xxx_messageInfo_EventUpdateTokenSupplyCap.DiscardUnknown(m)
}

var xxx_messageInfo_EventUpdateTokenSupplyCap proto.InternalMessageInfo

func (m *EventUpdateTokenSupplyCap) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *EventUpdateTokenSupplyCap) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *EventUpdateTokenSupplyCap) GetTokenSupplyCap() string {
	if m != nil {
		return m.TokenSupplyCap
	}
	return ""
}

type EventMintNFT struct {
	ClassId string `protobuf:"bytes,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	NftId   string `protobuf:"bytes,2,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
	Owner   string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	Minter  string `protobuf:"bytes,4,opt,name=minter,proto3" json:"minter,omitempty"`
}

func (m *EventMintNFT) Reset()         { *m = EventMintNFT{} }
func (m *EventMintNFT) String() string { return proto.CompactTextString(m) }
func (*EventMintNFT) ProtoMessage()    {}
func (*EventMintNFT) Descriptor() ([]byte, []int) {
	return fileDescriptor_828f2ddeb82d86e5, []int{8}
}
func (m *EventMintNFT) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventMintNFT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventMintNFT.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventMintNFT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventMintNFT.Merge(m, src)
}
func (m *EventMintNFT) XXX_Size() int {
	return m.Size()
}
func (m *EventMintNFT) XXX_DiscardUnknown() {
	xxx_messageInfo_EventMintNFT.DiscardUnknown(m)
}

var xxx_messageInfo_EventMintNFT proto.InternalMessageInfo

func (m *EventMintNFT) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *EventMintNFT) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

func (m *EventMintNFT) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *EventMintNFT) GetMinter() string {
	if m != nil {
		return m.Minter
	}
	return ""
}

type EventBurnNFT struct {
	Burner  string `protobuf:"bytes,1,opt,name=burner,proto3" json:"burner,omitempty"`
	ClassId string `protobuf:"bytes,2,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	NftId   string `protobuf:"bytes,3,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
}

func (m *EventBurnNFT) Reset()         { *m = EventBurnNFT{} }
func (m *EventBurnNFT) String() string { return proto.CompactTextString(m) }
func (*EventBurnNFT) ProtoMessage()    {}
func (*EventBurnNFT) Descriptor() ([]byte, []int) {
	return fileDescriptor_828f2ddeb82d86e5, []int{9}
}
func (m *EventBurnNFT) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventBurnNFT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBurnNFT.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventBurnNFT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBurnNFT.Merge(m, src)
}
func (m *EventBurnNFT) XXX_Size() int {
	return m.Size()
}
func (m *EventBurnNFT) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBurnNFT.DiscardUnknown(m)
}

var xxx_messageInfo_EventBurnNFT proto.InternalMessageInfo

func (m *EventBurnNFT) GetBurner() string {
	if m != nil {
		return m.Burner
	}
	return ""
}

func (m *EventBurnNFT) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *EventBurnNFT) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

func init() {
	proto.RegisterEnum("ununifi.nftmint.MintingPermission", MintingPermission_name, MintingPermission_value)
	proto.RegisterType((*ClassAttributes)(nil), "ununifi.nftmint.ClassAttributes")
	proto.RegisterType((*NFTAttributes)(nil), "ununifi.nftmint.NFTAttributes")
	proto.RegisterType((*OwningList)(nil), "ununifi.nftmint.OwningList")
	proto.RegisterType((*Params)(nil), "ununifi.nftmint.Params")
	proto.RegisterType((*EventCreateClass)(nil), "ununifi.nftmint.EventCreateClass")
	proto.RegisterType((*EventSendClass)(nil), "ununifi.nftmint.EventSendClass")
	proto.RegisterType((*EventUpdateBaseTokenUri)(nil), "ununifi.nftmint.EventUpdateBaseTokenUri")
	proto.RegisterType((*EventUpdateTokenSupplyCap)(nil), "ununifi.nftmint.EventUpdateTokenSupplyCap")
	proto.RegisterType((*EventMintNFT)(nil), "ununifi.nftmint.EventMintNFT")
	proto.RegisterType((*EventBurnNFT)(nil), "ununifi.nftmint.EventBurnNFT")
}

func init() { proto.RegisterFile("nftmint/nftmint.proto", fileDescriptor_828f2ddeb82d86e5) }

var fileDescriptor_828f2ddeb82d86e5 = []byte{
	// 737 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0x4f, 0x4f, 0xdb, 0x48,
	0x14, 0x8f, 0xf3, 0xc7, 0xc0, 0x13, 0x84, 0x30, 0x0b, 0x6c, 0xe0, 0x10, 0x22, 0x6b, 0xb5, 0x8a,
	0x56, 0xab, 0x78, 0xb5, 0x9c, 0x39, 0x24, 0xec, 0x22, 0xa1, 0x12, 0xa0, 0x4e, 0xa2, 0x56, 0xbd,
	0x44, 0x13, 0x7b, 0x62, 0x46, 0x8d, 0xc7, 0xd6, 0x78, 0x0c, 0xc9, 0x97, 0xa8, 0x7a, 0xee, 0x27,
	0xe9, 0x47, 0xe8, 0x91, 0x63, 0xd5, 0x43, 0x55, 0x81, 0xd4, 0xcf, 0x51, 0xcd, 0xd8, 0x09, 0x71,
	0x08, 0x15, 0xa5, 0xea, 0x29, 0x79, 0xbf, 0xf7, 0x93, 0xdf, 0xef, 0xfd, 0xde, 0xf3, 0x33, 0x6c,
	0xb1, 0x81, 0xf0, 0x28, 0x13, 0x66, 0xf2, 0x5b, 0x0f, 0xb8, 0x2f, 0x7c, 0xb4, 0x1e, 0xb1, 0x88,
	0xd1, 0x01, 0xad, 0x27, 0xf0, 0xee, 0xa6, 0xeb, 0xbb, 0xbe, 0xca, 0x99, 0xf2, 0x5f, 0x4c, 0xdb,
	0xdd, 0x73, 0x7d, 0xdf, 0x1d, 0x12, 0x53, 0x45, 0xfd, 0x68, 0x60, 0x0a, 0xea, 0x91, 0x50, 0x60,
	0x2f, 0x88, 0x09, 0xc6, 0xbb, 0x2c, 0xac, 0x1f, 0x0e, 0x71, 0x18, 0x36, 0x84, 0xe0, 0xb4, 0x1f,
	0x09, 0x12, 0xa2, 0x1d, 0x58, 0xb6, 0x25, 0xd4, 0xa3, 0x4e, 0x59, 0xab, 0x6a, 0xb5, 0x15, 0x6b,
	0x49, 0xc5, 0xc7, 0x0e, 0x3a, 0x86, 0x82, 0x7f, 0xc5, 0x08, 0x2f, 0x67, 0x25, 0xde, 0xdc, 0xff,
	0xf4, 0x79, 0xcf, 0x74, 0xa9, 0xb8, 0x88, 0xfa, 0x75, 0xdb, 0xf7, 0xcc, 0x2e, 0xeb, 0x32, 0x7a,
	0x44, 0x4d, 0xfb, 0x02, 0x53, 0x66, 0x8a, 0x71, 0x40, 0xc2, 0x7a, 0x5b, 0x70, 0xca, 0xdc, 0x86,
	0x6d, 0x37, 0x1c, 0x87, 0x93, 0x30, 0xb4, 0xe2, 0x27, 0xa0, 0x3f, 0xa0, 0xd8, 0xc7, 0x21, 0xe9,
	0x09, 0xff, 0x35, 0x61, 0xbd, 0x88, 0xd3, 0x72, 0x4e, 0xd5, 0x5a, 0x95, 0x68, 0x47, 0x82, 0x5d,
	0x4e, 0xd1, 0x73, 0x40, 0xb2, 0x3d, 0xca, 0xdc, 0x5e, 0x40, 0xb8, 0x47, 0xc3, 0x90, 0xfa, 0xac,
	0x9c, 0xaf, 0x6a, 0xb5, 0xe2, 0xbf, 0x46, 0x7d, 0xce, 0x84, 0x7a, 0x2b, 0xa6, 0x9e, 0x4f, 0x99,
	0xd6, 0x86, 0x37, 0x0f, 0xa1, 0x1a, 0x94, 0xe2, 0x9a, 0x61, 0x14, 0x04, 0xc3, 0x71, 0xcf, 0xc6,
	0x41, 0xb9, 0x50, 0xd5, 0x6a, 0x79, 0xab, 0xa8, 0xf0, 0xb6, 0x82, 0x0f, 0x71, 0x60, 0xbc, 0xd1,
	0x60, 0xed, 0xf4, 0xa8, 0xf3, 0x38, 0x6b, 0xb6, 0x40, 0x67, 0x03, 0x21, 0x13, 0xca, 0x1b, 0xab,
	0xc0, 0x06, 0xe2, 0xd8, 0x41, 0xcf, 0x40, 0x97, 0x12, 0x08, 0x8f, 0xdb, 0x7b, 0x9a, 0x65, 0xc9,
	0x23, 0x8c, 0x03, 0x80, 0xb3, 0x2b, 0x46, 0x99, 0x7b, 0x42, 0x43, 0x81, 0x36, 0x27, 0xc3, 0x88,
	0x95, 0x24, 0xbe, 0xce, 0x4a, 0xcc, 0x56, 0x73, 0x33, 0x12, 0x8d, 0xf7, 0x59, 0xd0, 0xcf, 0x31,
	0xc7, 0x5e, 0x88, 0xfe, 0x81, 0xdf, 0x5a, 0x78, 0xd4, 0xb9, 0xeb, 0xf7, 0x84, 0x7a, 0x54, 0xa8,
	0x27, 0xe5, 0xad, 0x45, 0x29, 0x54, 0x83, 0xf5, 0x16, 0x65, 0x6a, 0x57, 0x4e, 0xb1, 0x47, 0x4e,
	0x08, 0x53, 0x8d, 0xe6, 0xad, 0x79, 0x58, 0x31, 0xf1, 0x28, 0xc5, 0xcc, 0x25, 0xcc, 0x34, 0x8c,
	0xfe, 0x84, 0xe2, 0x04, 0xea, 0x72, 0x2a, 0x89, 0xf9, 0x78, 0x10, 0x69, 0x14, 0xd5, 0x01, 0xb5,
	0xf0, 0xa8, 0x39, 0xb3, 0x18, 0x92, 0x1b, 0x0f, 0x6d, 0x41, 0x06, 0x19, 0xb0, 0xda, 0xc2, 0xa3,
	0xf6, 0xd8, 0xeb, 0xfb, 0x43, 0xc9, 0xd4, 0x15, 0x33, 0x85, 0xa1, 0xbf, 0x61, 0xa3, 0x85, 0x47,
	0xff, 0x91, 0xd0, 0xe6, 0x34, 0x10, 0xd4, 0x67, 0x92, 0xb8, 0xa4, 0x88, 0xf7, 0x13, 0xc6, 0x57,
	0x0d, 0x4a, 0xff, 0x5f, 0x12, 0x26, 0x0e, 0x39, 0xc1, 0x82, 0x28, 0x71, 0x8f, 0x1a, 0x40, 0x6a,
	0x47, 0x1e, 0xb7, 0xf3, 0x8b, 0x16, 0x34, 0xaf, 0x78, 0x73, 0x0b, 0xfa, 0xc0, 0xdb, 0x51, 0xf8,
	0x89, 0xb7, 0xc3, 0xe8, 0x41, 0x51, 0xf5, 0xd9, 0x26, 0xcc, 0x89, 0xbb, 0xdc, 0x06, 0x3d, 0x24,
	0xcc, 0x99, 0xb6, 0x99, 0x44, 0x68, 0x17, 0x96, 0x39, 0xb1, 0x09, 0xbd, 0x9c, 0x9c, 0x03, 0x6b,
	0x1a, 0xa7, 0x3c, 0xc8, 0xa5, 0x3c, 0x30, 0x02, 0xf8, 0x5d, 0x15, 0xe8, 0x06, 0x0e, 0x16, 0x64,
	0x76, 0x72, 0xbf, 0xc8, 0x4f, 0xe3, 0x12, 0x76, 0x66, 0x2a, 0x76, 0xd2, 0x16, 0xfe, 0x70, 0xcd,
	0x45, 0xd3, 0xc9, 0x2d, 0x9a, 0x8e, 0xc1, 0x60, 0x55, 0xd5, 0x95, 0xbe, 0x9f, 0x1e, 0x75, 0x9e,
	0x70, 0x3c, 0xa6, 0xe2, 0x72, 0xb3, 0xe2, 0xb6, 0xa7, 0x27, 0x25, 0xde, 0x8a, 0xc9, 0x75, 0x78,
	0x99, 0xd4, 0x6b, 0x46, 0x9c, 0xc9, 0x7a, 0xdb, 0xa0, 0xf7, 0x23, 0x7e, 0xd7, 0x5b, 0x12, 0x7d,
	0xaf, 0xb9, 0x3b, 0x1d, 0xb9, 0x19, 0x1d, 0x7f, 0x1d, 0xc0, 0xc6, 0xbd, 0xe5, 0x41, 0x6b, 0xb0,
	0x72, 0xc6, 0x86, 0xe3, 0x33, 0xa9, 0xa9, 0x94, 0x41, 0x00, 0x7a, 0x83, 0x8d, 0x7d, 0x46, 0x4a,
	0x9a, 0x4c, 0xbd, 0xb8, 0xa0, 0x82, 0xc8, 0x33, 0x55, 0xca, 0x36, 0x9b, 0x1f, 0x6e, 0x2a, 0xda,
	0xf5, 0x4d, 0x45, 0xfb, 0x72, 0x53, 0xd1, 0xde, 0xde, 0x56, 0x32, 0xd7, 0xb7, 0x95, 0xcc, 0xc7,
	0xdb, 0x4a, 0xe6, 0x55, 0xed, 0xc1, 0x4b, 0x38, 0x9a, 0x7c, 0xf0, 0xe2, 0x9b, 0xd8, 0xd7, 0xd5,
	0xf7, 0x6a, 0xff, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa6, 0xae, 0xb3, 0xa2, 0x10, 0x07, 0x00,
	0x00,
}

func (m *ClassAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClassAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClassAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TokenSupplyCap != 0 {
		i = encodeVarintNftmint(dAtA, i, uint64(m.TokenSupplyCap))
		i--
		dAtA[i] = 0x28
	}
	if m.MintingPermission != 0 {
		i = encodeVarintNftmint(dAtA, i, uint64(m.MintingPermission))
		i--
		dAtA[i] = 0x20
	}
	if len(m.BaseTokenUri) > 0 {
		i -= len(m.BaseTokenUri)
		copy(dAtA[i:], m.BaseTokenUri)
		i = encodeVarintNftmint(dAtA, i, uint64(len(m.BaseTokenUri)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Owner != nil {
		{
			size := m.Owner.Size()
			i -= size
			if _, err := m.Owner.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintNftmint(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintNftmint(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NFTAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NFTAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NFTAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Minter != nil {
		{
			size := m.Minter.Size()
			i -= size
			if _, err := m.Minter.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintNftmint(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintNftmint(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintNftmint(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OwningList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OwningList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OwningList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClassId) > 0 {
		for iNdEx := len(m.ClassId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ClassId[iNdEx])
			copy(dAtA[i:], m.ClassId[iNdEx])
			i = encodeVarintNftmint(dAtA, i, uint64(len(m.ClassId[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintNftmint(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxDescriptionLen != 0 {
		i = encodeVarintNftmint(dAtA, i, uint64(m.MaxDescriptionLen))
		i--
		dAtA[i] = 0x38
	}
	if m.MaxSymbolLen != 0 {
		i = encodeVarintNftmint(dAtA, i, uint64(m.MaxSymbolLen))
		i--
		dAtA[i] = 0x30
	}
	if m.MaxBaseTokenUriLen != 0 {
		i = encodeVarintNftmint(dAtA, i, uint64(m.MaxBaseTokenUriLen))
		i--
		dAtA[i] = 0x28
	}
	if m.MaxClassUriLen != 0 {
		i = encodeVarintNftmint(dAtA, i, uint64(m.MaxClassUriLen))
		i--
		dAtA[i] = 0x20
	}
	if m.MaxClassNameLen != 0 {
		i = encodeVarintNftmint(dAtA, i, uint64(m.MaxClassNameLen))
		i--
		dAtA[i] = 0x18
	}
	if m.MinClassNameLen != 0 {
		i = encodeVarintNftmint(dAtA, i, uint64(m.MinClassNameLen))
		i--
		dAtA[i] = 0x10
	}
	if m.MaxTokenSupplyLimit != 0 {
		i = encodeVarintNftmint(dAtA, i, uint64(m.MaxTokenSupplyLimit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventCreateClass) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCreateClass) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCreateClass) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MintingPermission != 0 {
		i = encodeVarintNftmint(dAtA, i, uint64(m.MintingPermission))
		i--
		dAtA[i] = 0x28
	}
	if len(m.TokenSupplyCap) > 0 {
		i -= len(m.TokenSupplyCap)
		copy(dAtA[i:], m.TokenSupplyCap)
		i = encodeVarintNftmint(dAtA, i, uint64(len(m.TokenSupplyCap)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BaseTokenUri) > 0 {
		i -= len(m.BaseTokenUri)
		copy(dAtA[i:], m.BaseTokenUri)
		i = encodeVarintNftmint(dAtA, i, uint64(len(m.BaseTokenUri)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintNftmint(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintNftmint(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventSendClass) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSendClass) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSendClass) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintNftmint(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintNftmint(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintNftmint(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventUpdateBaseTokenUri) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventUpdateBaseTokenUri) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventUpdateBaseTokenUri) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BaseTokenUri) > 0 {
		i -= len(m.BaseTokenUri)
		copy(dAtA[i:], m.BaseTokenUri)
		i = encodeVarintNftmint(dAtA, i, uint64(len(m.BaseTokenUri)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintNftmint(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintNftmint(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventUpdateTokenSupplyCap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventUpdateTokenSupplyCap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventUpdateTokenSupplyCap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenSupplyCap) > 0 {
		i -= len(m.TokenSupplyCap)
		copy(dAtA[i:], m.TokenSupplyCap)
		i = encodeVarintNftmint(dAtA, i, uint64(len(m.TokenSupplyCap)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintNftmint(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintNftmint(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventMintNFT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventMintNFT) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMintNFT) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Minter) > 0 {
		i -= len(m.Minter)
		copy(dAtA[i:], m.Minter)
		i = encodeVarintNftmint(dAtA, i, uint64(len(m.Minter)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintNftmint(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintNftmint(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintNftmint(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventBurnNFT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBurnNFT) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBurnNFT) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintNftmint(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintNftmint(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Burner) > 0 {
		i -= len(m.Burner)
		copy(dAtA[i:], m.Burner)
		i = encodeVarintNftmint(dAtA, i, uint64(len(m.Burner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintNftmint(dAtA []byte, offset int, v uint64) int {
	offset -= sovNftmint(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ClassAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovNftmint(uint64(l))
	}
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 1 + l + sovNftmint(uint64(l))
	}
	l = len(m.BaseTokenUri)
	if l > 0 {
		n += 1 + l + sovNftmint(uint64(l))
	}
	if m.MintingPermission != 0 {
		n += 1 + sovNftmint(uint64(m.MintingPermission))
	}
	if m.TokenSupplyCap != 0 {
		n += 1 + sovNftmint(uint64(m.TokenSupplyCap))
	}
	return n
}

func (m *NFTAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovNftmint(uint64(l))
	}
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovNftmint(uint64(l))
	}
	if m.Minter != nil {
		l = m.Minter.Size()
		n += 1 + l + sovNftmint(uint64(l))
	}
	return n
}

func (m *OwningList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovNftmint(uint64(l))
	}
	if len(m.ClassId) > 0 {
		for _, s := range m.ClassId {
			l = len(s)
			n += 1 + l + sovNftmint(uint64(l))
		}
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxTokenSupplyLimit != 0 {
		n += 1 + sovNftmint(uint64(m.MaxTokenSupplyLimit))
	}
	if m.MinClassNameLen != 0 {
		n += 1 + sovNftmint(uint64(m.MinClassNameLen))
	}
	if m.MaxClassNameLen != 0 {
		n += 1 + sovNftmint(uint64(m.MaxClassNameLen))
	}
	if m.MaxClassUriLen != 0 {
		n += 1 + sovNftmint(uint64(m.MaxClassUriLen))
	}
	if m.MaxBaseTokenUriLen != 0 {
		n += 1 + sovNftmint(uint64(m.MaxBaseTokenUriLen))
	}
	if m.MaxSymbolLen != 0 {
		n += 1 + sovNftmint(uint64(m.MaxSymbolLen))
	}
	if m.MaxDescriptionLen != 0 {
		n += 1 + sovNftmint(uint64(m.MaxDescriptionLen))
	}
	return n
}

func (m *EventCreateClass) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovNftmint(uint64(l))
	}
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovNftmint(uint64(l))
	}
	l = len(m.BaseTokenUri)
	if l > 0 {
		n += 1 + l + sovNftmint(uint64(l))
	}
	l = len(m.TokenSupplyCap)
	if l > 0 {
		n += 1 + l + sovNftmint(uint64(l))
	}
	if m.MintingPermission != 0 {
		n += 1 + sovNftmint(uint64(m.MintingPermission))
	}
	return n
}

func (m *EventSendClass) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovNftmint(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovNftmint(uint64(l))
	}
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovNftmint(uint64(l))
	}
	return n
}

func (m *EventUpdateBaseTokenUri) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovNftmint(uint64(l))
	}
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovNftmint(uint64(l))
	}
	l = len(m.BaseTokenUri)
	if l > 0 {
		n += 1 + l + sovNftmint(uint64(l))
	}
	return n
}

func (m *EventUpdateTokenSupplyCap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovNftmint(uint64(l))
	}
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovNftmint(uint64(l))
	}
	l = len(m.TokenSupplyCap)
	if l > 0 {
		n += 1 + l + sovNftmint(uint64(l))
	}
	return n
}

func (m *EventMintNFT) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovNftmint(uint64(l))
	}
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovNftmint(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovNftmint(uint64(l))
	}
	l = len(m.Minter)
	if l > 0 {
		n += 1 + l + sovNftmint(uint64(l))
	}
	return n
}

func (m *EventBurnNFT) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Burner)
	if l > 0 {
		n += 1 + l + sovNftmint(uint64(l))
	}
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovNftmint(uint64(l))
	}
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovNftmint(uint64(l))
	}
	return n
}

func sovNftmint(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNftmint(x uint64) (n int) {
	return sovNftmint(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClassAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNftmint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClassAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClassAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_UnUniFi_chain_types.StringAccAddress
			m.Owner = &v
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseTokenUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseTokenUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintingPermission", wireType)
			}
			m.MintingPermission = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MintingPermission |= MintingPermission(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenSupplyCap", wireType)
			}
			m.TokenSupplyCap = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenSupplyCap |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNftmint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNftmint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NFTAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNftmint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NFTAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NFTAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_UnUniFi_chain_types.StringAccAddress
			m.Minter = &v
			if err := m.Minter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNftmint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNftmint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OwningList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNftmint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OwningList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OwningList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = append(m.ClassId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNftmint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNftmint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNftmint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTokenSupplyLimit", wireType)
			}
			m.MaxTokenSupplyLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTokenSupplyLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinClassNameLen", wireType)
			}
			m.MinClassNameLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinClassNameLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxClassNameLen", wireType)
			}
			m.MaxClassNameLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxClassNameLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxClassUriLen", wireType)
			}
			m.MaxClassUriLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxClassUriLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBaseTokenUriLen", wireType)
			}
			m.MaxBaseTokenUriLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxBaseTokenUriLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSymbolLen", wireType)
			}
			m.MaxSymbolLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSymbolLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDescriptionLen", wireType)
			}
			m.MaxDescriptionLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDescriptionLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNftmint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNftmint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCreateClass) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNftmint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCreateClass: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCreateClass: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseTokenUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseTokenUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenSupplyCap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenSupplyCap = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintingPermission", wireType)
			}
			m.MintingPermission = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MintingPermission |= MintingPermission(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNftmint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNftmint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSendClass) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNftmint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSendClass: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSendClass: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNftmint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNftmint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventUpdateBaseTokenUri) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNftmint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventUpdateBaseTokenUri: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventUpdateBaseTokenUri: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseTokenUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseTokenUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNftmint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNftmint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventUpdateTokenSupplyCap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNftmint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventUpdateTokenSupplyCap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventUpdateTokenSupplyCap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenSupplyCap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenSupplyCap = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNftmint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNftmint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventMintNFT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNftmint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventMintNFT: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventMintNFT: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Minter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNftmint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNftmint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventBurnNFT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNftmint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBurnNFT: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBurnNFT: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Burner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Burner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNftmint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNftmint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNftmint(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNftmint
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNftmint
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNftmint
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNftmint
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNftmint
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNftmint
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNftmint        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNftmint          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNftmint = fmt.Errorf("proto: unexpected end of group")
)
