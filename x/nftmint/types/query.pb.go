// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nftmint/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_UnUniFi_chain_types "github.com/UnUniFi/chain/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_13cda3ffa49ad88f, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_13cda3ffa49ad88f, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryClassOwnerRequest struct {
	ClassId string `protobuf:"bytes,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
}

func (m *QueryClassOwnerRequest) Reset()         { *m = QueryClassOwnerRequest{} }
func (m *QueryClassOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryClassOwnerRequest) ProtoMessage()    {}
func (*QueryClassOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_13cda3ffa49ad88f, []int{2}
}
func (m *QueryClassOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClassOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClassOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClassOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClassOwnerRequest.Merge(m, src)
}
func (m *QueryClassOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryClassOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClassOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClassOwnerRequest proto.InternalMessageInfo

func (m *QueryClassOwnerRequest) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

type QueryClassOwnerResponse struct {
	Owner github_com_UnUniFi_chain_types.StringAccAddress `protobuf:"bytes,1,opt,name=owner,proto3,customtype=github.com/UnUniFi/chain/types.StringAccAddress" json:"owner" yaml:"owner"`
}

func (m *QueryClassOwnerResponse) Reset()         { *m = QueryClassOwnerResponse{} }
func (m *QueryClassOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryClassOwnerResponse) ProtoMessage()    {}
func (*QueryClassOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_13cda3ffa49ad88f, []int{3}
}
func (m *QueryClassOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClassOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClassOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClassOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClassOwnerResponse.Merge(m, src)
}
func (m *QueryClassOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryClassOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClassOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClassOwnerResponse proto.InternalMessageInfo

type QueryNFTMinterRequest struct {
	ClassId string `protobuf:"bytes,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	NftId   string `protobuf:"bytes,2,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
}

func (m *QueryNFTMinterRequest) Reset()         { *m = QueryNFTMinterRequest{} }
func (m *QueryNFTMinterRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNFTMinterRequest) ProtoMessage()    {}
func (*QueryNFTMinterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_13cda3ffa49ad88f, []int{4}
}
func (m *QueryNFTMinterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNFTMinterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNFTMinterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNFTMinterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNFTMinterRequest.Merge(m, src)
}
func (m *QueryNFTMinterRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNFTMinterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNFTMinterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNFTMinterRequest proto.InternalMessageInfo

func (m *QueryNFTMinterRequest) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *QueryNFTMinterRequest) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

type QueryNFTMinterResponse struct {
	Minter github_com_UnUniFi_chain_types.StringAccAddress `protobuf:"bytes,1,opt,name=minter,proto3,customtype=github.com/UnUniFi/chain/types.StringAccAddress" json:"minter" yaml:"minter"`
}

func (m *QueryNFTMinterResponse) Reset()         { *m = QueryNFTMinterResponse{} }
func (m *QueryNFTMinterResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNFTMinterResponse) ProtoMessage()    {}
func (*QueryNFTMinterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_13cda3ffa49ad88f, []int{5}
}
func (m *QueryNFTMinterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNFTMinterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNFTMinterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNFTMinterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNFTMinterResponse.Merge(m, src)
}
func (m *QueryNFTMinterResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNFTMinterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNFTMinterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNFTMinterResponse proto.InternalMessageInfo

type QueryClassIdsByNameRequest struct {
	ClassName string `protobuf:"bytes,1,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
}

func (m *QueryClassIdsByNameRequest) Reset()         { *m = QueryClassIdsByNameRequest{} }
func (m *QueryClassIdsByNameRequest) String() string { return proto.CompactTextString(m) }
func (*QueryClassIdsByNameRequest) ProtoMessage()    {}
func (*QueryClassIdsByNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_13cda3ffa49ad88f, []int{6}
}
func (m *QueryClassIdsByNameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClassIdsByNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClassIdsByNameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClassIdsByNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClassIdsByNameRequest.Merge(m, src)
}
func (m *QueryClassIdsByNameRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryClassIdsByNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClassIdsByNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClassIdsByNameRequest proto.InternalMessageInfo

func (m *QueryClassIdsByNameRequest) GetClassName() string {
	if m != nil {
		return m.ClassName
	}
	return ""
}

type QueryClassIdsByNameResponse struct {
	ClassId []string `protobuf:"bytes,1,rep,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
}

func (m *QueryClassIdsByNameResponse) Reset()         { *m = QueryClassIdsByNameResponse{} }
func (m *QueryClassIdsByNameResponse) String() string { return proto.CompactTextString(m) }
func (*QueryClassIdsByNameResponse) ProtoMessage()    {}
func (*QueryClassIdsByNameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_13cda3ffa49ad88f, []int{7}
}
func (m *QueryClassIdsByNameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClassIdsByNameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClassIdsByNameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClassIdsByNameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClassIdsByNameResponse.Merge(m, src)
}
func (m *QueryClassIdsByNameResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryClassIdsByNameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClassIdsByNameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClassIdsByNameResponse proto.InternalMessageInfo

func (m *QueryClassIdsByNameResponse) GetClassId() []string {
	if m != nil {
		return m.ClassId
	}
	return nil
}

type QueryClassBaseTokenUriRequest struct {
	ClassId string `protobuf:"bytes,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
}

func (m *QueryClassBaseTokenUriRequest) Reset()         { *m = QueryClassBaseTokenUriRequest{} }
func (m *QueryClassBaseTokenUriRequest) String() string { return proto.CompactTextString(m) }
func (*QueryClassBaseTokenUriRequest) ProtoMessage()    {}
func (*QueryClassBaseTokenUriRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_13cda3ffa49ad88f, []int{8}
}
func (m *QueryClassBaseTokenUriRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClassBaseTokenUriRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClassBaseTokenUriRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClassBaseTokenUriRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClassBaseTokenUriRequest.Merge(m, src)
}
func (m *QueryClassBaseTokenUriRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryClassBaseTokenUriRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClassBaseTokenUriRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClassBaseTokenUriRequest proto.InternalMessageInfo

func (m *QueryClassBaseTokenUriRequest) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

type QueryClassBaseTokenUriResponse struct {
	BaseTokenUri string `protobuf:"bytes,1,opt,name=base_token_uri,json=baseTokenUri,proto3" json:"base_token_uri,omitempty"`
}

func (m *QueryClassBaseTokenUriResponse) Reset()         { *m = QueryClassBaseTokenUriResponse{} }
func (m *QueryClassBaseTokenUriResponse) String() string { return proto.CompactTextString(m) }
func (*QueryClassBaseTokenUriResponse) ProtoMessage()    {}
func (*QueryClassBaseTokenUriResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_13cda3ffa49ad88f, []int{9}
}
func (m *QueryClassBaseTokenUriResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClassBaseTokenUriResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClassBaseTokenUriResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClassBaseTokenUriResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClassBaseTokenUriResponse.Merge(m, src)
}
func (m *QueryClassBaseTokenUriResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryClassBaseTokenUriResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClassBaseTokenUriResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClassBaseTokenUriResponse proto.InternalMessageInfo

func (m *QueryClassBaseTokenUriResponse) GetBaseTokenUri() string {
	if m != nil {
		return m.BaseTokenUri
	}
	return ""
}

type QueryClassTokenSupplyCapRequest struct {
	ClassId string `protobuf:"bytes,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
}

func (m *QueryClassTokenSupplyCapRequest) Reset()         { *m = QueryClassTokenSupplyCapRequest{} }
func (m *QueryClassTokenSupplyCapRequest) String() string { return proto.CompactTextString(m) }
func (*QueryClassTokenSupplyCapRequest) ProtoMessage()    {}
func (*QueryClassTokenSupplyCapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_13cda3ffa49ad88f, []int{10}
}
func (m *QueryClassTokenSupplyCapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClassTokenSupplyCapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClassTokenSupplyCapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClassTokenSupplyCapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClassTokenSupplyCapRequest.Merge(m, src)
}
func (m *QueryClassTokenSupplyCapRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryClassTokenSupplyCapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClassTokenSupplyCapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClassTokenSupplyCapRequest proto.InternalMessageInfo

func (m *QueryClassTokenSupplyCapRequest) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

type QueryClassTokenSupplyCapResponse struct {
	TokenSupplyCap uint64 `protobuf:"varint,1,opt,name=token_supply_cap,json=tokenSupplyCap,proto3" json:"token_supply_cap,omitempty"`
}

func (m *QueryClassTokenSupplyCapResponse) Reset()         { *m = QueryClassTokenSupplyCapResponse{} }
func (m *QueryClassTokenSupplyCapResponse) String() string { return proto.CompactTextString(m) }
func (*QueryClassTokenSupplyCapResponse) ProtoMessage()    {}
func (*QueryClassTokenSupplyCapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_13cda3ffa49ad88f, []int{11}
}
func (m *QueryClassTokenSupplyCapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClassTokenSupplyCapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClassTokenSupplyCapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClassTokenSupplyCapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClassTokenSupplyCapResponse.Merge(m, src)
}
func (m *QueryClassTokenSupplyCapResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryClassTokenSupplyCapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClassTokenSupplyCapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClassTokenSupplyCapResponse proto.InternalMessageInfo

func (m *QueryClassTokenSupplyCapResponse) GetTokenSupplyCap() uint64 {
	if m != nil {
		return m.TokenSupplyCap
	}
	return 0
}

type QueryClassIdsByOwnerRequest struct {
	Owner github_com_UnUniFi_chain_types.StringAccAddress `protobuf:"bytes,1,opt,name=owner,proto3,customtype=github.com/UnUniFi/chain/types.StringAccAddress" json:"owner" yaml:"owner"`
}

func (m *QueryClassIdsByOwnerRequest) Reset()         { *m = QueryClassIdsByOwnerRequest{} }
func (m *QueryClassIdsByOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryClassIdsByOwnerRequest) ProtoMessage()    {}
func (*QueryClassIdsByOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_13cda3ffa49ad88f, []int{12}
}
func (m *QueryClassIdsByOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClassIdsByOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClassIdsByOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClassIdsByOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClassIdsByOwnerRequest.Merge(m, src)
}
func (m *QueryClassIdsByOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryClassIdsByOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClassIdsByOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClassIdsByOwnerRequest proto.InternalMessageInfo

type QueryClassIdsByOwnerResponse struct {
	ClassId []string `protobuf:"bytes,1,rep,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
}

func (m *QueryClassIdsByOwnerResponse) Reset()         { *m = QueryClassIdsByOwnerResponse{} }
func (m *QueryClassIdsByOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryClassIdsByOwnerResponse) ProtoMessage()    {}
func (*QueryClassIdsByOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_13cda3ffa49ad88f, []int{13}
}
func (m *QueryClassIdsByOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClassIdsByOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClassIdsByOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClassIdsByOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClassIdsByOwnerResponse.Merge(m, src)
}
func (m *QueryClassIdsByOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryClassIdsByOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClassIdsByOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClassIdsByOwnerResponse proto.InternalMessageInfo

func (m *QueryClassIdsByOwnerResponse) GetClassId() []string {
	if m != nil {
		return m.ClassId
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "ununifi.nftmint.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "ununifi.nftmint.QueryParamsResponse")
	proto.RegisterType((*QueryClassOwnerRequest)(nil), "ununifi.nftmint.QueryClassOwnerRequest")
	proto.RegisterType((*QueryClassOwnerResponse)(nil), "ununifi.nftmint.QueryClassOwnerResponse")
	proto.RegisterType((*QueryNFTMinterRequest)(nil), "ununifi.nftmint.QueryNFTMinterRequest")
	proto.RegisterType((*QueryNFTMinterResponse)(nil), "ununifi.nftmint.QueryNFTMinterResponse")
	proto.RegisterType((*QueryClassIdsByNameRequest)(nil), "ununifi.nftmint.QueryClassIdsByNameRequest")
	proto.RegisterType((*QueryClassIdsByNameResponse)(nil), "ununifi.nftmint.QueryClassIdsByNameResponse")
	proto.RegisterType((*QueryClassBaseTokenUriRequest)(nil), "ununifi.nftmint.QueryClassBaseTokenUriRequest")
	proto.RegisterType((*QueryClassBaseTokenUriResponse)(nil), "ununifi.nftmint.QueryClassBaseTokenUriResponse")
	proto.RegisterType((*QueryClassTokenSupplyCapRequest)(nil), "ununifi.nftmint.QueryClassTokenSupplyCapRequest")
	proto.RegisterType((*QueryClassTokenSupplyCapResponse)(nil), "ununifi.nftmint.QueryClassTokenSupplyCapResponse")
	proto.RegisterType((*QueryClassIdsByOwnerRequest)(nil), "ununifi.nftmint.QueryClassIdsByOwnerRequest")
	proto.RegisterType((*QueryClassIdsByOwnerResponse)(nil), "ununifi.nftmint.QueryClassIdsByOwnerResponse")
}

func init() { proto.RegisterFile("nftmint/query.proto", fileDescriptor_13cda3ffa49ad88f) }

var fileDescriptor_13cda3ffa49ad88f = []byte{
	// 778 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x4d, 0x4f, 0x13, 0x5b,
	0x18, 0xee, 0x70, 0xa1, 0x17, 0xde, 0xcb, 0xc7, 0xbd, 0x07, 0xb8, 0xc8, 0x00, 0x53, 0x72, 0x28,
	0xb6, 0x8a, 0x74, 0x14, 0x62, 0xa2, 0xe8, 0x86, 0x92, 0xa0, 0x4d, 0x10, 0xb5, 0xc0, 0xc6, 0xc4,
	0xd4, 0x69, 0x3b, 0x2d, 0x27, 0xb6, 0x67, 0x86, 0x39, 0xa7, 0x91, 0x1a, 0x37, 0x9a, 0xb8, 0x37,
	0xd1, 0xb8, 0x71, 0xe9, 0xd2, 0x3f, 0xc2, 0x92, 0xc4, 0x8d, 0x71, 0x41, 0x0c, 0xf8, 0x0b, 0xfc,
	0x05, 0x66, 0xce, 0x39, 0x50, 0xda, 0xe9, 0x97, 0x26, 0xae, 0xa0, 0xef, 0xc7, 0xf3, 0x3e, 0xef,
	0x79, 0xfb, 0x3c, 0x29, 0x8c, 0xd2, 0x02, 0x2f, 0x13, 0xca, 0xcd, 0xbd, 0x8a, 0xed, 0x55, 0x13,
	0xae, 0xe7, 0x70, 0x07, 0x8d, 0x54, 0x68, 0x85, 0x92, 0x02, 0x49, 0xa8, 0xa4, 0x3e, 0x56, 0x74,
	0x8a, 0x8e, 0xc8, 0x99, 0xfe, 0x7f, 0xb2, 0x4c, 0x9f, 0x2e, 0x3a, 0x4e, 0xb1, 0x64, 0x9b, 0x96,
	0x4b, 0x4c, 0x8b, 0x52, 0x87, 0x5b, 0x9c, 0x38, 0x94, 0xa9, 0xec, 0xf8, 0x29, 0xb2, 0xfa, 0x2b,
	0xc3, 0x78, 0x0c, 0xd0, 0x43, 0x7f, 0xd4, 0x03, 0xcb, 0xb3, 0xca, 0x2c, 0x6d, 0xef, 0x55, 0x6c,
	0xc6, 0xf1, 0x06, 0x8c, 0xd6, 0x45, 0x99, 0xeb, 0x50, 0x66, 0xa3, 0xeb, 0x10, 0x76, 0x45, 0xe4,
	0x82, 0x36, 0xab, 0xc5, 0xff, 0x59, 0x9a, 0x48, 0x34, 0x30, 0x4b, 0xc8, 0x86, 0x64, 0xef, 0xc1,
	0x51, 0x24, 0x94, 0x56, 0xc5, 0x78, 0x19, 0xfe, 0x17, 0x68, 0x6b, 0x25, 0x8b, 0xb1, 0xfb, 0xcf,
	0xa8, 0xed, 0xa9, 0x39, 0x68, 0x12, 0xfa, 0x73, 0x7e, 0x30, 0x43, 0xf2, 0x02, 0x72, 0x20, 0xfd,
	0xb7, 0xf8, 0x9c, 0xca, 0xe3, 0x7d, 0x98, 0x08, 0x34, 0x29, 0x1a, 0x8f, 0xa1, 0xcf, 0xf1, 0x03,
	0xb2, 0x25, 0x79, 0xc7, 0x1f, 0xf6, 0xf5, 0x28, 0x62, 0x16, 0x09, 0xdf, 0xad, 0x64, 0x13, 0x39,
	0xa7, 0x6c, 0xee, 0xd0, 0x1d, 0x4a, 0xd6, 0x89, 0x99, 0xdb, 0xb5, 0x08, 0x35, 0x79, 0xd5, 0xb5,
	0x59, 0x62, 0x8b, 0x7b, 0x84, 0x16, 0x57, 0x73, 0xb9, 0xd5, 0x7c, 0xde, 0xb3, 0x19, 0xfb, 0x71,
	0x14, 0x19, 0xac, 0x5a, 0xe5, 0xd2, 0x0a, 0x16, 0x68, 0x38, 0x2d, 0x51, 0x71, 0x0a, 0xc6, 0xc5,
	0xe4, 0xcd, 0xf5, 0xed, 0x7b, 0x84, 0xf2, 0x6e, 0xd8, 0xa2, 0x71, 0x08, 0xd3, 0x02, 0xf7, 0x13,
	0x3d, 0x22, 0xd1, 0x47, 0x0b, 0x3c, 0x95, 0xc7, 0xcf, 0xd5, 0xe6, 0xe7, 0xa0, 0xd4, 0x0e, 0x4f,
	0x20, 0x5c, 0x16, 0x11, 0xb5, 0xc4, 0xdd, 0xdf, 0x5f, 0x62, 0x48, 0x2e, 0x21, 0xe1, 0x70, 0x5a,
	0xe1, 0xe2, 0x5b, 0xa0, 0xd7, 0x1e, 0x30, 0x95, 0x67, 0xc9, 0xea, 0xa6, 0x55, 0xb6, 0x4f, 0x77,
	0x99, 0x01, 0x90, 0xbb, 0x50, 0xab, 0x6c, 0xab, 0x6d, 0x06, 0x44, 0xc4, 0xaf, 0xc2, 0x37, 0x60,
	0xaa, 0x69, 0xb3, 0x62, 0x5f, 0xff, 0x12, 0x7f, 0x9d, 0xbf, 0xdb, 0x0a, 0xcc, 0xd4, 0x3a, 0x93,
	0x16, 0xb3, 0xb7, 0x9d, 0xa7, 0x36, 0xdd, 0xf1, 0x48, 0x17, 0x37, 0x5f, 0x07, 0xa3, 0x55, 0xaf,
	0x1a, 0x1c, 0x85, 0xe1, 0xac, 0xc5, 0xec, 0x0c, 0xf7, 0x13, 0x99, 0x8a, 0x47, 0x14, 0xc4, 0x60,
	0xf6, 0x5c, 0x35, 0xbe, 0x0d, 0x91, 0x1a, 0x8e, 0x88, 0x6e, 0x55, 0x5c, 0xb7, 0x54, 0x5d, 0xb3,
	0xdc, 0x2e, 0x58, 0x6c, 0xc0, 0x6c, 0xeb, 0x6e, 0xc5, 0x23, 0x0e, 0xff, 0x4a, 0x0a, 0x4c, 0xa4,
	0x32, 0x39, 0xcb, 0x15, 0x30, 0xbd, 0xe9, 0x61, 0x5e, 0xd7, 0x81, 0x5f, 0x04, 0x5e, 0xb2, 0x4e,
	0x01, 0x7f, 0xf8, 0xbb, 0x7c, 0x13, 0xa6, 0x9b, 0x4f, 0xef, 0x78, 0xc8, 0xa5, 0x77, 0xfd, 0xd0,
	0x27, 0x7a, 0x11, 0x87, 0xb0, 0xd4, 0x35, 0x9a, 0x0b, 0x08, 0x3e, 0x68, 0x1e, 0x7a, 0xb4, 0x7d,
	0x91, 0x9c, 0x8c, 0x23, 0xaf, 0x3e, 0x7f, 0x7f, 0xdb, 0x33, 0x89, 0x26, 0x4c, 0x55, 0x7d, 0x6a,
	0x4c, 0xa6, 0x74, 0x0d, 0xf4, 0x5a, 0x03, 0xa8, 0x89, 0x1f, 0xc5, 0x9a, 0xa3, 0x06, 0x3c, 0x45,
	0x8f, 0x77, 0x2e, 0x54, 0x14, 0xa2, 0x82, 0x82, 0x81, 0xa6, 0x03, 0x14, 0xe4, 0x9b, 0x88, 0x27,
	0x44, 0x2f, 0x35, 0x18, 0x38, 0xd3, 0x2f, 0xba, 0xd8, 0x1c, 0xbd, 0xd1, 0x2b, 0xf4, 0x58, 0xc7,
	0x3a, 0x45, 0x62, 0x4e, 0x90, 0x98, 0x41, 0x53, 0x01, 0x12, 0xbe, 0xa1, 0x48, 0x2d, 0xa3, 0xf7,
	0x1a, 0x0c, 0xa9, 0x13, 0x4a, 0x25, 0xa2, 0x85, 0x36, 0x5b, 0x36, 0x8a, 0x5d, 0xbf, 0xd2, 0x5d,
	0xb1, 0x62, 0x74, 0x59, 0x30, 0x8a, 0x22, 0xdc, 0xe2, 0x59, 0x48, 0x9e, 0x65, 0xb2, 0x55, 0x61,
	0x1c, 0xe8, 0xa3, 0x06, 0xff, 0x05, 0xd4, 0x8a, 0x12, 0x6d, 0xe6, 0x35, 0xb1, 0x04, 0xdd, 0xec,
	0xba, 0x5e, 0x51, 0x5c, 0x14, 0x14, 0x63, 0x68, 0xbe, 0x05, 0xc5, 0x7a, 0x8f, 0x40, 0x9f, 0x34,
	0x18, 0x6d, 0xa2, 0x66, 0x74, 0xb5, 0xcd, 0xdc, 0xa6, 0xb6, 0xa1, 0x5f, 0xfb, 0x85, 0x0e, 0xc5,
	0xd5, 0x14, 0x5c, 0x2f, 0xa1, 0x58, 0x0b, 0xae, 0x8d, 0x3e, 0x82, 0x3e, 0x68, 0x30, 0xd2, 0xa0,
	0x57, 0xd4, 0xf1, 0x82, 0x75, 0x12, 0x58, 0xec, 0xb2, 0x5a, 0x31, 0x5c, 0x10, 0x0c, 0xe7, 0xd1,
	0x5c, 0xfb, 0x83, 0x0b, 0x39, 0x24, 0x93, 0x07, 0xc7, 0x86, 0x76, 0x78, 0x6c, 0x68, 0xdf, 0x8e,
	0x0d, 0xed, 0xcd, 0x89, 0x11, 0x3a, 0x3c, 0x31, 0x42, 0x5f, 0x4e, 0x8c, 0xd0, 0xa3, 0x78, 0x4b,
	0xcf, 0xda, 0x3f, 0x03, 0x14, 0xee, 0x95, 0x0d, 0x8b, 0xdf, 0x1e, 0xcb, 0x3f, 0x03, 0x00, 0x00,
	0xff, 0xff, 0xe1, 0xab, 0x0d, 0x47, 0xee, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	ClassOwner(ctx context.Context, in *QueryClassOwnerRequest, opts ...grpc.CallOption) (*QueryClassOwnerResponse, error)
	NFTMinter(ctx context.Context, in *QueryNFTMinterRequest, opts ...grpc.CallOption) (*QueryNFTMinterResponse, error)
	ClassIdByName(ctx context.Context, in *QueryClassIdsByNameRequest, opts ...grpc.CallOption) (*QueryClassIdsByNameResponse, error)
	ClassBaseTokenUri(ctx context.Context, in *QueryClassBaseTokenUriRequest, opts ...grpc.CallOption) (*QueryClassBaseTokenUriResponse, error)
	ClassTokenSupplyCap(ctx context.Context, in *QueryClassTokenSupplyCapRequest, opts ...grpc.CallOption) (*QueryClassTokenSupplyCapResponse, error)
	ClassIdsByOwner(ctx context.Context, in *QueryClassIdsByOwnerRequest, opts ...grpc.CallOption) (*QueryClassIdsByOwnerResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/ununifi.nftmint.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ClassOwner(ctx context.Context, in *QueryClassOwnerRequest, opts ...grpc.CallOption) (*QueryClassOwnerResponse, error) {
	out := new(QueryClassOwnerResponse)
	err := c.cc.Invoke(ctx, "/ununifi.nftmint.Query/ClassOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NFTMinter(ctx context.Context, in *QueryNFTMinterRequest, opts ...grpc.CallOption) (*QueryNFTMinterResponse, error) {
	out := new(QueryNFTMinterResponse)
	err := c.cc.Invoke(ctx, "/ununifi.nftmint.Query/NFTMinter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ClassIdByName(ctx context.Context, in *QueryClassIdsByNameRequest, opts ...grpc.CallOption) (*QueryClassIdsByNameResponse, error) {
	out := new(QueryClassIdsByNameResponse)
	err := c.cc.Invoke(ctx, "/ununifi.nftmint.Query/ClassIdByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ClassBaseTokenUri(ctx context.Context, in *QueryClassBaseTokenUriRequest, opts ...grpc.CallOption) (*QueryClassBaseTokenUriResponse, error) {
	out := new(QueryClassBaseTokenUriResponse)
	err := c.cc.Invoke(ctx, "/ununifi.nftmint.Query/ClassBaseTokenUri", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ClassTokenSupplyCap(ctx context.Context, in *QueryClassTokenSupplyCapRequest, opts ...grpc.CallOption) (*QueryClassTokenSupplyCapResponse, error) {
	out := new(QueryClassTokenSupplyCapResponse)
	err := c.cc.Invoke(ctx, "/ununifi.nftmint.Query/ClassTokenSupplyCap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ClassIdsByOwner(ctx context.Context, in *QueryClassIdsByOwnerRequest, opts ...grpc.CallOption) (*QueryClassIdsByOwnerResponse, error) {
	out := new(QueryClassIdsByOwnerResponse)
	err := c.cc.Invoke(ctx, "/ununifi.nftmint.Query/ClassIdsByOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	ClassOwner(context.Context, *QueryClassOwnerRequest) (*QueryClassOwnerResponse, error)
	NFTMinter(context.Context, *QueryNFTMinterRequest) (*QueryNFTMinterResponse, error)
	ClassIdByName(context.Context, *QueryClassIdsByNameRequest) (*QueryClassIdsByNameResponse, error)
	ClassBaseTokenUri(context.Context, *QueryClassBaseTokenUriRequest) (*QueryClassBaseTokenUriResponse, error)
	ClassTokenSupplyCap(context.Context, *QueryClassTokenSupplyCapRequest) (*QueryClassTokenSupplyCapResponse, error)
	ClassIdsByOwner(context.Context, *QueryClassIdsByOwnerRequest) (*QueryClassIdsByOwnerResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) ClassOwner(ctx context.Context, req *QueryClassOwnerRequest) (*QueryClassOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassOwner not implemented")
}
func (*UnimplementedQueryServer) NFTMinter(ctx context.Context, req *QueryNFTMinterRequest) (*QueryNFTMinterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NFTMinter not implemented")
}
func (*UnimplementedQueryServer) ClassIdByName(ctx context.Context, req *QueryClassIdsByNameRequest) (*QueryClassIdsByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassIdByName not implemented")
}
func (*UnimplementedQueryServer) ClassBaseTokenUri(ctx context.Context, req *QueryClassBaseTokenUriRequest) (*QueryClassBaseTokenUriResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassBaseTokenUri not implemented")
}
func (*UnimplementedQueryServer) ClassTokenSupplyCap(ctx context.Context, req *QueryClassTokenSupplyCapRequest) (*QueryClassTokenSupplyCapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassTokenSupplyCap not implemented")
}
func (*UnimplementedQueryServer) ClassIdsByOwner(ctx context.Context, req *QueryClassIdsByOwnerRequest) (*QueryClassIdsByOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassIdsByOwner not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.nftmint.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ClassOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryClassOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ClassOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.nftmint.Query/ClassOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ClassOwner(ctx, req.(*QueryClassOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NFTMinter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNFTMinterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NFTMinter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.nftmint.Query/NFTMinter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NFTMinter(ctx, req.(*QueryNFTMinterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ClassIdByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryClassIdsByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ClassIdByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.nftmint.Query/ClassIdByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ClassIdByName(ctx, req.(*QueryClassIdsByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ClassBaseTokenUri_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryClassBaseTokenUriRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ClassBaseTokenUri(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.nftmint.Query/ClassBaseTokenUri",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ClassBaseTokenUri(ctx, req.(*QueryClassBaseTokenUriRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ClassTokenSupplyCap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryClassTokenSupplyCapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ClassTokenSupplyCap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.nftmint.Query/ClassTokenSupplyCap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ClassTokenSupplyCap(ctx, req.(*QueryClassTokenSupplyCapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ClassIdsByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryClassIdsByOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ClassIdsByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.nftmint.Query/ClassIdsByOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ClassIdsByOwner(ctx, req.(*QueryClassIdsByOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ununifi.nftmint.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "ClassOwner",
			Handler:    _Query_ClassOwner_Handler,
		},
		{
			MethodName: "NFTMinter",
			Handler:    _Query_NFTMinter_Handler,
		},
		{
			MethodName: "ClassIdByName",
			Handler:    _Query_ClassIdByName_Handler,
		},
		{
			MethodName: "ClassBaseTokenUri",
			Handler:    _Query_ClassBaseTokenUri_Handler,
		},
		{
			MethodName: "ClassTokenSupplyCap",
			Handler:    _Query_ClassTokenSupplyCap_Handler,
		},
		{
			MethodName: "ClassIdsByOwner",
			Handler:    _Query_ClassIdsByOwner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nftmint/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryClassOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClassOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClassOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryClassOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClassOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClassOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Owner.Size()
		i -= size
		if _, err := m.Owner.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryNFTMinterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNFTMinterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNFTMinterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryNFTMinterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNFTMinterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNFTMinterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Minter.Size()
		i -= size
		if _, err := m.Minter.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryClassIdsByNameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClassIdsByNameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClassIdsByNameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClassName) > 0 {
		i -= len(m.ClassName)
		copy(dAtA[i:], m.ClassName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ClassName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryClassIdsByNameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClassIdsByNameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClassIdsByNameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClassId) > 0 {
		for iNdEx := len(m.ClassId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ClassId[iNdEx])
			copy(dAtA[i:], m.ClassId[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.ClassId[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryClassBaseTokenUriRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClassBaseTokenUriRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClassBaseTokenUriRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryClassBaseTokenUriResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClassBaseTokenUriResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClassBaseTokenUriResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BaseTokenUri) > 0 {
		i -= len(m.BaseTokenUri)
		copy(dAtA[i:], m.BaseTokenUri)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BaseTokenUri)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryClassTokenSupplyCapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClassTokenSupplyCapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClassTokenSupplyCapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryClassTokenSupplyCapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClassTokenSupplyCapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClassTokenSupplyCapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TokenSupplyCap != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TokenSupplyCap))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryClassIdsByOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClassIdsByOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClassIdsByOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Owner.Size()
		i -= size
		if _, err := m.Owner.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryClassIdsByOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClassIdsByOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClassIdsByOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClassId) > 0 {
		for iNdEx := len(m.ClassId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ClassId[iNdEx])
			copy(dAtA[i:], m.ClassId[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.ClassId[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryClassOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryClassOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Owner.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryNFTMinterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryNFTMinterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Minter.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryClassIdsByNameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClassName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryClassIdsByNameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ClassId) > 0 {
		for _, s := range m.ClassId {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryClassBaseTokenUriRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryClassBaseTokenUriResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BaseTokenUri)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryClassTokenSupplyCapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryClassTokenSupplyCapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TokenSupplyCap != 0 {
		n += 1 + sovQuery(uint64(m.TokenSupplyCap))
	}
	return n
}

func (m *QueryClassIdsByOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Owner.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryClassIdsByOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ClassId) > 0 {
		for _, s := range m.ClassId {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClassOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClassOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClassOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClassOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClassOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClassOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNFTMinterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNFTMinterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNFTMinterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNFTMinterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNFTMinterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNFTMinterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Minter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClassIdsByNameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClassIdsByNameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClassIdsByNameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClassIdsByNameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClassIdsByNameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClassIdsByNameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = append(m.ClassId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClassBaseTokenUriRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClassBaseTokenUriRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClassBaseTokenUriRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClassBaseTokenUriResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClassBaseTokenUriResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClassBaseTokenUriResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseTokenUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseTokenUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClassTokenSupplyCapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClassTokenSupplyCapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClassTokenSupplyCapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClassTokenSupplyCapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClassTokenSupplyCapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClassTokenSupplyCapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenSupplyCap", wireType)
			}
			m.TokenSupplyCap = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenSupplyCap |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClassIdsByOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClassIdsByOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClassIdsByOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClassIdsByOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClassIdsByOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClassIdsByOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = append(m.ClassId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
