// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ecosystemincentive/ecosystemincentive.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RecipientContainer struct {
	Id                string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
	WeightedAddresses []WeightedAddress `protobuf:"bytes,2,rep,name=weighted_addresses,json=weightedAddresses,proto3" json:"weighted_addresses" yaml:"weighted_addresses"`
}

func (m *RecipientContainer) Reset()         { *m = RecipientContainer{} }
func (m *RecipientContainer) String() string { return proto.CompactTextString(m) }
func (*RecipientContainer) ProtoMessage()    {}
func (*RecipientContainer) Descriptor() ([]byte, []int) {
	return fileDescriptor_4de21211b1c6d1f3, []int{0}
}
func (m *RecipientContainer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecipientContainer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecipientContainer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecipientContainer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecipientContainer.Merge(m, src)
}
func (m *RecipientContainer) XXX_Size() int {
	return m.Size()
}
func (m *RecipientContainer) XXX_DiscardUnknown() {
	xxx_messageInfo_RecipientContainer.DiscardUnknown(m)
}

var xxx_messageInfo_RecipientContainer proto.InternalMessageInfo

func (m *RecipientContainer) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RecipientContainer) GetWeightedAddresses() []WeightedAddress {
	if m != nil {
		return m.WeightedAddresses
	}
	return nil
}

type WeightedAddress struct {
	Address string                                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" yaml:"address"`
	Weight  github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=weight,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"weight" yaml:"weight"`
}

func (m *WeightedAddress) Reset()         { *m = WeightedAddress{} }
func (m *WeightedAddress) String() string { return proto.CompactTextString(m) }
func (*WeightedAddress) ProtoMessage()    {}
func (*WeightedAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_4de21211b1c6d1f3, []int{1}
}
func (m *WeightedAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WeightedAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WeightedAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WeightedAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeightedAddress.Merge(m, src)
}
func (m *WeightedAddress) XXX_Size() int {
	return m.Size()
}
func (m *WeightedAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_WeightedAddress.DiscardUnknown(m)
}

var xxx_messageInfo_WeightedAddress proto.InternalMessageInfo

func (m *WeightedAddress) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type RewardStore struct {
	Address string                                   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" yaml:"address"`
	Rewards github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=rewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"rewards" yaml:"rewards"`
}

func (m *RewardStore) Reset()         { *m = RewardStore{} }
func (m *RewardStore) String() string { return proto.CompactTextString(m) }
func (*RewardStore) ProtoMessage()    {}
func (*RewardStore) Descriptor() ([]byte, []int) {
	return fileDescriptor_4de21211b1c6d1f3, []int{2}
}
func (m *RewardStore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardStore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardStore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardStore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardStore.Merge(m, src)
}
func (m *RewardStore) XXX_Size() int {
	return m.Size()
}
func (m *RewardStore) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardStore.DiscardUnknown(m)
}

var xxx_messageInfo_RewardStore proto.InternalMessageInfo

func (m *RewardStore) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *RewardStore) GetRewards() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Rewards
	}
	return nil
}

type BelongingRecipientContainers struct {
	Address               string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" yaml:"address"`
	RecipientContainerIds []string `protobuf:"bytes,2,rep,name=recipient_container_ids,json=recipientContainerIds,proto3" json:"recipient_container_ids,omitempty" yaml:"recipient_container_ids"`
}

func (m *BelongingRecipientContainers) Reset()         { *m = BelongingRecipientContainers{} }
func (m *BelongingRecipientContainers) String() string { return proto.CompactTextString(m) }
func (*BelongingRecipientContainers) ProtoMessage()    {}
func (*BelongingRecipientContainers) Descriptor() ([]byte, []int) {
	return fileDescriptor_4de21211b1c6d1f3, []int{3}
}
func (m *BelongingRecipientContainers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BelongingRecipientContainers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BelongingRecipientContainers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BelongingRecipientContainers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BelongingRecipientContainers.Merge(m, src)
}
func (m *BelongingRecipientContainers) XXX_Size() int {
	return m.Size()
}
func (m *BelongingRecipientContainers) XXX_DiscardUnknown() {
	xxx_messageInfo_BelongingRecipientContainers.DiscardUnknown(m)
}

var xxx_messageInfo_BelongingRecipientContainers proto.InternalMessageInfo

func (m *BelongingRecipientContainers) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *BelongingRecipientContainers) GetRecipientContainerIds() []string {
	if m != nil {
		return m.RecipientContainerIds
	}
	return nil
}

func init() {
	proto.RegisterType((*RecipientContainer)(nil), "ununifi.ecosystemincentive.RecipientContainer")
	proto.RegisterType((*WeightedAddress)(nil), "ununifi.ecosystemincentive.WeightedAddress")
	proto.RegisterType((*RewardStore)(nil), "ununifi.ecosystemincentive.RewardStore")
	proto.RegisterType((*BelongingRecipientContainers)(nil), "ununifi.ecosystemincentive.BelongingRecipientContainers")
}

func init() {
	proto.RegisterFile("ecosystemincentive/ecosystemincentive.proto", fileDescriptor_4de21211b1c6d1f3)
}

var fileDescriptor_4de21211b1c6d1f3 = []byte{
	// 472 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x41, 0x6b, 0x13, 0x4f,
	0x18, 0xc6, 0xb3, 0xf9, 0x43, 0x4b, 0xa6, 0xf4, 0x2f, 0x2e, 0x8a, 0x69, 0xd0, 0xdd, 0x3a, 0x07,
	0x09, 0x54, 0x67, 0xa8, 0xbd, 0x79, 0x11, 0xb7, 0x22, 0x78, 0xf0, 0xb2, 0x52, 0x0a, 0xbd, 0x84,
	0xcd, 0xcc, 0xeb, 0xe6, 0xc5, 0x66, 0x26, 0xec, 0x4c, 0x1a, 0x73, 0xf0, 0x3b, 0x78, 0xf4, 0x23,
	0x88, 0x47, 0xf1, 0x43, 0xf4, 0xd8, 0xa3, 0x78, 0x58, 0x25, 0xf9, 0x06, 0xfb, 0x09, 0x24, 0x99,
	0x59, 0xa8, 0x6e, 0x05, 0x7b, 0xda, 0x65, 0xe7, 0x79, 0x7e, 0xf3, 0xbc, 0xcf, 0xec, 0x90, 0x3d,
	0x10, 0xda, 0xcc, 0x8d, 0x85, 0x31, 0x2a, 0x01, 0xca, 0xe2, 0x19, 0xf0, 0xe6, 0x27, 0x36, 0x29,
	0xb4, 0xd5, 0x61, 0x6f, 0xaa, 0xa6, 0x0a, 0xdf, 0x20, 0x6b, 0x2a, 0x7a, 0xb7, 0x72, 0x9d, 0xeb,
	0xb5, 0x8c, 0xaf, 0xde, 0x9c, 0xa3, 0x17, 0x09, 0x6d, 0xc6, 0xda, 0xf0, 0x61, 0x66, 0x80, 0x9f,
	0xed, 0x0f, 0xc1, 0x66, 0xfb, 0x5c, 0x68, 0x54, 0x6e, 0x9d, 0x7e, 0x09, 0x48, 0x98, 0x82, 0xc0,
	0x09, 0x82, 0xb2, 0x87, 0x5a, 0xd9, 0x0c, 0x15, 0x14, 0xe1, 0x3d, 0xd2, 0x46, 0xd9, 0x0d, 0x76,
	0x83, 0x7e, 0x27, 0xd9, 0xae, 0xca, 0xb8, 0x33, 0xcf, 0xc6, 0xa7, 0x4f, 0x28, 0x4a, 0x9a, 0xb6,
	0x51, 0x86, 0xef, 0x49, 0x38, 0x03, 0xcc, 0x47, 0x16, 0xe4, 0x20, 0x93, 0xb2, 0x00, 0x63, 0xc0,
	0x74, 0xdb, 0xbb, 0xff, 0xf5, 0xb7, 0x1e, 0xef, 0xb1, 0xbf, 0x87, 0x64, 0xc7, 0xde, 0xf5, 0xcc,
	0x99, 0x92, 0xfb, 0xe7, 0x65, 0xdc, 0xaa, 0xca, 0x78, 0xc7, 0xf1, 0x9b, 0x50, 0x9a, 0xde, 0x9c,
	0xfd, 0xee, 0x01, 0x43, 0x3f, 0x06, 0xe4, 0xc6, 0x1f, 0xa4, 0xf0, 0x21, 0xd9, 0xf4, 0x26, 0x1f,
	0x3b, 0xac, 0xca, 0xf8, 0x7f, 0x87, 0xf5, 0x0b, 0x34, 0xad, 0x25, 0xe1, 0x31, 0xd9, 0x70, 0xd8,
	0x6e, 0x7b, 0x2d, 0x7e, 0xba, 0xca, 0xf1, 0xbd, 0x8c, 0x1f, 0xe4, 0x68, 0x47, 0xd3, 0x21, 0x13,
	0x7a, 0xcc, 0x7d, 0x73, 0xee, 0xf1, 0xc8, 0xc8, 0xb7, 0xdc, 0xce, 0x27, 0x60, 0xd8, 0x73, 0x10,
	0x55, 0x19, 0x6f, 0x5f, 0x4e, 0x4c, 0x53, 0x8f, 0xa3, 0x5f, 0x03, 0xb2, 0x95, 0xc2, 0x2c, 0x2b,
	0xe4, 0x6b, 0xab, 0x0b, 0xb8, 0x66, 0xac, 0x19, 0xd9, 0x2c, 0xd6, 0xe6, 0xba, 0xcc, 0x1d, 0xe6,
	0xb6, 0x67, 0xab, 0xf3, 0x63, 0xfe, 0xfc, 0xd8, 0xa1, 0x46, 0x95, 0x24, 0xbe, 0x3a, 0x0f, 0xf3,
	0x3e, 0xfa, 0xf9, 0x47, 0xdc, 0xff, 0x87, 0x21, 0x56, 0x08, 0x93, 0xd6, 0xbb, 0xd1, 0x4f, 0x01,
	0xb9, 0x9b, 0xc0, 0xa9, 0x56, 0x39, 0xaa, 0xbc, 0xf9, 0x3f, 0x5c, 0xb7, 0xde, 0x13, 0x72, 0xa7,
	0xa8, 0x21, 0x03, 0x51, 0x53, 0x06, 0xe8, 0xe7, 0xea, 0x24, 0xb4, 0x2a, 0xe3, 0xa8, 0x0e, 0x7e,
	0xa5, 0x90, 0xa6, 0xb7, 0x8b, 0x46, 0x8e, 0x97, 0xd2, 0x24, 0xaf, 0xce, 0x17, 0x51, 0x70, 0xb1,
	0x88, 0x82, 0x9f, 0x8b, 0x28, 0xf8, 0xb0, 0x8c, 0x5a, 0x17, 0xcb, 0xa8, 0xf5, 0x6d, 0x19, 0xb5,
	0x4e, 0x0e, 0x2e, 0xcd, 0x7d, 0xa4, 0x8e, 0x14, 0xbe, 0x40, 0x2e, 0x46, 0x19, 0x2a, 0xfe, 0xee,
	0x8a, 0x2b, 0xe5, 0x8a, 0x18, 0x6e, 0xac, 0xef, 0xc1, 0xc1, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xd1, 0x2e, 0xa4, 0x72, 0x88, 0x03, 0x00, 0x00,
}

func (m *RecipientContainer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecipientContainer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecipientContainer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WeightedAddresses) > 0 {
		for iNdEx := len(m.WeightedAddresses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WeightedAddresses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEcosystemincentive(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintEcosystemincentive(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WeightedAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WeightedAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeightedAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Weight.Size()
		i -= size
		if _, err := m.Weight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEcosystemincentive(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEcosystemincentive(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RewardStore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardStore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardStore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEcosystemincentive(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEcosystemincentive(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BelongingRecipientContainers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BelongingRecipientContainers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BelongingRecipientContainers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RecipientContainerIds) > 0 {
		for iNdEx := len(m.RecipientContainerIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RecipientContainerIds[iNdEx])
			copy(dAtA[i:], m.RecipientContainerIds[iNdEx])
			i = encodeVarintEcosystemincentive(dAtA, i, uint64(len(m.RecipientContainerIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEcosystemincentive(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEcosystemincentive(dAtA []byte, offset int, v uint64) int {
	offset -= sovEcosystemincentive(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RecipientContainer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovEcosystemincentive(uint64(l))
	}
	if len(m.WeightedAddresses) > 0 {
		for _, e := range m.WeightedAddresses {
			l = e.Size()
			n += 1 + l + sovEcosystemincentive(uint64(l))
		}
	}
	return n
}

func (m *WeightedAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEcosystemincentive(uint64(l))
	}
	l = m.Weight.Size()
	n += 1 + l + sovEcosystemincentive(uint64(l))
	return n
}

func (m *RewardStore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEcosystemincentive(uint64(l))
	}
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovEcosystemincentive(uint64(l))
		}
	}
	return n
}

func (m *BelongingRecipientContainers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEcosystemincentive(uint64(l))
	}
	if len(m.RecipientContainerIds) > 0 {
		for _, s := range m.RecipientContainerIds {
			l = len(s)
			n += 1 + l + sovEcosystemincentive(uint64(l))
		}
	}
	return n
}

func sovEcosystemincentive(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEcosystemincentive(x uint64) (n int) {
	return sovEcosystemincentive(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RecipientContainer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEcosystemincentive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecipientContainer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecipientContainer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcosystemincentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEcosystemincentive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEcosystemincentive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeightedAddresses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcosystemincentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEcosystemincentive
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEcosystemincentive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WeightedAddresses = append(m.WeightedAddresses, WeightedAddress{})
			if err := m.WeightedAddresses[len(m.WeightedAddresses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEcosystemincentive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEcosystemincentive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WeightedAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEcosystemincentive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WeightedAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WeightedAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcosystemincentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEcosystemincentive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEcosystemincentive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcosystemincentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEcosystemincentive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEcosystemincentive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Weight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEcosystemincentive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEcosystemincentive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardStore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEcosystemincentive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardStore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardStore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcosystemincentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEcosystemincentive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEcosystemincentive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcosystemincentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEcosystemincentive
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEcosystemincentive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, types.Coin{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEcosystemincentive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEcosystemincentive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BelongingRecipientContainers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEcosystemincentive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BelongingRecipientContainers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BelongingRecipientContainers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcosystemincentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEcosystemincentive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEcosystemincentive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientContainerIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcosystemincentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEcosystemincentive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEcosystemincentive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecipientContainerIds = append(m.RecipientContainerIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEcosystemincentive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEcosystemincentive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEcosystemincentive(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEcosystemincentive
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEcosystemincentive
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEcosystemincentive
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEcosystemincentive
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEcosystemincentive
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEcosystemincentive
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEcosystemincentive        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEcosystemincentive          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEcosystemincentive = fmt.Errorf("proto: unexpected end of group")
)
