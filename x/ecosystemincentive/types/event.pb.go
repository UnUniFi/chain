// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ununifi/ecosystemincentive/event.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventWithdrawAllRewards struct {
	Sender              string                                   `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
	AllWithdrawnRewards github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=all_withdrawn_rewards,json=allWithdrawnRewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"all_withdrawn_rewards" yaml:"all_withdrawn_rewards"`
}

func (m *EventWithdrawAllRewards) Reset()         { *m = EventWithdrawAllRewards{} }
func (m *EventWithdrawAllRewards) String() string { return proto.CompactTextString(m) }
func (*EventWithdrawAllRewards) ProtoMessage()    {}
func (*EventWithdrawAllRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bc2d07e5e7a71a2, []int{0}
}
func (m *EventWithdrawAllRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventWithdrawAllRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventWithdrawAllRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventWithdrawAllRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventWithdrawAllRewards.Merge(m, src)
}
func (m *EventWithdrawAllRewards) XXX_Size() int {
	return m.Size()
}
func (m *EventWithdrawAllRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_EventWithdrawAllRewards.DiscardUnknown(m)
}

var xxx_messageInfo_EventWithdrawAllRewards proto.InternalMessageInfo

func (m *EventWithdrawAllRewards) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventWithdrawAllRewards) GetAllWithdrawnRewards() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.AllWithdrawnRewards
	}
	return nil
}

type EventWithdrawReward struct {
	Sender          string     `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
	WithdrawnReward types.Coin `protobuf:"bytes,2,opt,name=withdrawn_reward,json=withdrawnReward,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"withdrawn_reward" yaml:"withdrawn_reward"`
}

func (m *EventWithdrawReward) Reset()         { *m = EventWithdrawReward{} }
func (m *EventWithdrawReward) String() string { return proto.CompactTextString(m) }
func (*EventWithdrawReward) ProtoMessage()    {}
func (*EventWithdrawReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bc2d07e5e7a71a2, []int{1}
}
func (m *EventWithdrawReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventWithdrawReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventWithdrawReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventWithdrawReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventWithdrawReward.Merge(m, src)
}
func (m *EventWithdrawReward) XXX_Size() int {
	return m.Size()
}
func (m *EventWithdrawReward) XXX_DiscardUnknown() {
	xxx_messageInfo_EventWithdrawReward.DiscardUnknown(m)
}

var xxx_messageInfo_EventWithdrawReward proto.InternalMessageInfo

func (m *EventWithdrawReward) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventWithdrawReward) GetWithdrawnReward() types.Coin {
	if m != nil {
		return m.WithdrawnReward
	}
	return types.Coin{}
}

type EventDeletedNftIdRecordedForFrontendReward struct {
	Recipient string `protobuf:"bytes,1,opt,name=recipient,proto3" json:"recipient,omitempty" yaml:"recipient"`
	ClassId   string `protobuf:"bytes,2,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty" yaml:"class_id"`
	TokenId   string `protobuf:"bytes,3,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty" yaml:"nft_id"`
}

func (m *EventDeletedNftIdRecordedForFrontendReward) Reset() {
	*m = EventDeletedNftIdRecordedForFrontendReward{}
}
func (m *EventDeletedNftIdRecordedForFrontendReward) String() string {
	return proto.CompactTextString(m)
}
func (*EventDeletedNftIdRecordedForFrontendReward) ProtoMessage() {}
func (*EventDeletedNftIdRecordedForFrontendReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bc2d07e5e7a71a2, []int{2}
}
func (m *EventDeletedNftIdRecordedForFrontendReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventDeletedNftIdRecordedForFrontendReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventDeletedNftIdRecordedForFrontendReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventDeletedNftIdRecordedForFrontendReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventDeletedNftIdRecordedForFrontendReward.Merge(m, src)
}
func (m *EventDeletedNftIdRecordedForFrontendReward) XXX_Size() int {
	return m.Size()
}
func (m *EventDeletedNftIdRecordedForFrontendReward) XXX_DiscardUnknown() {
	xxx_messageInfo_EventDeletedNftIdRecordedForFrontendReward.DiscardUnknown(m)
}

var xxx_messageInfo_EventDeletedNftIdRecordedForFrontendReward proto.InternalMessageInfo

func (m *EventDeletedNftIdRecordedForFrontendReward) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *EventDeletedNftIdRecordedForFrontendReward) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *EventDeletedNftIdRecordedForFrontendReward) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

type EventNotRecordedNftId struct {
	ClassId string `protobuf:"bytes,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty" yaml:"class_id"`
	TokenId string `protobuf:"bytes,2,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty" yaml:"nft_id"`
}

func (m *EventNotRecordedNftId) Reset()         { *m = EventNotRecordedNftId{} }
func (m *EventNotRecordedNftId) String() string { return proto.CompactTextString(m) }
func (*EventNotRecordedNftId) ProtoMessage()    {}
func (*EventNotRecordedNftId) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bc2d07e5e7a71a2, []int{3}
}
func (m *EventNotRecordedNftId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventNotRecordedNftId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventNotRecordedNftId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventNotRecordedNftId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventNotRecordedNftId.Merge(m, src)
}
func (m *EventNotRecordedNftId) XXX_Size() int {
	return m.Size()
}
func (m *EventNotRecordedNftId) XXX_DiscardUnknown() {
	xxx_messageInfo_EventNotRecordedNftId.DiscardUnknown(m)
}

var xxx_messageInfo_EventNotRecordedNftId proto.InternalMessageInfo

func (m *EventNotRecordedNftId) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *EventNotRecordedNftId) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

type EventUpdatedReward struct {
	Recipient    string     `protobuf:"bytes,1,opt,name=recipient,proto3" json:"recipient,omitempty" yaml:"recipient"`
	EarnedReward types.Coin `protobuf:"bytes,2,opt,name=earned_reward,json=earnedReward,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"earned_reward" yaml:"earned_reward"`
}

func (m *EventUpdatedReward) Reset()         { *m = EventUpdatedReward{} }
func (m *EventUpdatedReward) String() string { return proto.CompactTextString(m) }
func (*EventUpdatedReward) ProtoMessage()    {}
func (*EventUpdatedReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bc2d07e5e7a71a2, []int{4}
}
func (m *EventUpdatedReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventUpdatedReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventUpdatedReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventUpdatedReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventUpdatedReward.Merge(m, src)
}
func (m *EventUpdatedReward) XXX_Size() int {
	return m.Size()
}
func (m *EventUpdatedReward) XXX_DiscardUnknown() {
	xxx_messageInfo_EventUpdatedReward.DiscardUnknown(m)
}

var xxx_messageInfo_EventUpdatedReward proto.InternalMessageInfo

func (m *EventUpdatedReward) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *EventUpdatedReward) GetEarnedReward() types.Coin {
	if m != nil {
		return m.EarnedReward
	}
	return types.Coin{}
}

type EventDistributionForStakers struct {
	DistributedAmount types.Coin `protobuf:"bytes,1,opt,name=distributed_amount,json=distributedAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"distributed_amount" yaml:"distributed_amount"`
	BlockHeight       int64      `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty" yaml:"block_height"`
}

func (m *EventDistributionForStakers) Reset()         { *m = EventDistributionForStakers{} }
func (m *EventDistributionForStakers) String() string { return proto.CompactTextString(m) }
func (*EventDistributionForStakers) ProtoMessage()    {}
func (*EventDistributionForStakers) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bc2d07e5e7a71a2, []int{5}
}
func (m *EventDistributionForStakers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventDistributionForStakers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventDistributionForStakers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventDistributionForStakers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventDistributionForStakers.Merge(m, src)
}
func (m *EventDistributionForStakers) XXX_Size() int {
	return m.Size()
}
func (m *EventDistributionForStakers) XXX_DiscardUnknown() {
	xxx_messageInfo_EventDistributionForStakers.DiscardUnknown(m)
}

var xxx_messageInfo_EventDistributionForStakers proto.InternalMessageInfo

func (m *EventDistributionForStakers) GetDistributedAmount() types.Coin {
	if m != nil {
		return m.DistributedAmount
	}
	return types.Coin{}
}

func (m *EventDistributionForStakers) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type EventVersionUnmatched struct {
	UnmatchedVersion uint32 `protobuf:"varint,1,opt,name=unmatched_version,json=unmatchedVersion,proto3" json:"unmatched_version,omitempty" yaml:"unmatched_version"`
	ClassId          string `protobuf:"bytes,2,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty" yaml:"class_id"`
	NftId            string `protobuf:"bytes,3,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty" yaml:"nft_id"`
}

func (m *EventVersionUnmatched) Reset()         { *m = EventVersionUnmatched{} }
func (m *EventVersionUnmatched) String() string { return proto.CompactTextString(m) }
func (*EventVersionUnmatched) ProtoMessage()    {}
func (*EventVersionUnmatched) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bc2d07e5e7a71a2, []int{6}
}
func (m *EventVersionUnmatched) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventVersionUnmatched) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventVersionUnmatched.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventVersionUnmatched) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventVersionUnmatched.Merge(m, src)
}
func (m *EventVersionUnmatched) XXX_Size() int {
	return m.Size()
}
func (m *EventVersionUnmatched) XXX_DiscardUnknown() {
	xxx_messageInfo_EventVersionUnmatched.DiscardUnknown(m)
}

var xxx_messageInfo_EventVersionUnmatched proto.InternalMessageInfo

func (m *EventVersionUnmatched) GetUnmatchedVersion() uint32 {
	if m != nil {
		return m.UnmatchedVersion
	}
	return 0
}

func (m *EventVersionUnmatched) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *EventVersionUnmatched) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

func init() {
	proto.RegisterType((*EventWithdrawAllRewards)(nil), "ununifi.ecosystemincentive.EventWithdrawAllRewards")
	proto.RegisterType((*EventWithdrawReward)(nil), "ununifi.ecosystemincentive.EventWithdrawReward")
	proto.RegisterType((*EventDeletedNftIdRecordedForFrontendReward)(nil), "ununifi.ecosystemincentive.EventDeletedNftIdRecordedForFrontendReward")
	proto.RegisterType((*EventNotRecordedNftId)(nil), "ununifi.ecosystemincentive.EventNotRecordedNftId")
	proto.RegisterType((*EventUpdatedReward)(nil), "ununifi.ecosystemincentive.EventUpdatedReward")
	proto.RegisterType((*EventDistributionForStakers)(nil), "ununifi.ecosystemincentive.EventDistributionForStakers")
	proto.RegisterType((*EventVersionUnmatched)(nil), "ununifi.ecosystemincentive.EventVersionUnmatched")
}

func init() {
	proto.RegisterFile("ununifi/ecosystemincentive/event.proto", fileDescriptor_4bc2d07e5e7a71a2)
}

var fileDescriptor_4bc2d07e5e7a71a2 = []byte{
	// 691 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x95, 0xc1, 0x4e, 0x53, 0x4d,
	0x14, 0xc7, 0x3b, 0x90, 0x8f, 0x0f, 0x06, 0x08, 0x70, 0x0b, 0xa1, 0xf0, 0x91, 0x5e, 0x72, 0x17,
	0x9f, 0xd5, 0xe8, 0xbd, 0x01, 0x76, 0xec, 0xa8, 0x5a, 0xad, 0x51, 0x62, 0xae, 0xa9, 0x26, 0x6e,
	0x9a, 0xdb, 0x3b, 0x87, 0x76, 0xd2, 0xdb, 0x99, 0x66, 0x66, 0xda, 0xca, 0x13, 0xb8, 0x65, 0xe5,
	0xd6, 0xbd, 0xcf, 0x60, 0x5c, 0xb3, 0x24, 0xba, 0x71, 0x55, 0x0d, 0x24, 0x3e, 0x40, 0x9f, 0xc0,
	0x74, 0x66, 0x8a, 0x94, 0x22, 0xd2, 0xb8, 0x62, 0x66, 0xce, 0x39, 0xff, 0xf3, 0xff, 0x9d, 0x9c,
	0x4b, 0xf1, 0xff, 0x2d, 0xd6, 0x62, 0xf4, 0x80, 0x06, 0x10, 0x73, 0x79, 0x28, 0x15, 0x34, 0x28,
	0x8b, 0x81, 0x29, 0xda, 0x86, 0x00, 0xda, 0xc0, 0x94, 0xdf, 0x14, 0x5c, 0x71, 0x67, 0xdd, 0xe6,
	0xf9, 0xa3, 0x79, 0xeb, 0x3b, 0xd7, 0x69, 0x8c, 0x3c, 0x19, 0xc1, 0xf5, 0xe5, 0x2a, 0xaf, 0x72,
	0x7d, 0x0c, 0xfa, 0x27, 0xfb, 0x9a, 0x8d, 0xb9, 0x6c, 0x70, 0x19, 0x54, 0x22, 0x09, 0x41, 0x7b,
	0xab, 0x02, 0x2a, 0xda, 0x0a, 0x62, 0x4e, 0x99, 0x89, 0x7b, 0x3f, 0x10, 0x5e, 0x7d, 0xd8, 0xb7,
	0xf5, 0x8a, 0xaa, 0x1a, 0x11, 0x51, 0x67, 0x2f, 0x49, 0x42, 0xe8, 0x44, 0x82, 0x48, 0xe7, 0x36,
	0x9e, 0x92, 0xc0, 0x08, 0x88, 0x0c, 0xda, 0x44, 0xb9, 0x99, 0xfc, 0x52, 0xaf, 0xeb, 0xce, 0x1f,
	0x46, 0x8d, 0x64, 0xd7, 0x33, 0xef, 0x5e, 0x68, 0x13, 0x9c, 0xf7, 0x08, 0xaf, 0x44, 0x49, 0x52,
	0xee, 0x58, 0x15, 0x56, 0x16, 0x46, 0x24, 0x33, 0xb1, 0x39, 0x99, 0x9b, 0xdd, 0x5e, 0xf3, 0x8d,
	0x0f, 0xbf, 0xef, 0xc3, 0xb7, 0x3e, 0xfc, 0xfb, 0x9c, 0xb2, 0xfc, 0xf3, 0xe3, 0xae, 0x9b, 0xea,
	0x75, 0xdd, 0x0d, 0xa3, 0x7c, 0xa5, 0x8a, 0xf7, 0xe1, 0x9b, 0x9b, 0xab, 0x52, 0x55, 0x6b, 0x55,
	0xfc, 0x98, 0x37, 0x02, 0x0b, 0x65, 0xfe, 0xdc, 0x93, 0xa4, 0x1e, 0xa8, 0xc3, 0x26, 0x48, 0x2d,
	0x28, 0xc3, 0x74, 0x94, 0x24, 0x03, 0x1c, 0x66, 0x61, 0xbc, 0x2f, 0x08, 0xa7, 0x87, 0x40, 0x4d,
	0x60, 0x1c, 0xc8, 0x23, 0x84, 0x17, 0x2f, 0x5b, 0xcb, 0x4c, 0x6c, 0xa2, 0xeb, 0xf9, 0x9e, 0x58,
	0xbe, 0x55, 0x23, 0x7a, 0x59, 0xa0, 0x8f, 0x76, 0xeb, 0x86, 0x68, 0xe1, 0x42, 0x67, 0x18, 0xcb,
	0xfb, 0x84, 0xf0, 0x1d, 0x4d, 0xf5, 0x00, 0x12, 0x50, 0x40, 0xf6, 0x0f, 0x54, 0x91, 0x84, 0x10,
	0x73, 0x41, 0x80, 0x14, 0xb8, 0x28, 0x08, 0xce, 0x14, 0x30, 0x62, 0x61, 0xb7, 0xf1, 0x8c, 0x80,
	0x98, 0x36, 0x29, 0x30, 0x65, 0x79, 0x97, 0x7b, 0x5d, 0x77, 0xd1, 0x58, 0x3b, 0x0f, 0x79, 0xe1,
	0xaf, 0x34, 0xc7, 0xc7, 0xd3, 0x71, 0x12, 0x49, 0x59, 0xa6, 0x06, 0x76, 0x26, 0x9f, 0xee, 0x75,
	0xdd, 0x05, 0x53, 0x32, 0x88, 0x78, 0xe1, 0xbf, 0xfa, 0x58, 0x24, 0xce, 0x5d, 0x3c, 0xad, 0x78,
	0x1d, 0x58, 0x3f, 0x7f, 0xf2, 0xf2, 0x48, 0xd9, 0x81, 0x32, 0xd9, 0x3a, 0xa5, 0x48, 0xbc, 0x16,
	0x5e, 0xd1, 0xfe, 0xf7, 0xb9, 0x1a, 0xd8, 0xd6, 0x0c, 0x43, 0x6d, 0xd1, 0x98, 0x6d, 0x27, 0xfe,
	0xd8, 0xf6, 0x33, 0xc2, 0x8e, 0xee, 0x5b, 0x6a, 0x92, 0x48, 0xc1, 0xdf, 0xcc, 0xe7, 0x2d, 0xc2,
	0xf3, 0x10, 0x09, 0x06, 0xe4, 0xc6, 0x2b, 0xf1, 0xc8, 0xae, 0xc4, 0xb2, 0xd1, 0x1d, 0xaa, 0x1e,
	0x6b, 0x1f, 0xe6, 0x4c, 0xa9, 0x5d, 0x86, 0x1e, 0xc2, 0xff, 0x99, 0x65, 0xa0, 0x52, 0x09, 0x5a,
	0x69, 0x29, 0xca, 0x59, 0x81, 0x8b, 0x17, 0x2a, 0xaa, 0x83, 0x90, 0xce, 0x3b, 0x84, 0x1d, 0x32,
	0x08, 0x01, 0x29, 0x47, 0x0d, 0xde, 0xb2, 0x9c, 0xd7, 0xda, 0x7d, 0x6a, 0xed, 0xae, 0x19, 0xbb,
	0xa3, 0x12, 0x63, 0x79, 0x5e, 0xba, 0x50, 0xbf, 0xa7, 0xcb, 0x9d, 0x5d, 0x3c, 0x57, 0x49, 0x78,
	0x5c, 0x2f, 0xd7, 0x80, 0x56, 0x6b, 0x4a, 0x0f, 0x70, 0x32, 0xbf, 0xda, 0xeb, 0xba, 0x69, 0xd3,
	0xf2, 0x62, 0xd4, 0x0b, 0x67, 0xf5, 0xf5, 0xb1, 0xb9, 0x7d, 0x44, 0x76, 0x83, 0x5e, 0x82, 0x90,
	0x94, 0xb3, 0x12, 0x6b, 0x44, 0x2a, 0xae, 0x01, 0x71, 0x8a, 0x78, 0xa9, 0x35, 0xb8, 0x94, 0xdb,
	0x26, 0xaa, 0x61, 0xe7, 0xf3, 0x1b, 0xbd, 0xae, 0x9b, 0x31, 0xd2, 0x23, 0x29, 0x5e, 0xb8, 0x78,
	0xfe, 0x66, 0x35, 0xc7, 0xfe, 0x06, 0x72, 0x78, 0xca, 0xac, 0xdc, 0xef, 0xbf, 0x80, 0x7f, 0x58,
	0x7f, 0xcd, 0xf3, 0xcf, 0x8e, 0x4f, 0xb3, 0xe8, 0xe4, 0x34, 0x8b, 0xbe, 0x9f, 0x66, 0xd1, 0xd1,
	0x59, 0x36, 0x75, 0x72, 0x96, 0x4d, 0x7d, 0x3d, 0xcb, 0xa6, 0x5e, 0xef, 0x5c, 0x18, 0x68, 0x89,
	0x95, 0x18, 0x2d, 0xd0, 0x20, 0xae, 0x45, 0x94, 0x05, 0x6f, 0xae, 0xfa, 0x5d, 0xd0, 0x13, 0xae,
	0x4c, 0xe9, 0xff, 0xea, 0x3b, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x3e, 0xb7, 0xef, 0x58, 0x86,
	0x06, 0x00, 0x00,
}

func (m *EventWithdrawAllRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventWithdrawAllRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventWithdrawAllRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AllWithdrawnRewards) > 0 {
		for iNdEx := len(m.AllWithdrawnRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AllWithdrawnRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventWithdrawReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventWithdrawReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventWithdrawReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.WithdrawnReward.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventDeletedNftIdRecordedForFrontendReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDeletedNftIdRecordedForFrontendReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventDeletedNftIdRecordedForFrontendReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventNotRecordedNftId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventNotRecordedNftId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventNotRecordedNftId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventUpdatedReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventUpdatedReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventUpdatedReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EarnedReward.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventDistributionForStakers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDistributionForStakers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventDistributionForStakers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.DistributedAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EventVersionUnmatched) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventVersionUnmatched) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventVersionUnmatched) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0x12
	}
	if m.UnmatchedVersion != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.UnmatchedVersion))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventWithdrawAllRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if len(m.AllWithdrawnRewards) > 0 {
		for _, e := range m.AllWithdrawnRewards {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	return n
}

func (m *EventWithdrawReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = m.WithdrawnReward.Size()
	n += 1 + l + sovEvent(uint64(l))
	return n
}

func (m *EventDeletedNftIdRecordedForFrontendReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventNotRecordedNftId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventUpdatedReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = m.EarnedReward.Size()
	n += 1 + l + sovEvent(uint64(l))
	return n
}

func (m *EventDistributionForStakers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DistributedAmount.Size()
	n += 1 + l + sovEvent(uint64(l))
	if m.BlockHeight != 0 {
		n += 1 + sovEvent(uint64(m.BlockHeight))
	}
	return n
}

func (m *EventVersionUnmatched) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnmatchedVersion != 0 {
		n += 1 + sovEvent(uint64(m.UnmatchedVersion))
	}
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventWithdrawAllRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventWithdrawAllRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventWithdrawAllRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllWithdrawnRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllWithdrawnRewards = append(m.AllWithdrawnRewards, types.Coin{})
			if err := m.AllWithdrawnRewards[len(m.AllWithdrawnRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventWithdrawReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventWithdrawReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventWithdrawReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawnReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WithdrawnReward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventDeletedNftIdRecordedForFrontendReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDeletedNftIdRecordedForFrontendReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDeletedNftIdRecordedForFrontendReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventNotRecordedNftId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventNotRecordedNftId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventNotRecordedNftId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventUpdatedReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventUpdatedReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventUpdatedReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EarnedReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EarnedReward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventDistributionForStakers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDistributionForStakers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDistributionForStakers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributedAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DistributedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventVersionUnmatched) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventVersionUnmatched: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventVersionUnmatched: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnmatchedVersion", wireType)
			}
			m.UnmatchedVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnmatchedVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
