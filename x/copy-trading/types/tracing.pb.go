// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: copy-trading/tracing.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Tracing struct {
	Address             string                                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	ExemplaryTrader     string                                 `protobuf:"bytes,2,opt,name=exemplary_trader,json=exemplaryTrader,proto3" json:"exemplary_trader,omitempty"`
	SizeCoefficient     github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=size_coefficient,json=sizeCoefficient,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"size_coefficient"`
	LeverageCoefficient github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=leverage_coefficient,json=leverageCoefficient,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"leverage_coefficient"`
	Reverse             bool                                   `protobuf:"varint,5,opt,name=reverse,proto3" json:"reverse,omitempty"`
}

func (m *Tracing) Reset()         { *m = Tracing{} }
func (m *Tracing) String() string { return proto.CompactTextString(m) }
func (*Tracing) ProtoMessage()    {}
func (*Tracing) Descriptor() ([]byte, []int) {
	return fileDescriptor_358c4527be688b00, []int{0}
}
func (m *Tracing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tracing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tracing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tracing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tracing.Merge(m, src)
}
func (m *Tracing) XXX_Size() int {
	return m.Size()
}
func (m *Tracing) XXX_DiscardUnknown() {
	xxx_messageInfo_Tracing.DiscardUnknown(m)
}

var xxx_messageInfo_Tracing proto.InternalMessageInfo

func (m *Tracing) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Tracing) GetExemplaryTrader() string {
	if m != nil {
		return m.ExemplaryTrader
	}
	return ""
}

func (m *Tracing) GetReverse() bool {
	if m != nil {
		return m.Reverse
	}
	return false
}

func init() {
	proto.RegisterType((*Tracing)(nil), "ununifi.chain.copytrading.Tracing")
}

func init() { proto.RegisterFile("copy-trading/tracing.proto", fileDescriptor_358c4527be688b00) }

var fileDescriptor_358c4527be688b00 = []byte{
	// 304 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0xbf, 0x4e, 0x42, 0x31,
	0x14, 0xc6, 0xef, 0xc5, 0x3f, 0x68, 0x17, 0xc8, 0x95, 0xa1, 0x32, 0x14, 0xe2, 0x60, 0x70, 0xa0,
	0x1d, 0x7c, 0x03, 0x34, 0xba, 0x13, 0x18, 0x74, 0x21, 0xa5, 0xf7, 0x50, 0x1a, 0xa1, 0xbd, 0x69,
	0x8b, 0x01, 0x9f, 0xc2, 0xa7, 0xf0, 0x59, 0x18, 0x19, 0x8d, 0x03, 0x31, 0xf0, 0x22, 0xa6, 0x17,
	0x50, 0x58, 0x9d, 0xda, 0xf3, 0xe5, 0xd7, 0xdf, 0x97, 0x9c, 0xa2, 0xaa, 0x30, 0xd9, 0xac, 0xe9,
	0x2d, 0x4f, 0x95, 0x96, 0xcc, 0x5b, 0x2e, 0x94, 0x96, 0x34, 0xb3, 0xc6, 0x9b, 0xe4, 0x72, 0xa2,
	0x27, 0x5a, 0x0d, 0x14, 0x15, 0x43, 0xae, 0x34, 0x0d, 0xe4, 0x16, 0xac, 0x56, 0xa4, 0x91, 0x26,
	0xa7, 0x58, 0xb8, 0x6d, 0x1e, 0x5c, 0x7d, 0x14, 0x50, 0xb1, 0xb3, 0x51, 0x24, 0x18, 0x15, 0x79,
	0x9a, 0x5a, 0x70, 0x0e, 0xc7, 0xf5, 0xb8, 0x71, 0xde, 0xde, 0x8d, 0xc9, 0x0d, 0x2a, 0xc3, 0x14,
	0xc6, 0xd9, 0x88, 0xdb, 0x59, 0x2f, 0x08, 0xc1, 0xe2, 0x42, 0x8e, 0x94, 0x7e, 0xf3, 0x4e, 0x1e,
	0x27, 0x4f, 0xa8, 0xec, 0xd4, 0x1b, 0xf4, 0x84, 0x81, 0xc1, 0x40, 0x09, 0x05, 0xda, 0xe3, 0xa3,
	0x80, 0xb6, 0xe8, 0x7c, 0x59, 0x8b, 0xbe, 0x96, 0xb5, 0x6b, 0xa9, 0xfc, 0x70, 0xd2, 0xa7, 0xc2,
	0x8c, 0x99, 0x30, 0x6e, 0x6c, 0xdc, 0xf6, 0x68, 0xba, 0xf4, 0x85, 0xf9, 0x59, 0x06, 0x8e, 0xde,
	0x83, 0x68, 0x97, 0x82, 0xe7, 0xee, 0x4f, 0x93, 0x70, 0x54, 0x19, 0xc1, 0x2b, 0x58, 0x2e, 0x0f,
	0xf5, 0xc7, 0xff, 0xd2, 0x5f, 0xec, 0x5c, 0xfb, 0x15, 0x18, 0x15, 0x6d, 0x88, 0x1d, 0xe0, 0x93,
	0x7a, 0xdc, 0x38, 0x6b, 0xef, 0xc6, 0xd6, 0xe3, 0x7c, 0x45, 0xe2, 0xc5, 0x8a, 0xc4, 0xdf, 0x2b,
	0x12, 0xbf, 0xaf, 0x49, 0xb4, 0x58, 0x93, 0xe8, 0x73, 0x4d, 0xa2, 0xe7, 0xe6, 0x5e, 0x61, 0x57,
	0x77, 0xb5, 0x7a, 0x50, 0x2c, 0x5f, 0x3f, 0x9b, 0xb2, 0xc3, 0xaf, 0x0a, 0xdd, 0xfd, 0xd3, 0x7c,
	0xf1, 0xb7, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x4d, 0xfc, 0xae, 0xf7, 0xc7, 0x01, 0x00, 0x00,
}

func (m *Tracing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tracing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tracing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Reverse {
		i--
		if m.Reverse {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.LeverageCoefficient.Size()
		i -= size
		if _, err := m.LeverageCoefficient.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTracing(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.SizeCoefficient.Size()
		i -= size
		if _, err := m.SizeCoefficient.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTracing(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ExemplaryTrader) > 0 {
		i -= len(m.ExemplaryTrader)
		copy(dAtA[i:], m.ExemplaryTrader)
		i = encodeVarintTracing(dAtA, i, uint64(len(m.ExemplaryTrader)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTracing(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTracing(dAtA []byte, offset int, v uint64) int {
	offset -= sovTracing(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Tracing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTracing(uint64(l))
	}
	l = len(m.ExemplaryTrader)
	if l > 0 {
		n += 1 + l + sovTracing(uint64(l))
	}
	l = m.SizeCoefficient.Size()
	n += 1 + l + sovTracing(uint64(l))
	l = m.LeverageCoefficient.Size()
	n += 1 + l + sovTracing(uint64(l))
	if m.Reverse {
		n += 2
	}
	return n
}

func sovTracing(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTracing(x uint64) (n int) {
	return sovTracing(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Tracing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTracing
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tracing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tracing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTracing
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTracing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExemplaryTrader", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTracing
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTracing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExemplaryTrader = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SizeCoefficient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTracing
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTracing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SizeCoefficient.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeverageCoefficient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTracing
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTracing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LeverageCoefficient.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reverse", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Reverse = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTracing(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTracing
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTracing(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTracing
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTracing
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTracing
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTracing
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTracing
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTracing
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTracing        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTracing          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTracing = fmt.Errorf("proto: unexpected end of group")
)
