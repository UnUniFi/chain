// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: copy-trading/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCreateExemplaryTrader struct {
	Sender               string                                 `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Name                 string                                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description          string                                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ProfitCommissionRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=profit_commission_rate,json=profitCommissionRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"profit_commission_rate"`
}

func (m *MsgCreateExemplaryTrader) Reset()         { *m = MsgCreateExemplaryTrader{} }
func (m *MsgCreateExemplaryTrader) String() string { return proto.CompactTextString(m) }
func (*MsgCreateExemplaryTrader) ProtoMessage()    {}
func (*MsgCreateExemplaryTrader) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0009f2b2f864057, []int{0}
}
func (m *MsgCreateExemplaryTrader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateExemplaryTrader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateExemplaryTrader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateExemplaryTrader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateExemplaryTrader.Merge(m, src)
}
func (m *MsgCreateExemplaryTrader) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateExemplaryTrader) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateExemplaryTrader.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateExemplaryTrader proto.InternalMessageInfo

func (m *MsgCreateExemplaryTrader) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgCreateExemplaryTrader) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgCreateExemplaryTrader) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type MsgCreateExemplaryTraderResponse struct {
}

func (m *MsgCreateExemplaryTraderResponse) Reset()         { *m = MsgCreateExemplaryTraderResponse{} }
func (m *MsgCreateExemplaryTraderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateExemplaryTraderResponse) ProtoMessage()    {}
func (*MsgCreateExemplaryTraderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0009f2b2f864057, []int{1}
}
func (m *MsgCreateExemplaryTraderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateExemplaryTraderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateExemplaryTraderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateExemplaryTraderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateExemplaryTraderResponse.Merge(m, src)
}
func (m *MsgCreateExemplaryTraderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateExemplaryTraderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateExemplaryTraderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateExemplaryTraderResponse proto.InternalMessageInfo

type MsgUpdateExemplaryTrader struct {
	Sender               string                                 `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Name                 string                                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description          string                                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ProfitCommissionRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=profit_commission_rate,json=profitCommissionRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"profit_commission_rate"`
}

func (m *MsgUpdateExemplaryTrader) Reset()         { *m = MsgUpdateExemplaryTrader{} }
func (m *MsgUpdateExemplaryTrader) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateExemplaryTrader) ProtoMessage()    {}
func (*MsgUpdateExemplaryTrader) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0009f2b2f864057, []int{2}
}
func (m *MsgUpdateExemplaryTrader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateExemplaryTrader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateExemplaryTrader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateExemplaryTrader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateExemplaryTrader.Merge(m, src)
}
func (m *MsgUpdateExemplaryTrader) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateExemplaryTrader) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateExemplaryTrader.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateExemplaryTrader proto.InternalMessageInfo

func (m *MsgUpdateExemplaryTrader) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgUpdateExemplaryTrader) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgUpdateExemplaryTrader) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type MsgUpdateExemplaryTraderResponse struct {
}

func (m *MsgUpdateExemplaryTraderResponse) Reset()         { *m = MsgUpdateExemplaryTraderResponse{} }
func (m *MsgUpdateExemplaryTraderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateExemplaryTraderResponse) ProtoMessage()    {}
func (*MsgUpdateExemplaryTraderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0009f2b2f864057, []int{3}
}
func (m *MsgUpdateExemplaryTraderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateExemplaryTraderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateExemplaryTraderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateExemplaryTraderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateExemplaryTraderResponse.Merge(m, src)
}
func (m *MsgUpdateExemplaryTraderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateExemplaryTraderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateExemplaryTraderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateExemplaryTraderResponse proto.InternalMessageInfo

type MsgDeleteExemplaryTrader struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgDeleteExemplaryTrader) Reset()         { *m = MsgDeleteExemplaryTrader{} }
func (m *MsgDeleteExemplaryTrader) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteExemplaryTrader) ProtoMessage()    {}
func (*MsgDeleteExemplaryTrader) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0009f2b2f864057, []int{4}
}
func (m *MsgDeleteExemplaryTrader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteExemplaryTrader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteExemplaryTrader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteExemplaryTrader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteExemplaryTrader.Merge(m, src)
}
func (m *MsgDeleteExemplaryTrader) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteExemplaryTrader) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteExemplaryTrader.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteExemplaryTrader proto.InternalMessageInfo

func (m *MsgDeleteExemplaryTrader) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

type MsgDeleteExemplaryTraderResponse struct {
}

func (m *MsgDeleteExemplaryTraderResponse) Reset()         { *m = MsgDeleteExemplaryTraderResponse{} }
func (m *MsgDeleteExemplaryTraderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteExemplaryTraderResponse) ProtoMessage()    {}
func (*MsgDeleteExemplaryTraderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0009f2b2f864057, []int{5}
}
func (m *MsgDeleteExemplaryTraderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteExemplaryTraderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteExemplaryTraderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteExemplaryTraderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteExemplaryTraderResponse.Merge(m, src)
}
func (m *MsgDeleteExemplaryTraderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteExemplaryTraderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteExemplaryTraderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteExemplaryTraderResponse proto.InternalMessageInfo

type MsgCreateTracing struct {
	Sender              string                                 `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	ExemplaryTrader     string                                 `protobuf:"bytes,2,opt,name=exemplary_trader,json=exemplaryTrader,proto3" json:"exemplary_trader,omitempty"`
	SizeCoefficient     github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=size_coefficient,json=sizeCoefficient,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"size_coefficient"`
	LeverageCoefficient github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=leverage_coefficient,json=leverageCoefficient,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"leverage_coefficient"`
	Reverse             bool                                   `protobuf:"varint,5,opt,name=reverse,proto3" json:"reverse,omitempty"`
}

func (m *MsgCreateTracing) Reset()         { *m = MsgCreateTracing{} }
func (m *MsgCreateTracing) String() string { return proto.CompactTextString(m) }
func (*MsgCreateTracing) ProtoMessage()    {}
func (*MsgCreateTracing) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0009f2b2f864057, []int{6}
}
func (m *MsgCreateTracing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateTracing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateTracing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateTracing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateTracing.Merge(m, src)
}
func (m *MsgCreateTracing) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateTracing) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateTracing.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateTracing proto.InternalMessageInfo

func (m *MsgCreateTracing) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgCreateTracing) GetExemplaryTrader() string {
	if m != nil {
		return m.ExemplaryTrader
	}
	return ""
}

func (m *MsgCreateTracing) GetReverse() bool {
	if m != nil {
		return m.Reverse
	}
	return false
}

type MsgCreateTracingResponse struct {
}

func (m *MsgCreateTracingResponse) Reset()         { *m = MsgCreateTracingResponse{} }
func (m *MsgCreateTracingResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateTracingResponse) ProtoMessage()    {}
func (*MsgCreateTracingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0009f2b2f864057, []int{7}
}
func (m *MsgCreateTracingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateTracingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateTracingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateTracingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateTracingResponse.Merge(m, src)
}
func (m *MsgCreateTracingResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateTracingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateTracingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateTracingResponse proto.InternalMessageInfo

type MsgDeleteTracing struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgDeleteTracing) Reset()         { *m = MsgDeleteTracing{} }
func (m *MsgDeleteTracing) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteTracing) ProtoMessage()    {}
func (*MsgDeleteTracing) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0009f2b2f864057, []int{8}
}
func (m *MsgDeleteTracing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteTracing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteTracing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteTracing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteTracing.Merge(m, src)
}
func (m *MsgDeleteTracing) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteTracing) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteTracing.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteTracing proto.InternalMessageInfo

func (m *MsgDeleteTracing) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

type MsgDeleteTracingResponse struct {
}

func (m *MsgDeleteTracingResponse) Reset()         { *m = MsgDeleteTracingResponse{} }
func (m *MsgDeleteTracingResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteTracingResponse) ProtoMessage()    {}
func (*MsgDeleteTracingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0009f2b2f864057, []int{9}
}
func (m *MsgDeleteTracingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteTracingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteTracingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteTracingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteTracingResponse.Merge(m, src)
}
func (m *MsgDeleteTracingResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteTracingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteTracingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteTracingResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateExemplaryTrader)(nil), "ununifi.chain.copytrading.MsgCreateExemplaryTrader")
	proto.RegisterType((*MsgCreateExemplaryTraderResponse)(nil), "ununifi.chain.copytrading.MsgCreateExemplaryTraderResponse")
	proto.RegisterType((*MsgUpdateExemplaryTrader)(nil), "ununifi.chain.copytrading.MsgUpdateExemplaryTrader")
	proto.RegisterType((*MsgUpdateExemplaryTraderResponse)(nil), "ununifi.chain.copytrading.MsgUpdateExemplaryTraderResponse")
	proto.RegisterType((*MsgDeleteExemplaryTrader)(nil), "ununifi.chain.copytrading.MsgDeleteExemplaryTrader")
	proto.RegisterType((*MsgDeleteExemplaryTraderResponse)(nil), "ununifi.chain.copytrading.MsgDeleteExemplaryTraderResponse")
	proto.RegisterType((*MsgCreateTracing)(nil), "ununifi.chain.copytrading.MsgCreateTracing")
	proto.RegisterType((*MsgCreateTracingResponse)(nil), "ununifi.chain.copytrading.MsgCreateTracingResponse")
	proto.RegisterType((*MsgDeleteTracing)(nil), "ununifi.chain.copytrading.MsgDeleteTracing")
	proto.RegisterType((*MsgDeleteTracingResponse)(nil), "ununifi.chain.copytrading.MsgDeleteTracingResponse")
}

func init() { proto.RegisterFile("copy-trading/tx.proto", fileDescriptor_c0009f2b2f864057) }

var fileDescriptor_c0009f2b2f864057 = []byte{
	// 553 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x55, 0xcd, 0x6e, 0xd3, 0x40,
	0x18, 0x8c, 0xfb, 0x07, 0x2c, 0x42, 0xad, 0x4c, 0x5a, 0x19, 0x1f, 0xdc, 0x28, 0x48, 0xa8, 0x50,
	0xc5, 0x96, 0x9a, 0x23, 0xb7, 0xa6, 0xc0, 0xa9, 0x97, 0xa8, 0x39, 0xc0, 0x25, 0xda, 0xae, 0xbf,
	0xb8, 0x2b, 0xe2, 0x5d, 0xb3, 0xbb, 0x41, 0x09, 0x6f, 0xc0, 0x09, 0x5e, 0x84, 0xf7, 0xe8, 0x09,
	0xf5, 0x88, 0x38, 0x54, 0x28, 0x79, 0x11, 0xe4, 0xf5, 0x0f, 0x76, 0xe5, 0xd4, 0x69, 0x8f, 0x9c,
	0x62, 0xaf, 0xe7, 0x9b, 0x9d, 0x99, 0xec, 0xd8, 0x68, 0x97, 0xf0, 0x68, 0xd6, 0x51, 0x02, 0xfb,
	0x94, 0x05, 0x9e, 0x9a, 0xba, 0x91, 0xe0, 0x8a, 0x9b, 0xcf, 0x26, 0x6c, 0xc2, 0xe8, 0x88, 0xba,
	0xe4, 0x02, 0x53, 0xe6, 0xc6, 0xa0, 0x14, 0x63, 0x37, 0x03, 0x1e, 0x70, 0x8d, 0xf2, 0xe2, 0xab,
	0x64, 0xc0, 0x7e, 0x5e, 0xe2, 0x81, 0x29, 0x84, 0xd1, 0x18, 0x8b, 0xd9, 0x30, 0x5e, 0x01, 0x91,
	0x82, 0xec, 0xf2, 0x66, 0x02, 0x13, 0xca, 0x82, 0xe4, 0x59, 0xfb, 0xa7, 0x81, 0xac, 0x53, 0x19,
	0xf4, 0x04, 0x60, 0x05, 0x6f, 0xb2, 0xf9, 0x33, 0x3d, 0x6e, 0xee, 0xa1, 0x2d, 0x09, 0xcc, 0x07,
	0x61, 0x19, 0x2d, 0xe3, 0xe0, 0x51, 0x3f, 0xbd, 0x33, 0x4d, 0xb4, 0xc1, 0x70, 0x08, 0xd6, 0x9a,
	0x5e, 0xd5, 0xd7, 0x66, 0x0b, 0x3d, 0xf6, 0x41, 0x12, 0x41, 0x23, 0x45, 0x39, 0xb3, 0xd6, 0xf5,
	0xa3, 0xe2, 0x92, 0xe9, 0xa3, 0xbd, 0x48, 0xf0, 0x11, 0x55, 0x43, 0xc2, 0xc3, 0x90, 0x4a, 0x49,
	0x39, 0x1b, 0x0a, 0xac, 0xc0, 0xda, 0x88, 0xc1, 0xc7, 0xee, 0xe5, 0xf5, 0x7e, 0xe3, 0xf7, 0xf5,
	0xfe, 0x8b, 0x80, 0xaa, 0x8b, 0xc9, 0xb9, 0x4b, 0x78, 0xe8, 0x11, 0x2e, 0x43, 0x2e, 0xd3, 0x9f,
	0x8e, 0xf4, 0x3f, 0x7a, 0x6a, 0x16, 0x81, 0x74, 0x4f, 0x80, 0xf4, 0x9b, 0x09, 0x5b, 0x2f, 0x27,
	0xeb, 0x63, 0x05, 0xed, 0x36, 0x6a, 0x2d, 0xf3, 0xd3, 0x07, 0x19, 0x71, 0x26, 0x21, 0x33, 0x3d,
	0x88, 0xfc, 0xff, 0xca, 0x74, 0xa5, 0x9f, 0xdc, 0xf4, 0x91, 0xf6, 0x7c, 0x02, 0x63, 0x58, 0xd9,
	0x73, 0xca, 0x5b, 0x39, 0x93, 0xf3, 0xfe, 0x58, 0x43, 0x3b, 0x79, 0xe2, 0x67, 0xc9, 0xe1, 0x5a,
	0x1a, 0xe2, 0x4b, 0xb4, 0x73, 0xf3, 0x90, 0xa6, 0x81, 0x6e, 0xc3, 0x0d, 0x4d, 0xef, 0xd1, 0x8e,
	0xa4, 0x5f, 0x60, 0x48, 0x38, 0x8c, 0x46, 0x94, 0x50, 0x60, 0x2a, 0x09, 0xf8, 0xce, 0x99, 0x6d,
	0xc7, 0x3c, 0xbd, 0x7f, 0x34, 0x26, 0x46, 0xcd, 0x31, 0x7c, 0x06, 0x81, 0x83, 0x32, 0xfd, 0xfd,
	0xfe, 0x92, 0xa7, 0x19, 0x57, 0x71, 0x0b, 0x0b, 0x3d, 0x10, 0xf1, 0xb2, 0x04, 0x6b, 0xb3, 0x65,
	0x1c, 0x3c, 0xec, 0x67, 0xb7, 0x6d, 0xbb, 0x50, 0xb8, 0x34, 0xae, 0x3c, 0xcb, 0x57, 0x3a, 0xca,
	0x24, 0xef, 0x9a, 0x28, 0x53, 0x9e, 0x12, 0x36, 0xe3, 0x39, 0xfa, 0xb6, 0x89, 0xd6, 0x4f, 0x65,
	0x60, 0x7e, 0x35, 0xd0, 0x6e, 0x75, 0xb5, 0xbb, 0xee, 0xd2, 0x57, 0x8d, 0xbb, 0xac, 0x3f, 0xf6,
	0xeb, 0x7b, 0x0c, 0x65, 0x9a, 0xb4, 0x96, 0xea, 0xc6, 0xd5, 0x68, 0xa9, 0x1c, 0xaa, 0xd3, 0x72,
	0x6b, 0x17, 0xb4, 0x96, 0xea, 0x26, 0xd4, 0x68, 0xa9, 0x1c, 0xaa, 0xd3, 0x72, 0x6b, 0x7f, 0xcc,
	0x4f, 0xe8, 0x49, 0xb9, 0x3b, 0x87, 0xab, 0xa4, 0x9c, 0x82, 0xed, 0xee, 0x1d, 0xc0, 0xc5, 0x2d,
	0xcb, 0x67, 0xec, 0x70, 0x15, 0x03, 0x2b, 0x6e, 0x59, 0x79, 0x22, 0x8f, 0xdf, 0x5d, 0xce, 0x1d,
	0xe3, 0x6a, 0xee, 0x18, 0x7f, 0xe6, 0x8e, 0xf1, 0x7d, 0xe1, 0x34, 0xae, 0x16, 0x4e, 0xe3, 0xd7,
	0xc2, 0x69, 0x7c, 0xe8, 0x14, 0x6a, 0x36, 0x60, 0x03, 0x46, 0xdf, 0x52, 0x4f, 0x13, 0x7b, 0x53,
	0xaf, 0xfc, 0xe1, 0x8a, 0x1b, 0x77, 0xbe, 0xa5, 0xbf, 0x5b, 0xdd, 0xbf, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x5e, 0xde, 0x90, 0xdd, 0x42, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	CreateExemplaryTrader(ctx context.Context, in *MsgCreateExemplaryTrader, opts ...grpc.CallOption) (*MsgCreateExemplaryTraderResponse, error)
	UpdateExemplaryTrader(ctx context.Context, in *MsgUpdateExemplaryTrader, opts ...grpc.CallOption) (*MsgUpdateExemplaryTraderResponse, error)
	DeleteExemplaryTrader(ctx context.Context, in *MsgDeleteExemplaryTrader, opts ...grpc.CallOption) (*MsgDeleteExemplaryTraderResponse, error)
	CreateTracing(ctx context.Context, in *MsgCreateTracing, opts ...grpc.CallOption) (*MsgCreateTracingResponse, error)
	DeleteTracing(ctx context.Context, in *MsgDeleteTracing, opts ...grpc.CallOption) (*MsgDeleteTracingResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateExemplaryTrader(ctx context.Context, in *MsgCreateExemplaryTrader, opts ...grpc.CallOption) (*MsgCreateExemplaryTraderResponse, error) {
	out := new(MsgCreateExemplaryTraderResponse)
	err := c.cc.Invoke(ctx, "/ununifi.chain.copytrading.Msg/CreateExemplaryTrader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateExemplaryTrader(ctx context.Context, in *MsgUpdateExemplaryTrader, opts ...grpc.CallOption) (*MsgUpdateExemplaryTraderResponse, error) {
	out := new(MsgUpdateExemplaryTraderResponse)
	err := c.cc.Invoke(ctx, "/ununifi.chain.copytrading.Msg/UpdateExemplaryTrader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteExemplaryTrader(ctx context.Context, in *MsgDeleteExemplaryTrader, opts ...grpc.CallOption) (*MsgDeleteExemplaryTraderResponse, error) {
	out := new(MsgDeleteExemplaryTraderResponse)
	err := c.cc.Invoke(ctx, "/ununifi.chain.copytrading.Msg/DeleteExemplaryTrader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateTracing(ctx context.Context, in *MsgCreateTracing, opts ...grpc.CallOption) (*MsgCreateTracingResponse, error) {
	out := new(MsgCreateTracingResponse)
	err := c.cc.Invoke(ctx, "/ununifi.chain.copytrading.Msg/CreateTracing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteTracing(ctx context.Context, in *MsgDeleteTracing, opts ...grpc.CallOption) (*MsgDeleteTracingResponse, error) {
	out := new(MsgDeleteTracingResponse)
	err := c.cc.Invoke(ctx, "/ununifi.chain.copytrading.Msg/DeleteTracing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	CreateExemplaryTrader(context.Context, *MsgCreateExemplaryTrader) (*MsgCreateExemplaryTraderResponse, error)
	UpdateExemplaryTrader(context.Context, *MsgUpdateExemplaryTrader) (*MsgUpdateExemplaryTraderResponse, error)
	DeleteExemplaryTrader(context.Context, *MsgDeleteExemplaryTrader) (*MsgDeleteExemplaryTraderResponse, error)
	CreateTracing(context.Context, *MsgCreateTracing) (*MsgCreateTracingResponse, error)
	DeleteTracing(context.Context, *MsgDeleteTracing) (*MsgDeleteTracingResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateExemplaryTrader(ctx context.Context, req *MsgCreateExemplaryTrader) (*MsgCreateExemplaryTraderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExemplaryTrader not implemented")
}
func (*UnimplementedMsgServer) UpdateExemplaryTrader(ctx context.Context, req *MsgUpdateExemplaryTrader) (*MsgUpdateExemplaryTraderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExemplaryTrader not implemented")
}
func (*UnimplementedMsgServer) DeleteExemplaryTrader(ctx context.Context, req *MsgDeleteExemplaryTrader) (*MsgDeleteExemplaryTraderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExemplaryTrader not implemented")
}
func (*UnimplementedMsgServer) CreateTracing(ctx context.Context, req *MsgCreateTracing) (*MsgCreateTracingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTracing not implemented")
}
func (*UnimplementedMsgServer) DeleteTracing(ctx context.Context, req *MsgDeleteTracing) (*MsgDeleteTracingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTracing not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateExemplaryTrader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateExemplaryTrader)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateExemplaryTrader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.chain.copytrading.Msg/CreateExemplaryTrader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateExemplaryTrader(ctx, req.(*MsgCreateExemplaryTrader))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateExemplaryTrader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateExemplaryTrader)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateExemplaryTrader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.chain.copytrading.Msg/UpdateExemplaryTrader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateExemplaryTrader(ctx, req.(*MsgUpdateExemplaryTrader))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteExemplaryTrader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteExemplaryTrader)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteExemplaryTrader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.chain.copytrading.Msg/DeleteExemplaryTrader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteExemplaryTrader(ctx, req.(*MsgDeleteExemplaryTrader))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateTracing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateTracing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateTracing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.chain.copytrading.Msg/CreateTracing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateTracing(ctx, req.(*MsgCreateTracing))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteTracing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteTracing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteTracing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.chain.copytrading.Msg/DeleteTracing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteTracing(ctx, req.(*MsgDeleteTracing))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ununifi.chain.copytrading.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateExemplaryTrader",
			Handler:    _Msg_CreateExemplaryTrader_Handler,
		},
		{
			MethodName: "UpdateExemplaryTrader",
			Handler:    _Msg_UpdateExemplaryTrader_Handler,
		},
		{
			MethodName: "DeleteExemplaryTrader",
			Handler:    _Msg_DeleteExemplaryTrader_Handler,
		},
		{
			MethodName: "CreateTracing",
			Handler:    _Msg_CreateTracing_Handler,
		},
		{
			MethodName: "DeleteTracing",
			Handler:    _Msg_DeleteTracing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "copy-trading/tx.proto",
}

func (m *MsgCreateExemplaryTrader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateExemplaryTrader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateExemplaryTrader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ProfitCommissionRate.Size()
		i -= size
		if _, err := m.ProfitCommissionRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateExemplaryTraderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateExemplaryTraderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateExemplaryTraderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateExemplaryTrader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateExemplaryTrader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateExemplaryTrader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ProfitCommissionRate.Size()
		i -= size
		if _, err := m.ProfitCommissionRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateExemplaryTraderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateExemplaryTraderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateExemplaryTraderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteExemplaryTrader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteExemplaryTrader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteExemplaryTrader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteExemplaryTraderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteExemplaryTraderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteExemplaryTraderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateTracing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateTracing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateTracing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Reverse {
		i--
		if m.Reverse {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.LeverageCoefficient.Size()
		i -= size
		if _, err := m.LeverageCoefficient.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.SizeCoefficient.Size()
		i -= size
		if _, err := m.SizeCoefficient.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ExemplaryTrader) > 0 {
		i -= len(m.ExemplaryTrader)
		copy(dAtA[i:], m.ExemplaryTrader)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ExemplaryTrader)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateTracingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateTracingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateTracingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteTracing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteTracing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteTracing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteTracingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteTracingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteTracingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateExemplaryTrader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.ProfitCommissionRate.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgCreateExemplaryTraderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateExemplaryTrader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.ProfitCommissionRate.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateExemplaryTraderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteExemplaryTrader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteExemplaryTraderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateTracing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ExemplaryTrader)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.SizeCoefficient.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.LeverageCoefficient.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.Reverse {
		n += 2
	}
	return n
}

func (m *MsgCreateTracingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteTracing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteTracingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateExemplaryTrader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateExemplaryTrader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateExemplaryTrader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfitCommissionRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProfitCommissionRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateExemplaryTraderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateExemplaryTraderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateExemplaryTraderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateExemplaryTrader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateExemplaryTrader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateExemplaryTrader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfitCommissionRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProfitCommissionRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateExemplaryTraderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateExemplaryTraderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateExemplaryTraderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteExemplaryTrader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteExemplaryTrader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteExemplaryTrader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteExemplaryTraderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteExemplaryTraderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteExemplaryTraderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateTracing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateTracing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateTracing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExemplaryTrader", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExemplaryTrader = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SizeCoefficient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SizeCoefficient.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeverageCoefficient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LeverageCoefficient.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reverse", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Reverse = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateTracingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateTracingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateTracingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteTracing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteTracing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteTracing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteTracingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteTracingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteTracingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
