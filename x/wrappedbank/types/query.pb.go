// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: wrappedbank/query.proto

// package cosmos.bank.v1beta1;

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	types "github.com/cosmos/cosmos-sdk/x/bank/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("wrappedbank/query.proto", fileDescriptor_3aee86fe021c5ba4) }

var fileDescriptor_3aee86fe021c5ba4 = []byte{
	// 527 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0x4f, 0x6f, 0xd3, 0x3e,
	0x18, 0xc7, 0xeb, 0x9f, 0xf4, 0x83, 0xc9, 0x15, 0x1c, 0x0c, 0x12, 0xa2, 0x40, 0x90, 0x00, 0x01,
	0x1d, 0x25, 0x5e, 0x07, 0x07, 0xae, 0x4c, 0x68, 0x37, 0x34, 0xf1, 0x67, 0x17, 0x2e, 0x95, 0x93,
	0x78, 0x99, 0xb5, 0xc4, 0xf6, 0x62, 0x87, 0x51, 0x4d, 0xbb, 0xf0, 0x06, 0x86, 0xc4, 0x05, 0x09,
	0x71, 0xe0, 0xc2, 0x6b, 0xe1, 0x38, 0xc4, 0x85, 0x23, 0x6a, 0x79, 0x21, 0xa8, 0x4f, 0x9c, 0x92,
	0x8e, 0xb6, 0xf8, 0x96, 0xf4, 0xfb, 0x79, 0x9e, 0xe7, 0x93, 0x27, 0x8d, 0xf1, 0xa5, 0x83, 0x82,
	0x69, 0xcd, 0x93, 0x88, 0xc9, 0x3d, 0xba, 0x5f, 0xf2, 0x62, 0x18, 0xea, 0x42, 0x59, 0x45, 0x2e,
	0x94, 0xb2, 0x94, 0x62, 0x47, 0x84, 0x0d, 0xa0, 0x73, 0x31, 0x55, 0xa9, 0x82, 0x9c, 0x4e, 0xae,
	0x2a, 0xb4, 0x73, 0x35, 0x55, 0x2a, 0xcd, 0x38, 0x65, 0x5a, 0x50, 0x26, 0xa5, 0xb2, 0xcc, 0x0a,
	0x25, 0x8d, 0x4b, 0x83, 0x58, 0x99, 0x5c, 0x19, 0x1a, 0x31, 0xc3, 0xe9, 0xeb, 0x7e, 0xc4, 0x2d,
	0xeb, 0xd3, 0x58, 0x09, 0xf9, 0x57, 0x2e, 0xf7, 0xa6, 0xf9, 0xe4, 0xc6, 0xe5, 0x97, 0xab, 0x7c,
	0x50, 0x8d, 0xad, 0x6e, 0x5c, 0x74, 0x7d, 0x5e, 0x69, 0xe3, 0x21, 0x3a, 0xab, 0xcd, 0xd9, 0x10,
	0x4c, 0x31, 0xcd, 0x52, 0x21, 0x41, 0xd4, 0xb1, 0x33, 0x9b, 0x60, 0xb9, 0x90, 0xee, 0xf1, 0xd6,
	0xbf, 0xad, 0xe0, 0xff, 0x9f, 0x4d, 0x6a, 0xc9, 0x07, 0x84, 0xcf, 0x6e, 0xb0, 0x8c, 0xc9, 0x98,
	0x93, 0xbb, 0xa1, 0x53, 0x01, 0x55, 0xd7, 0x35, 0x04, 0xce, 0x21, 0xcf, 0xf9, 0x7e, 0xc9, 0x8d,
	0xed, 0x74, 0x3d, 0x48, 0xa3, 0x95, 0x34, 0xfc, 0xc6, 0xa3, 0xb7, 0xdf, 0x7f, 0xbd, 0xff, 0x6f,
	0x9d, 0xac, 0xd1, 0xf9, 0x4b, 0x01, 0xda, 0xd0, 0x43, 0x96, 0x24, 0x05, 0x37, 0xe6, 0x88, 0x46,
	0xc3, 0x41, 0xc2, 0xa5, 0xca, 0xc9, 0x47, 0x84, 0xdb, 0x8f, 0xb3, 0xcc, 0x35, 0x34, 0xa4, 0xb7,
	0x78, 0x68, 0x03, 0xab, 0x15, 0xef, 0x7b, 0xd2, 0x4e, 0x93, 0x82, 0x66, 0x97, 0xdc, 0xf1, 0xd4,
	0x24, 0xc7, 0x08, 0xb7, 0x5f, 0x2a, 0xcb, 0xb2, 0x17, 0xa5, 0xd6, 0xd9, 0x70, 0x99, 0x5d, 0x03,
	0xf3, 0xb0, 0x9b, 0xa1, 0x9d, 0xdd, 0x4d, 0xb0, 0xbb, 0x46, 0xae, 0xcc, 0xb5, 0x33, 0x95, 0xc1,
	0x31, 0xc2, 0x2b, 0x55, 0xdd, 0xd6, 0x0e, 0x59, 0xf2, 0x86, 0x6a, 0xa6, 0x76, 0x59, 0xf5, 0x41,
	0x9d, 0x48, 0x0f, 0x44, 0x6e, 0x93, 0x5b, 0x4b, 0x44, 0xfe, 0xbc, 0xc1, 0x2f, 0x08, 0x9f, 0x7b,
	0x32, 0xb9, 0x7a, 0xca, 0x2d, 0x4b, 0x98, 0x65, 0x24, 0x5c, 0x3c, 0x6b, 0x06, 0xac, 0xdd, 0xa8,
	0x37, 0xef, 0x04, 0x1f, 0x82, 0x60, 0x48, 0x7a, 0x73, 0x05, 0x41, 0xcb, 0x0c, 0x72, 0x57, 0x45,
	0x0f, 0xe1, 0x87, 0x23, 0xf2, 0x19, 0xe1, 0xf3, 0xd0, 0xcf, 0x4c, 0x4d, 0xff, 0x35, 0xd9, 0x9c,
	0x56, 0x5d, 0xf3, 0x2f, 0xf0, 0x5a, 0xe6, 0x29, 0x57, 0xf2, 0x09, 0xe1, 0x36, 0x34, 0xda, 0x3a,
	0x90, 0xbc, 0x58, 0xfa, 0x39, 0x34, 0x30, 0x8f, 0x3f, 0xdc, 0x0c, 0xed, 0xd4, 0xfa, 0xa0, 0x76,
	0x8f, 0x74, 0x17, 0xab, 0x0d, 0x14, 0x94, 0xd4, 0x3b, 0xdc, 0xd8, 0xfc, 0x3a, 0x0a, 0xd0, 0xc9,
	0x28, 0x40, 0x3f, 0x47, 0x01, 0x7a, 0x37, 0x0e, 0x5a, 0x27, 0xe3, 0xa0, 0xf5, 0x63, 0x1c, 0xb4,
	0x5e, 0xf5, 0x52, 0x61, 0x77, 0xcb, 0x28, 0x8c, 0x55, 0x4e, 0xb7, 0xe5, 0xb6, 0x14, 0x9b, 0x82,
	0xc6, 0xbb, 0x4c, 0x48, 0xfa, 0x86, 0x36, 0x4f, 0x28, 0x3b, 0xd4, 0xdc, 0x44, 0x67, 0xe0, 0x88,
	0x7a, 0xf0, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x04, 0xe3, 0x7c, 0xde, 0xc7, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Balance queries the balance of a single coin for a single account.
	Balance(ctx context.Context, in *types.QueryBalanceRequest, opts ...grpc.CallOption) (*types.QueryBalanceResponse, error)
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	AllBalances(ctx context.Context, in *types.QueryAllBalancesRequest, opts ...grpc.CallOption) (*types.QueryAllBalancesResponse, error)
	// TotalSupply queries the total supply of all coins.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	TotalSupply(ctx context.Context, in *types.QueryTotalSupplyRequest, opts ...grpc.CallOption) (*types.QueryTotalSupplyResponse, error)
	// SupplyOf queries the supply of a single coin.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	SupplyOf(ctx context.Context, in *types.QuerySupplyOfRequest, opts ...grpc.CallOption) (*types.QuerySupplyOfResponse, error)
	// DenomsMetadata queries the client metadata of a given coin denomination.
	DenomMetadata(ctx context.Context, in *types.QueryDenomMetadataRequest, opts ...grpc.CallOption) (*types.QueryDenomMetadataResponse, error)
	// DenomsMetadata queries the client metadata for all registered coin
	// denominations.
	DenomsMetadata(ctx context.Context, in *types.QueryDenomsMetadataRequest, opts ...grpc.CallOption) (*types.QueryDenomsMetadataResponse, error)
	// DenomOwners queries for all account addresses that own a particular token
	// denomination.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	//
	// Since: cosmos-sdk 0.46
	DenomOwners(ctx context.Context, in *types.QueryDenomOwnersRequest, opts ...grpc.CallOption) (*types.QueryDenomOwnersResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Balance(ctx context.Context, in *types.QueryBalanceRequest, opts ...grpc.CallOption) (*types.QueryBalanceResponse, error) {
	out := new(types.QueryBalanceResponse)
	err := c.cc.Invoke(ctx, "/ununifi.wrappedbank.Query/Balance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllBalances(ctx context.Context, in *types.QueryAllBalancesRequest, opts ...grpc.CallOption) (*types.QueryAllBalancesResponse, error) {
	out := new(types.QueryAllBalancesResponse)
	err := c.cc.Invoke(ctx, "/ununifi.wrappedbank.Query/AllBalances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalSupply(ctx context.Context, in *types.QueryTotalSupplyRequest, opts ...grpc.CallOption) (*types.QueryTotalSupplyResponse, error) {
	out := new(types.QueryTotalSupplyResponse)
	err := c.cc.Invoke(ctx, "/ununifi.wrappedbank.Query/TotalSupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SupplyOf(ctx context.Context, in *types.QuerySupplyOfRequest, opts ...grpc.CallOption) (*types.QuerySupplyOfResponse, error) {
	out := new(types.QuerySupplyOfResponse)
	err := c.cc.Invoke(ctx, "/ununifi.wrappedbank.Query/SupplyOf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DenomMetadata(ctx context.Context, in *types.QueryDenomMetadataRequest, opts ...grpc.CallOption) (*types.QueryDenomMetadataResponse, error) {
	out := new(types.QueryDenomMetadataResponse)
	err := c.cc.Invoke(ctx, "/ununifi.wrappedbank.Query/DenomMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DenomsMetadata(ctx context.Context, in *types.QueryDenomsMetadataRequest, opts ...grpc.CallOption) (*types.QueryDenomsMetadataResponse, error) {
	out := new(types.QueryDenomsMetadataResponse)
	err := c.cc.Invoke(ctx, "/ununifi.wrappedbank.Query/DenomsMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DenomOwners(ctx context.Context, in *types.QueryDenomOwnersRequest, opts ...grpc.CallOption) (*types.QueryDenomOwnersResponse, error) {
	out := new(types.QueryDenomOwnersResponse)
	err := c.cc.Invoke(ctx, "/ununifi.wrappedbank.Query/DenomOwners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Balance queries the balance of a single coin for a single account.
	Balance(context.Context, *types.QueryBalanceRequest) (*types.QueryBalanceResponse, error)
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	AllBalances(context.Context, *types.QueryAllBalancesRequest) (*types.QueryAllBalancesResponse, error)
	// TotalSupply queries the total supply of all coins.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	TotalSupply(context.Context, *types.QueryTotalSupplyRequest) (*types.QueryTotalSupplyResponse, error)
	// SupplyOf queries the supply of a single coin.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	SupplyOf(context.Context, *types.QuerySupplyOfRequest) (*types.QuerySupplyOfResponse, error)
	// DenomsMetadata queries the client metadata of a given coin denomination.
	DenomMetadata(context.Context, *types.QueryDenomMetadataRequest) (*types.QueryDenomMetadataResponse, error)
	// DenomsMetadata queries the client metadata for all registered coin
	// denominations.
	DenomsMetadata(context.Context, *types.QueryDenomsMetadataRequest) (*types.QueryDenomsMetadataResponse, error)
	// DenomOwners queries for all account addresses that own a particular token
	// denomination.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	//
	// Since: cosmos-sdk 0.46
	DenomOwners(context.Context, *types.QueryDenomOwnersRequest) (*types.QueryDenomOwnersResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Balance(ctx context.Context, req *types.QueryBalanceRequest) (*types.QueryBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Balance not implemented")
}
func (*UnimplementedQueryServer) AllBalances(ctx context.Context, req *types.QueryAllBalancesRequest) (*types.QueryAllBalancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllBalances not implemented")
}
func (*UnimplementedQueryServer) TotalSupply(ctx context.Context, req *types.QueryTotalSupplyRequest) (*types.QueryTotalSupplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalSupply not implemented")
}
func (*UnimplementedQueryServer) SupplyOf(ctx context.Context, req *types.QuerySupplyOfRequest) (*types.QuerySupplyOfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SupplyOf not implemented")
}
func (*UnimplementedQueryServer) DenomMetadata(ctx context.Context, req *types.QueryDenomMetadataRequest) (*types.QueryDenomMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DenomMetadata not implemented")
}
func (*UnimplementedQueryServer) DenomsMetadata(ctx context.Context, req *types.QueryDenomsMetadataRequest) (*types.QueryDenomsMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DenomsMetadata not implemented")
}
func (*UnimplementedQueryServer) DenomOwners(ctx context.Context, req *types.QueryDenomOwnersRequest) (*types.QueryDenomOwnersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DenomOwners not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Balance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Balance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.wrappedbank.Query/Balance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Balance(ctx, req.(*types.QueryBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryAllBalancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.wrappedbank.Query/AllBalances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllBalances(ctx, req.(*types.QueryAllBalancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryTotalSupplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.wrappedbank.Query/TotalSupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalSupply(ctx, req.(*types.QueryTotalSupplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SupplyOf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QuerySupplyOfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SupplyOf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.wrappedbank.Query/SupplyOf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SupplyOf(ctx, req.(*types.QuerySupplyOfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DenomMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryDenomMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DenomMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.wrappedbank.Query/DenomMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DenomMetadata(ctx, req.(*types.QueryDenomMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DenomsMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryDenomsMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DenomsMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.wrappedbank.Query/DenomsMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DenomsMetadata(ctx, req.(*types.QueryDenomsMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DenomOwners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryDenomOwnersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DenomOwners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.wrappedbank.Query/DenomOwners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DenomOwners(ctx, req.(*types.QueryDenomOwnersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ununifi.wrappedbank.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Balance",
			Handler:    _Query_Balance_Handler,
		},
		{
			MethodName: "AllBalances",
			Handler:    _Query_AllBalances_Handler,
		},
		{
			MethodName: "TotalSupply",
			Handler:    _Query_TotalSupply_Handler,
		},
		{
			MethodName: "SupplyOf",
			Handler:    _Query_SupplyOf_Handler,
		},
		{
			MethodName: "DenomMetadata",
			Handler:    _Query_DenomMetadata_Handler,
		},
		{
			MethodName: "DenomsMetadata",
			Handler:    _Query_DenomsMetadata_Handler,
		},
		{
			MethodName: "DenomOwners",
			Handler:    _Query_DenomOwners_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wrappedbank/query.proto",
}
