package types

import (
	errorsmod "cosmossdk.io/errors"
)

var (
	ErrNftListingAlreadyExists       = errorsmod.Register(ModuleName, 1, "nft listing already exist")
	ErrNftListingDoesNotExist        = errorsmod.Register(ModuleName, 2, "nft listing does not exist")
	ErrBidDoesNotExists              = errorsmod.Register(ModuleName, 3, "nft bid does not exist")
	ErrNotSupportedBidToken          = errorsmod.Register(ModuleName, 4, "not supported bid token")
	ErrNftDoesNotExists              = errorsmod.Register(ModuleName, 5, "specified nft does not exist")
	ErrNotNftOwner                   = errorsmod.Register(ModuleName, 6, "not the owner of nft")
	ErrNotNftListingOwner            = errorsmod.Register(ModuleName, 7, "not the owner of nft listing")
	ErrStatusCannotCancelListing     = errorsmod.Register(ModuleName, 8, "listing status does not allow cancel")
	ErrStatusEndedListing            = errorsmod.Register(ModuleName, 9, "listing is already ended")
	ErrStatusCannotPlaceBid          = errorsmod.Register(ModuleName, 10, "listing status does not allow bid")
	ErrStatusCannotCancelBid         = errorsmod.Register(ModuleName, 11, "listing status does not allow cancel bid")
	ErrStatusCannotSelling           = errorsmod.Register(ModuleName, 12, "listing status does not allow selling")
	ErrInvalidPriceDenom             = errorsmod.Register(ModuleName, 13, "invalid price denom")
	ErrInvalidPriceAmount            = errorsmod.Register(ModuleName, 14, "invalid price amount")
	ErrInvalidDepositDenom           = errorsmod.Register(ModuleName, 15, "invalid deposit denom")
	ErrInvalidDepositAmount          = errorsmod.Register(ModuleName, 16, "invalid deposit amount")
	ErrInvalidBorrowDenom            = errorsmod.Register(ModuleName, 17, "invalid borrow denom")
	ErrInvalidBorrowAmount           = errorsmod.Register(ModuleName, 18, "invalid borrow amount")
	ErrInvalidRepayDenom             = errorsmod.Register(ModuleName, 19, "invalid repay denom")
	ErrInvalidRepayAmount            = errorsmod.Register(ModuleName, 20, "invalid repay amount")
	ErrInvalidInterestAmount         = errorsmod.Register(ModuleName, 21, "invalid interest amount")
	ErrCancelAfterSomeTime           = errorsmod.Register(ModuleName, 22, "cancel allowed after some time")
	ErrRebidAfterSomeTime            = errorsmod.Register(ModuleName, 23, "rebid allowed after some time")
	ErrCannotCancelListingSingleBid  = errorsmod.Register(ModuleName, 24, "cannot cancel only 1 bid of the listing")
	ErrCannotChangeBidBorrowed       = errorsmod.Register(ModuleName, 25, "cannot change borrowed bid")
	ErrCannotCancelBorrowedListing   = errorsmod.Register(ModuleName, 26, "cannot cancel borrowed listing")
	ErrCannotSellingBorrowedListing  = errorsmod.Register(ModuleName, 27, "cannot sell borrowed listing")
	ErrCannotBorrowForLiquidation    = errorsmod.Register(ModuleName, 28, "borrow is not allowed for liquidation")
	ErrCannotReBidForLiquidation     = errorsmod.Register(ModuleName, 29, "rebid is not allowed for liquidation")
	ErrCannotCancelBidForLiquidation = errorsmod.Register(ModuleName, 30, "cancel bid is not allowed for liquidation")
	ErrInsufficientBalance           = errorsmod.Register(ModuleName, 31, "insufficient balance")
	ErrSmallExpiryPeriod             = errorsmod.Register(ModuleName, 32, "bidding period is too short")
	ErrCannotLiquidation             = errorsmod.Register(ModuleName, 33, "cannot liquidation")
	ErrNegativeCollectedAmount       = errorsmod.Register(ModuleName, 34, "negative collected amount")
	ErrNegativeProfit                = errorsmod.Register(ModuleName, 35, "negative profit")
	ErrOwnerCannotPlaceBid           = errorsmod.Register(ModuleName, 36, "owner cannot place bid")
	ErrParsingParams                 = errorsmod.Register(ModuleName, 37, "failed to marshal or unmarshal module params")
)
