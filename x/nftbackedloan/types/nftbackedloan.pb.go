// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nftbackedloan/nftbackedloan.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ListingState int32

const (
	ListingState_UNKNOWN         ListingState = 0
	ListingState_LISTING         ListingState = 1
	ListingState_BIDDING         ListingState = 2
	ListingState_DECIDED_SELLING ListingState = 3
	ListingState_END_LISTING     ListingState = 4
	ListingState_SUCCESSFUL_BID  ListingState = 5
)

var ListingState_name = map[int32]string{
	0: "UNKNOWN",
	1: "LISTING",
	2: "BIDDING",
	3: "DECIDED_SELLING",
	4: "END_LISTING",
	5: "SUCCESSFUL_BID",
}

var ListingState_value = map[string]int32{
	"UNKNOWN":         0,
	"LISTING":         1,
	"BIDDING":         2,
	"DECIDED_SELLING": 3,
	"END_LISTING":     4,
	"SUCCESSFUL_BID":  5,
}

func (x ListingState) String() string {
	return proto.EnumName(ListingState_name, int32(x))
}

func (ListingState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_188e439d87988a34, []int{0}
}

type NftIdentifier struct {
	ClassId string `protobuf:"bytes,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	NftId   string `protobuf:"bytes,2,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
}

func (m *NftIdentifier) Reset()         { *m = NftIdentifier{} }
func (m *NftIdentifier) String() string { return proto.CompactTextString(m) }
func (*NftIdentifier) ProtoMessage()    {}
func (*NftIdentifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_188e439d87988a34, []int{0}
}
func (m *NftIdentifier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NftIdentifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NftIdentifier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NftIdentifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NftIdentifier.Merge(m, src)
}
func (m *NftIdentifier) XXX_Size() int {
	return m.Size()
}
func (m *NftIdentifier) XXX_DiscardUnknown() {
	xxx_messageInfo_NftIdentifier.DiscardUnknown(m)
}

var xxx_messageInfo_NftIdentifier proto.InternalMessageInfo

func (m *NftIdentifier) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *NftIdentifier) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

type BidId struct {
	NftId  *NftIdentifier `protobuf:"bytes,1,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
	Bidder string         `protobuf:"bytes,2,opt,name=bidder,proto3" json:"bidder,omitempty"`
}

func (m *BidId) Reset()         { *m = BidId{} }
func (m *BidId) String() string { return proto.CompactTextString(m) }
func (*BidId) ProtoMessage()    {}
func (*BidId) Descriptor() ([]byte, []int) {
	return fileDescriptor_188e439d87988a34, []int{1}
}
func (m *BidId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BidId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BidId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BidId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BidId.Merge(m, src)
}
func (m *BidId) XXX_Size() int {
	return m.Size()
}
func (m *BidId) XXX_DiscardUnknown() {
	xxx_messageInfo_BidId.DiscardUnknown(m)
}

var xxx_messageInfo_BidId proto.InternalMessageInfo

func (m *BidId) GetNftId() *NftIdentifier {
	if m != nil {
		return m.NftId
	}
	return nil
}

func (m *BidId) GetBidder() string {
	if m != nil {
		return m.Bidder
	}
	return ""
}

type Loan struct {
	NftId NftIdentifier `protobuf:"bytes,1,opt,name=nft_id,json=nftId,proto3" json:"nft_id"`
	Loan  types.Coin    `protobuf:"bytes,2,opt,name=loan,proto3" json:"loan"`
}

func (m *Loan) Reset()         { *m = Loan{} }
func (m *Loan) String() string { return proto.CompactTextString(m) }
func (*Loan) ProtoMessage()    {}
func (*Loan) Descriptor() ([]byte, []int) {
	return fileDescriptor_188e439d87988a34, []int{2}
}
func (m *Loan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Loan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Loan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Loan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Loan.Merge(m, src)
}
func (m *Loan) XXX_Size() int {
	return m.Size()
}
func (m *Loan) XXX_DiscardUnknown() {
	xxx_messageInfo_Loan.DiscardUnknown(m)
}

var xxx_messageInfo_Loan proto.InternalMessageInfo

func (m *Loan) GetNftId() NftIdentifier {
	if m != nil {
		return m.NftId
	}
	return NftIdentifier{}
}

func (m *Loan) GetLoan() types.Coin {
	if m != nil {
		return m.Loan
	}
	return types.Coin{}
}

type ListedClass struct {
	ClassId string   `protobuf:"bytes,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	NftIds  []string `protobuf:"bytes,2,rep,name=nft_ids,json=nftIds,proto3" json:"nft_ids,omitempty"`
}

func (m *ListedClass) Reset()         { *m = ListedClass{} }
func (m *ListedClass) String() string { return proto.CompactTextString(m) }
func (*ListedClass) ProtoMessage()    {}
func (*ListedClass) Descriptor() ([]byte, []int) {
	return fileDescriptor_188e439d87988a34, []int{3}
}
func (m *ListedClass) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListedClass) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListedClass.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListedClass) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListedClass.Merge(m, src)
}
func (m *ListedClass) XXX_Size() int {
	return m.Size()
}
func (m *ListedClass) XXX_DiscardUnknown() {
	xxx_messageInfo_ListedClass.DiscardUnknown(m)
}

var xxx_messageInfo_ListedClass proto.InternalMessageInfo

func (m *ListedClass) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *ListedClass) GetNftIds() []string {
	if m != nil {
		return m.NftIds
	}
	return nil
}

type NftInfo struct {
	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Uri     string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	UriHash string `protobuf:"bytes,3,opt,name=uri_hash,json=uriHash,proto3" json:"uri_hash,omitempty"`
}

func (m *NftInfo) Reset()         { *m = NftInfo{} }
func (m *NftInfo) String() string { return proto.CompactTextString(m) }
func (*NftInfo) ProtoMessage()    {}
func (*NftInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_188e439d87988a34, []int{4}
}
func (m *NftInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NftInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NftInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NftInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NftInfo.Merge(m, src)
}
func (m *NftInfo) XXX_Size() int {
	return m.Size()
}
func (m *NftInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NftInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NftInfo proto.InternalMessageInfo

func (m *NftInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NftInfo) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *NftInfo) GetUriHash() string {
	if m != nil {
		return m.UriHash
	}
	return ""
}

type NftListing struct {
	NftId                NftIdentifier                          `protobuf:"bytes,1,opt,name=nft_id,json=nftId,proto3" json:"nft_id"`
	Owner                string                                 `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	State                ListingState                           `protobuf:"varint,3,opt,name=state,proto3,enum=ununifi.nftbackedloan.ListingState" json:"state,omitempty"`
	BidToken             string                                 `protobuf:"bytes,4,opt,name=bid_token,json=bidToken,proto3" json:"bid_token,omitempty"`
	MinimumDepositRate   github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=minimum_deposit_rate,json=minimumDepositRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"minimum_deposit_rate"`
	AutomaticRefinancing bool                                   `protobuf:"varint,6,opt,name=automatic_refinancing,json=automaticRefinancing,proto3" json:"automatic_refinancing,omitempty"`
	StartedAt            time.Time                              `protobuf:"bytes,7,opt,name=started_at,json=startedAt,proto3,stdtime" json:"started_at" yaml:"started_at"`
	EndAt                time.Time                              `protobuf:"bytes,8,opt,name=end_at,json=endAt,proto3,stdtime" json:"end_at" yaml:"end_at"`
	FullPaymentEndAt     time.Time                              `protobuf:"bytes,9,opt,name=full_payment_end_at,json=fullPaymentEndAt,proto3,stdtime" json:"full_payment_end_at" yaml:"full_payment_end_at"`
	SuccessfulBidEndAt   time.Time                              `protobuf:"bytes,10,opt,name=successful_bid_end_at,json=successfulBidEndAt,proto3,stdtime" json:"successful_bid_end_at" yaml:"successful_bid_end_at"`
	AutoRelistedCount    uint64                                 `protobuf:"varint,11,opt,name=auto_relisted_count,json=autoRelistedCount,proto3" json:"auto_relisted_count,omitempty"`
	CollectedAmount      types.Coin                             `protobuf:"bytes,12,opt,name=collected_amount,json=collectedAmount,proto3" json:"collected_amount"`
	MinimumBiddingPeriod time.Duration                          `protobuf:"bytes,13,opt,name=minimum_bidding_period,json=minimumBiddingPeriod,proto3,stdduration" json:"minimum_bidding_period"`
}

func (m *NftListing) Reset()         { *m = NftListing{} }
func (m *NftListing) String() string { return proto.CompactTextString(m) }
func (*NftListing) ProtoMessage()    {}
func (*NftListing) Descriptor() ([]byte, []int) {
	return fileDescriptor_188e439d87988a34, []int{5}
}
func (m *NftListing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NftListing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NftListing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NftListing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NftListing.Merge(m, src)
}
func (m *NftListing) XXX_Size() int {
	return m.Size()
}
func (m *NftListing) XXX_DiscardUnknown() {
	xxx_messageInfo_NftListing.DiscardUnknown(m)
}

var xxx_messageInfo_NftListing proto.InternalMessageInfo

func (m *NftListing) GetNftId() NftIdentifier {
	if m != nil {
		return m.NftId
	}
	return NftIdentifier{}
}

func (m *NftListing) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *NftListing) GetState() ListingState {
	if m != nil {
		return m.State
	}
	return ListingState_UNKNOWN
}

func (m *NftListing) GetBidToken() string {
	if m != nil {
		return m.BidToken
	}
	return ""
}

func (m *NftListing) GetAutomaticRefinancing() bool {
	if m != nil {
		return m.AutomaticRefinancing
	}
	return false
}

func (m *NftListing) GetStartedAt() time.Time {
	if m != nil {
		return m.StartedAt
	}
	return time.Time{}
}

func (m *NftListing) GetEndAt() time.Time {
	if m != nil {
		return m.EndAt
	}
	return time.Time{}
}

func (m *NftListing) GetFullPaymentEndAt() time.Time {
	if m != nil {
		return m.FullPaymentEndAt
	}
	return time.Time{}
}

func (m *NftListing) GetSuccessfulBidEndAt() time.Time {
	if m != nil {
		return m.SuccessfulBidEndAt
	}
	return time.Time{}
}

func (m *NftListing) GetAutoRelistedCount() uint64 {
	if m != nil {
		return m.AutoRelistedCount
	}
	return 0
}

func (m *NftListing) GetCollectedAmount() types.Coin {
	if m != nil {
		return m.CollectedAmount
	}
	return types.Coin{}
}

func (m *NftListing) GetMinimumBiddingPeriod() time.Duration {
	if m != nil {
		return m.MinimumBiddingPeriod
	}
	return 0
}

type Borrowing struct {
	Amount             types.Coin `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount"`
	PaidInterestAmount types.Coin `protobuf:"bytes,2,opt,name=paid_interest_amount,json=paidInterestAmount,proto3" json:"paid_interest_amount"`
	StartAt            time.Time  `protobuf:"bytes,3,opt,name=start_at,json=startAt,proto3,stdtime" json:"start_at"`
}

func (m *Borrowing) Reset()         { *m = Borrowing{} }
func (m *Borrowing) String() string { return proto.CompactTextString(m) }
func (*Borrowing) ProtoMessage()    {}
func (*Borrowing) Descriptor() ([]byte, []int) {
	return fileDescriptor_188e439d87988a34, []int{6}
}
func (m *Borrowing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Borrowing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Borrowing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Borrowing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Borrowing.Merge(m, src)
}
func (m *Borrowing) XXX_Size() int {
	return m.Size()
}
func (m *Borrowing) XXX_DiscardUnknown() {
	xxx_messageInfo_Borrowing.DiscardUnknown(m)
}

var xxx_messageInfo_Borrowing proto.InternalMessageInfo

func (m *Borrowing) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *Borrowing) GetPaidInterestAmount() types.Coin {
	if m != nil {
		return m.PaidInterestAmount
	}
	return types.Coin{}
}

func (m *Borrowing) GetStartAt() time.Time {
	if m != nil {
		return m.StartAt
	}
	return time.Time{}
}

type NftBid struct {
	Id                 BidId                                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	BidAmount          types.Coin                             `protobuf:"bytes,2,opt,name=bid_amount,json=bidAmount,proto3" json:"bid_amount"`
	DepositAmount      types.Coin                             `protobuf:"bytes,3,opt,name=deposit_amount,json=depositAmount,proto3" json:"deposit_amount"`
	PaidAmount         types.Coin                             `protobuf:"bytes,4,opt,name=paid_amount,json=paidAmount,proto3" json:"paid_amount"`
	BiddingPeriod      time.Time                              `protobuf:"bytes,5,opt,name=bidding_period,json=biddingPeriod,proto3,stdtime" json:"bidding_period"`
	DepositLendingRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=deposit_lending_rate,json=depositLendingRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"deposit_lending_rate"`
	AutomaticPayment   bool                                   `protobuf:"varint,7,opt,name=automatic_payment,json=automaticPayment,proto3" json:"automatic_payment,omitempty"`
	BidTime            time.Time                              `protobuf:"bytes,8,opt,name=bid_time,json=bidTime,proto3,stdtime" json:"bid_time" yaml:"bid_time"`
	InterestAmount     types.Coin                             `protobuf:"bytes,9,opt,name=interest_amount,json=interestAmount,proto3" json:"interest_amount"`
	// lister borrowing bidder info
	Borrowings []Borrowing `protobuf:"bytes,10,rep,name=borrowings,proto3" json:"borrowings"`
}

func (m *NftBid) Reset()         { *m = NftBid{} }
func (m *NftBid) String() string { return proto.CompactTextString(m) }
func (*NftBid) ProtoMessage()    {}
func (*NftBid) Descriptor() ([]byte, []int) {
	return fileDescriptor_188e439d87988a34, []int{7}
}
func (m *NftBid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NftBid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NftBid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NftBid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NftBid.Merge(m, src)
}
func (m *NftBid) XXX_Size() int {
	return m.Size()
}
func (m *NftBid) XXX_DiscardUnknown() {
	xxx_messageInfo_NftBid.DiscardUnknown(m)
}

var xxx_messageInfo_NftBid proto.InternalMessageInfo

func (m *NftBid) GetId() BidId {
	if m != nil {
		return m.Id
	}
	return BidId{}
}

func (m *NftBid) GetBidAmount() types.Coin {
	if m != nil {
		return m.BidAmount
	}
	return types.Coin{}
}

func (m *NftBid) GetDepositAmount() types.Coin {
	if m != nil {
		return m.DepositAmount
	}
	return types.Coin{}
}

func (m *NftBid) GetPaidAmount() types.Coin {
	if m != nil {
		return m.PaidAmount
	}
	return types.Coin{}
}

func (m *NftBid) GetBiddingPeriod() time.Time {
	if m != nil {
		return m.BiddingPeriod
	}
	return time.Time{}
}

func (m *NftBid) GetAutomaticPayment() bool {
	if m != nil {
		return m.AutomaticPayment
	}
	return false
}

func (m *NftBid) GetBidTime() time.Time {
	if m != nil {
		return m.BidTime
	}
	return time.Time{}
}

func (m *NftBid) GetInterestAmount() types.Coin {
	if m != nil {
		return m.InterestAmount
	}
	return types.Coin{}
}

func (m *NftBid) GetBorrowings() []Borrowing {
	if m != nil {
		return m.Borrowings
	}
	return nil
}

type PaymentStatus struct {
	NftId            NftIdentifier                          `protobuf:"bytes,1,opt,name=nft_id,json=nftId,proto3" json:"nft_id"`
	Bidder           string                                 `protobuf:"bytes,2,opt,name=bidder,proto3" json:"bidder,omitempty"`
	Amount           types.Coin                             `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
	AutomaticPayment bool                                   `protobuf:"varint,4,opt,name=automatic_payment,json=automaticPayment,proto3" json:"automatic_payment,omitempty"`
	PaidAmount       github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=paid_amount,json=paidAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"paid_amount" yaml:"paid_amount"`
	BidTime          time.Time                              `protobuf:"bytes,6,opt,name=bid_time,json=bidTime,proto3,stdtime" json:"bid_time" yaml:"bid_time"`
	State            ListingState                           `protobuf:"varint,7,opt,name=state,proto3,enum=ununifi.nftbackedloan.ListingState" json:"state,omitempty"`
	AllPaid          bool                                   `protobuf:"varint,8,opt,name=all_paid,json=allPaid,proto3" json:"all_paid,omitempty"`
}

func (m *PaymentStatus) Reset()         { *m = PaymentStatus{} }
func (m *PaymentStatus) String() string { return proto.CompactTextString(m) }
func (*PaymentStatus) ProtoMessage()    {}
func (*PaymentStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_188e439d87988a34, []int{8}
}
func (m *PaymentStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaymentStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaymentStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PaymentStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentStatus.Merge(m, src)
}
func (m *PaymentStatus) XXX_Size() int {
	return m.Size()
}
func (m *PaymentStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentStatus.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentStatus proto.InternalMessageInfo

func (m *PaymentStatus) GetNftId() NftIdentifier {
	if m != nil {
		return m.NftId
	}
	return NftIdentifier{}
}

func (m *PaymentStatus) GetBidder() string {
	if m != nil {
		return m.Bidder
	}
	return ""
}

func (m *PaymentStatus) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *PaymentStatus) GetAutomaticPayment() bool {
	if m != nil {
		return m.AutomaticPayment
	}
	return false
}

func (m *PaymentStatus) GetBidTime() time.Time {
	if m != nil {
		return m.BidTime
	}
	return time.Time{}
}

func (m *PaymentStatus) GetState() ListingState {
	if m != nil {
		return m.State
	}
	return ListingState_UNKNOWN
}

func (m *PaymentStatus) GetAllPaid() bool {
	if m != nil {
		return m.AllPaid
	}
	return false
}

type Liquidation struct {
	Amount          types.Coin `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount"`
	LiquidationDate time.Time  `protobuf:"bytes,2,opt,name=liquidation_date,json=liquidationDate,proto3,stdtime" json:"liquidation_date"`
}

func (m *Liquidation) Reset()         { *m = Liquidation{} }
func (m *Liquidation) String() string { return proto.CompactTextString(m) }
func (*Liquidation) ProtoMessage()    {}
func (*Liquidation) Descriptor() ([]byte, []int) {
	return fileDescriptor_188e439d87988a34, []int{9}
}
func (m *Liquidation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Liquidation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Liquidation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Liquidation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Liquidation.Merge(m, src)
}
func (m *Liquidation) XXX_Size() int {
	return m.Size()
}
func (m *Liquidation) XXX_DiscardUnknown() {
	xxx_messageInfo_Liquidation.DiscardUnknown(m)
}

var xxx_messageInfo_Liquidation proto.InternalMessageInfo

func (m *Liquidation) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *Liquidation) GetLiquidationDate() time.Time {
	if m != nil {
		return m.LiquidationDate
	}
	return time.Time{}
}

type Liquidations struct {
	Liquidation     *Liquidation  `protobuf:"bytes,1,opt,name=liquidation,proto3" json:"liquidation,omitempty"`
	NextLiquidation []Liquidation `protobuf:"bytes,2,rep,name=next_liquidation,json=nextLiquidation,proto3" json:"next_liquidation"`
}

func (m *Liquidations) Reset()         { *m = Liquidations{} }
func (m *Liquidations) String() string { return proto.CompactTextString(m) }
func (*Liquidations) ProtoMessage()    {}
func (*Liquidations) Descriptor() ([]byte, []int) {
	return fileDescriptor_188e439d87988a34, []int{10}
}
func (m *Liquidations) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Liquidations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Liquidations.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Liquidations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Liquidations.Merge(m, src)
}
func (m *Liquidations) XXX_Size() int {
	return m.Size()
}
func (m *Liquidations) XXX_DiscardUnknown() {
	xxx_messageInfo_Liquidations.DiscardUnknown(m)
}

var xxx_messageInfo_Liquidations proto.InternalMessageInfo

func (m *Liquidations) GetLiquidation() *Liquidation {
	if m != nil {
		return m.Liquidation
	}
	return nil
}

func (m *Liquidations) GetNextLiquidation() []Liquidation {
	if m != nil {
		return m.NextLiquidation
	}
	return nil
}

func init() {
	proto.RegisterEnum("ununifi.nftbackedloan.ListingState", ListingState_name, ListingState_value)
	proto.RegisterType((*NftIdentifier)(nil), "ununifi.nftbackedloan.NftIdentifier")
	proto.RegisterType((*BidId)(nil), "ununifi.nftbackedloan.BidId")
	proto.RegisterType((*Loan)(nil), "ununifi.nftbackedloan.Loan")
	proto.RegisterType((*ListedClass)(nil), "ununifi.nftbackedloan.ListedClass")
	proto.RegisterType((*NftInfo)(nil), "ununifi.nftbackedloan.NftInfo")
	proto.RegisterType((*NftListing)(nil), "ununifi.nftbackedloan.NftListing")
	proto.RegisterType((*Borrowing)(nil), "ununifi.nftbackedloan.Borrowing")
	proto.RegisterType((*NftBid)(nil), "ununifi.nftbackedloan.NftBid")
	proto.RegisterType((*PaymentStatus)(nil), "ununifi.nftbackedloan.PaymentStatus")
	proto.RegisterType((*Liquidation)(nil), "ununifi.nftbackedloan.Liquidation")
	proto.RegisterType((*Liquidations)(nil), "ununifi.nftbackedloan.Liquidations")
}

func init() { proto.RegisterFile("nftbackedloan/nftbackedloan.proto", fileDescriptor_188e439d87988a34) }

var fileDescriptor_188e439d87988a34 = []byte{
	// 1306 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0x4b, 0x6f, 0xdb, 0xc6,
	0x16, 0x36, 0xf5, 0xf6, 0x51, 0x6c, 0x29, 0x13, 0x3b, 0x57, 0x76, 0x72, 0x65, 0x5f, 0xde, 0x8b,
	0xc0, 0xb8, 0x45, 0x28, 0xc4, 0x59, 0x14, 0x7d, 0xa0, 0xad, 0x65, 0xda, 0x8d, 0x12, 0x41, 0x49,
	0xa9, 0x18, 0x7d, 0xa0, 0x00, 0x41, 0x91, 0x23, 0x79, 0x10, 0x71, 0x46, 0x21, 0x87, 0x4d, 0xb2,
	0xe9, 0x6f, 0xc8, 0xae, 0xfd, 0x17, 0xdd, 0xf4, 0x47, 0x64, 0x53, 0x20, 0xe8, 0xa2, 0x08, 0xba,
	0x70, 0xdb, 0xe4, 0x1f, 0xe4, 0x17, 0x14, 0xf3, 0xa0, 0x1e, 0x86, 0x5d, 0xcb, 0x81, 0x57, 0xd6,
	0xe1, 0x39, 0xe7, 0x3b, 0xcf, 0xf9, 0x66, 0x0c, 0xff, 0xa1, 0x7d, 0xde, 0xf3, 0xfc, 0x47, 0x38,
	0x18, 0x32, 0x8f, 0x36, 0x66, 0x24, 0x6b, 0x14, 0x31, 0xce, 0xd0, 0x6a, 0x42, 0x13, 0x4a, 0xfa,
	0xc4, 0x9a, 0x51, 0xae, 0xaf, 0x0c, 0xd8, 0x80, 0x49, 0x8b, 0x86, 0xf8, 0xa5, 0x8c, 0xd7, 0x37,
	0x06, 0x8c, 0x0d, 0x86, 0xb8, 0x21, 0xa5, 0x5e, 0xd2, 0x6f, 0x70, 0x12, 0xe2, 0x98, 0x7b, 0xe1,
	0x48, 0x1b, 0xd4, 0x8f, 0x1b, 0x04, 0x49, 0xe4, 0x71, 0xc2, 0x68, 0xaa, 0xf7, 0x59, 0x1c, 0xb2,
	0xb8, 0xd1, 0xf3, 0x62, 0xdc, 0xf8, 0xee, 0x56, 0x0f, 0x73, 0xef, 0x56, 0xc3, 0x67, 0x24, 0xd5,
	0xaf, 0x29, 0xbd, 0xab, 0x22, 0x2b, 0x41, 0xa9, 0xcc, 0x1d, 0x58, 0xea, 0xf4, 0x79, 0x2b, 0xc0,
	0x94, 0x93, 0x3e, 0xc1, 0x11, 0x5a, 0x83, 0x92, 0x3f, 0xf4, 0xe2, 0xd8, 0x25, 0x41, 0xcd, 0xd8,
	0x34, 0xb6, 0x16, 0x9d, 0xa2, 0x94, 0x5b, 0x01, 0x5a, 0x85, 0x02, 0xed, 0x73, 0xa1, 0xc8, 0x48,
	0x45, 0x9e, 0x0a, 0x4f, 0xf3, 0x5b, 0xc8, 0x37, 0x49, 0xd0, 0x0a, 0xd0, 0x47, 0x63, 0xbd, 0x70,
	0x2c, 0x6f, 0xff, 0xcf, 0x3a, 0xb1, 0x0b, 0xd6, 0x4c, 0x40, 0x8d, 0x82, 0xae, 0x42, 0xa1, 0x47,
	0x82, 0x00, 0x47, 0x1a, 0x5c, 0x4b, 0xe6, 0xf7, 0x90, 0x6b, 0x33, 0x8f, 0xa2, 0x9d, 0x77, 0x01,
	0x6f, 0xe6, 0x5e, 0x1c, 0x6d, 0x2c, 0xa4, 0x21, 0x6e, 0x43, 0x4e, 0x98, 0xc8, 0x00, 0xe5, 0xed,
	0x35, 0x4b, 0x37, 0x42, 0x74, 0xcd, 0xd2, 0x5d, 0xb3, 0x76, 0x19, 0xa1, 0xda, 0x4b, 0x1a, 0x9b,
	0x3b, 0x50, 0x6e, 0x93, 0x98, 0xe3, 0x60, 0x57, 0x74, 0xe1, 0x9f, 0xda, 0xf3, 0x2f, 0x28, 0xaa,
	0x0c, 0xe3, 0x5a, 0x66, 0x33, 0x2b, 0x4a, 0x90, 0x61, 0x63, 0x73, 0x1f, 0x8a, 0x22, 0x2b, 0xda,
	0x67, 0x68, 0x19, 0x32, 0x63, 0xc7, 0x0c, 0x09, 0x50, 0x15, 0xb2, 0x49, 0x44, 0x74, 0xc9, 0xe2,
	0xa7, 0x08, 0x90, 0x44, 0xc4, 0x3d, 0xf4, 0xe2, 0xc3, 0x5a, 0x56, 0x05, 0x48, 0x22, 0x72, 0xc7,
	0x8b, 0x0f, 0xcd, 0x5f, 0x8a, 0x00, 0x9d, 0x3e, 0x17, 0xe9, 0x10, 0x3a, 0xb8, 0x88, 0x8e, 0xac,
	0x40, 0x9e, 0x3d, 0xa1, 0xe3, 0x9e, 0x2b, 0x01, 0x7d, 0x00, 0xf9, 0x98, 0x7b, 0x1c, 0xcb, 0xf8,
	0xcb, 0xdb, 0xff, 0x3d, 0x05, 0x57, 0xe7, 0xd1, 0x15, 0xa6, 0x8e, 0xf2, 0x40, 0xd7, 0x60, 0xb1,
	0x47, 0x02, 0x97, 0xb3, 0x47, 0x98, 0xd6, 0x72, 0x12, 0xb4, 0xd4, 0x23, 0xc1, 0x43, 0x21, 0x23,
	0x0a, 0x2b, 0x21, 0xa1, 0x24, 0x4c, 0x42, 0x37, 0xc0, 0x23, 0x16, 0x13, 0xee, 0x46, 0x22, 0x4c,
	0x5e, 0xd8, 0x35, 0x3f, 0x16, 0x89, 0xfd, 0x7e, 0xb4, 0x71, 0x63, 0x40, 0xf8, 0x61, 0xd2, 0xb3,
	0x7c, 0x16, 0xea, 0x55, 0xd5, 0x7f, 0x6e, 0xc6, 0xc1, 0xa3, 0x06, 0x7f, 0x36, 0xc2, 0xb1, 0x65,
	0x63, 0xff, 0xd7, 0x9f, 0x6f, 0x82, 0x1e, 0xa0, 0x8d, 0x7d, 0x07, 0x69, 0x64, 0x5b, 0x01, 0x3b,
	0x22, 0x99, 0xdb, 0xb0, 0xea, 0x25, 0x9c, 0x85, 0x1e, 0x27, 0xbe, 0x1b, 0xe1, 0x3e, 0xa1, 0x1e,
	0xf5, 0x09, 0x1d, 0xd4, 0x0a, 0x9b, 0xc6, 0x56, 0xc9, 0x59, 0x19, 0x2b, 0x9d, 0x89, 0x0e, 0x7d,
	0x05, 0x10, 0x73, 0x2f, 0xe2, 0x38, 0x70, 0x3d, 0x5e, 0x2b, 0xca, 0xce, 0xae, 0x5b, 0xea, 0x00,
	0x5a, 0xe9, 0x01, 0xb4, 0x1e, 0xa6, 0x27, 0xb4, 0xf9, 0x6f, 0x91, 0xf6, 0xdb, 0xa3, 0x8d, 0xcb,
	0xcf, 0xbc, 0x70, 0xf8, 0xa1, 0x39, 0xf1, 0x35, 0x9f, 0xff, 0xb1, 0x61, 0x38, 0x8b, 0xfa, 0xc3,
	0x0e, 0x47, 0x6d, 0x28, 0x60, 0x2a, 0x51, 0x4b, 0x67, 0xa2, 0xae, 0x69, 0xd4, 0x25, 0x85, 0xaa,
	0xfc, 0x14, 0x62, 0x1e, 0x53, 0x81, 0xf6, 0x18, 0xae, 0xf4, 0x93, 0xe1, 0xd0, 0x1d, 0x79, 0xcf,
	0x42, 0x4c, 0xb9, 0xab, 0xa1, 0x17, 0xcf, 0x84, 0xbe, 0xa1, 0xa1, 0xd7, 0x15, 0xf4, 0x09, 0x20,
	0x2a, 0x4e, 0x55, 0x68, 0x1e, 0x28, 0xc5, 0x9e, 0x0c, 0xf9, 0x04, 0x56, 0xe3, 0xc4, 0xf7, 0x71,
	0x1c, 0xf7, 0x93, 0xa1, 0x2b, 0xe6, 0xac, 0x83, 0xc2, 0x99, 0x41, 0xb7, 0x74, 0xd0, 0xeb, 0xba,
	0x4b, 0x27, 0xc1, 0xa8, 0xb0, 0x68, 0xa2, 0x6b, 0x92, 0x40, 0x05, 0xb6, 0xe0, 0x8a, 0x98, 0x95,
	0x1b, 0xe1, 0xa1, 0x3c, 0x8a, 0xae, 0xcf, 0x12, 0xca, 0x6b, 0xe5, 0x4d, 0x63, 0x2b, 0xe7, 0x5c,
	0x16, 0x2a, 0x47, 0x6b, 0x76, 0x85, 0x02, 0xdd, 0x85, 0xaa, 0xcf, 0x86, 0x43, 0xec, 0xcb, 0x49,
	0x84, 0xd2, 0xf8, 0xd2, 0x7c, 0x87, 0xbe, 0x32, 0x76, 0xdc, 0x91, 0x7e, 0xe8, 0x6b, 0xb8, 0x9a,
	0x2e, 0xad, 0x60, 0x24, 0x42, 0x07, 0xee, 0x08, 0x47, 0x84, 0x05, 0xb5, 0x25, 0x8d, 0x78, 0xbc,
	0x6a, 0x5b, 0x93, 0x73, 0xb3, 0x24, 0x10, 0x7f, 0x14, 0x45, 0xa5, 0x7b, 0xdf, 0x54, 0x08, 0x0f,
	0x24, 0x80, 0xf9, 0xca, 0x80, 0xc5, 0x26, 0x8b, 0x22, 0xf6, 0x44, 0x2c, 0xde, 0xfb, 0x50, 0xd0,
	0xa9, 0x1a, 0xf3, 0xa5, 0xaa, 0xcd, 0xd1, 0x17, 0xb0, 0x32, 0xf2, 0x48, 0xe0, 0x12, 0xca, 0x71,
	0x84, 0x63, 0x9e, 0x56, 0x3c, 0x27, 0xcd, 0x21, 0xe1, 0xdc, 0xd2, 0xbe, 0xba, 0xe8, 0x4f, 0xa1,
	0x24, 0xf7, 0x56, 0x0c, 0x37, 0x7b, 0xe6, 0x70, 0x65, 0x9d, 0x72, 0x78, 0x45, 0xe9, 0xb5, 0xc3,
	0xcd, 0xdf, 0xf2, 0x50, 0xe8, 0xf4, 0x79, 0x93, 0x04, 0x68, 0x7b, 0x4c, 0x79, 0xe5, 0xed, 0xeb,
	0xa7, 0x50, 0x89, 0xbc, 0x3f, 0x74, 0x3e, 0x82, 0x16, 0x3f, 0x01, 0x10, 0x7b, 0x71, 0xbe, 0x42,
	0x04, 0xf3, 0xe8, 0xfc, 0xf7, 0x61, 0x39, 0x65, 0x18, 0x8d, 0x91, 0x9d, 0x0f, 0x63, 0x49, 0xbb,
	0x69, 0x9c, 0xcf, 0xa0, 0x2c, 0x5b, 0xab, 0x41, 0x72, 0xf3, 0x81, 0x80, 0xf0, 0xd1, 0x08, 0xf7,
	0x60, 0xf9, 0xd8, 0xda, 0xe4, 0xcf, 0xd1, 0xcf, 0xa5, 0xde, 0xf4, 0xc2, 0x08, 0x02, 0x4d, 0xcb,
	0x1a, 0x62, 0x2a, 0x41, 0x25, 0x81, 0x16, 0x2e, 0x82, 0x40, 0x35, 0x72, 0x5b, 0x01, 0x4b, 0x02,
	0x7d, 0x0f, 0x2e, 0x4f, 0x08, 0x54, 0x73, 0x84, 0xa4, 0xc4, 0x92, 0x53, 0x1d, 0x2b, 0x34, 0x45,
	0x20, 0x07, 0x4a, 0x92, 0xfa, 0x49, 0x88, 0xe7, 0x20, 0xb8, 0x6b, 0x9a, 0x10, 0x2a, 0x8a, 0x10,
	0x52, 0x4f, 0xc5, 0x01, 0x45, 0x71, 0x65, 0x90, 0x10, 0xa3, 0x3b, 0x50, 0x39, 0xbe, 0xd5, 0x8b,
	0xf3, 0xcd, 0x60, 0x99, 0xcc, 0x6e, 0xf4, 0x3e, 0x40, 0x2f, 0x3d, 0x6a, 0x71, 0x0d, 0x36, 0xb3,
	0x5b, 0xe5, 0xed, 0xcd, 0xd3, 0xb6, 0x31, 0x35, 0x4c, 0xe7, 0x39, 0xf1, 0x34, 0xff, 0xca, 0xc2,
	0x92, 0xae, 0x58, 0x5c, 0x7c, 0x49, 0x7c, 0x11, 0xd7, 0xf0, 0x29, 0x6f, 0x9f, 0x29, 0x4a, 0xc8,
	0x9e, 0x8f, 0x12, 0x4e, 0x1c, 0x5c, 0xee, 0x94, 0xc1, 0xe1, 0xd9, 0x25, 0x57, 0xb7, 0xb1, 0x7d,
	0x8e, 0x65, 0x6a, 0x51, 0xfe, 0xf6, 0x68, 0x03, 0xa9, 0x49, 0x4e, 0x41, 0x99, 0x33, 0x27, 0x61,
	0x7a, 0x3f, 0x0a, 0x17, 0xb4, 0x1f, 0xe3, 0x97, 0x4a, 0xf1, 0xdc, 0x2f, 0x95, 0x35, 0x28, 0x79,
	0xf2, 0xe6, 0x23, 0x81, 0x5c, 0xd7, 0x92, 0x53, 0xf4, 0xc4, 0x7d, 0x47, 0x02, 0xf3, 0x07, 0x43,
	0xbc, 0xf9, 0x1e, 0x27, 0x24, 0x90, 0x3c, 0xfe, 0xee, 0xcc, 0x7c, 0x1f, 0xaa, 0xc3, 0x09, 0x8e,
	0x1b, 0x88, 0x4c, 0x33, 0xe7, 0x38, 0xfe, 0x95, 0x29, 0x6f, 0xdb, 0xe3, 0xd8, 0xfc, 0xc9, 0x80,
	0x4b, 0x53, 0x99, 0xc5, 0xe8, 0x2e, 0x94, 0xa7, 0x6c, 0x74, 0x7e, 0xe6, 0xa9, 0x6d, 0x18, 0x5b,
	0xca, 0x44, 0x0d, 0x67, 0xda, 0x19, 0x75, 0xa1, 0x4a, 0xf1, 0x53, 0xee, 0x4e, 0x03, 0x66, 0xe4,
	0x41, 0x99, 0x17, 0x70, 0xc1, 0xa9, 0x08, 0x84, 0xa9, 0xcf, 0xff, 0x67, 0x22, 0xe1, 0x49, 0xf7,
	0x51, 0x19, 0x8a, 0x07, 0x9d, 0x7b, 0x9d, 0xfb, 0x5f, 0x76, 0xaa, 0x0b, 0x42, 0x68, 0xb7, 0xba,
	0x0f, 0x5b, 0x9d, 0xcf, 0xab, 0x86, 0x10, 0x9a, 0x2d, 0xdb, 0x16, 0x42, 0x06, 0x5d, 0x81, 0x8a,
	0xbd, 0xb7, 0xdb, 0xb2, 0xf7, 0x6c, 0xb7, 0xbb, 0xd7, 0x6e, 0x8b, 0x8f, 0x59, 0x54, 0x81, 0xf2,
	0x5e, 0xc7, 0x76, 0x53, 0x97, 0x1c, 0x42, 0xb0, 0xdc, 0x3d, 0xd8, 0xdd, 0xdd, 0xeb, 0x76, 0xf7,
	0x0f, 0xda, 0x6e, 0xb3, 0x65, 0x57, 0xf3, 0xcd, 0x3b, 0x2f, 0x5e, 0xd7, 0x8d, 0x97, 0xaf, 0xeb,
	0xc6, 0x9f, 0xaf, 0xeb, 0xc6, 0xf3, 0x37, 0xf5, 0x85, 0x97, 0x6f, 0xea, 0x0b, 0xaf, 0xde, 0xd4,
	0x17, 0xbe, 0xb1, 0xa6, 0x56, 0xf9, 0x80, 0x1e, 0x50, 0xb2, 0x4f, 0x1a, 0xfe, 0xa1, 0x47, 0x68,
	0xe3, 0xe9, 0xec, 0xff, 0x70, 0x6a, 0xad, 0x7b, 0x05, 0x39, 0x9b, 0xdb, 0x7f, 0x07, 0x00, 0x00,
	0xff, 0xff, 0x6b, 0xdb, 0x24, 0x9e, 0xef, 0x0d, 0x00, 0x00,
}

func (m *NftIdentifier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NftIdentifier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NftIdentifier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintNftbackedloan(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintNftbackedloan(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BidId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BidId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BidId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintNftbackedloan(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0x12
	}
	if m.NftId != nil {
		{
			size, err := m.NftId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNftbackedloan(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Loan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Loan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Loan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Loan.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNftbackedloan(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.NftId.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNftbackedloan(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ListedClass) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListedClass) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListedClass) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NftIds) > 0 {
		for iNdEx := len(m.NftIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.NftIds[iNdEx])
			copy(dAtA[i:], m.NftIds[iNdEx])
			i = encodeVarintNftbackedloan(dAtA, i, uint64(len(m.NftIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintNftbackedloan(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NftInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NftInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NftInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UriHash) > 0 {
		i -= len(m.UriHash)
		copy(dAtA[i:], m.UriHash)
		i = encodeVarintNftbackedloan(dAtA, i, uint64(len(m.UriHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintNftbackedloan(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintNftbackedloan(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NftListing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NftListing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NftListing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n4, err4 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.MinimumBiddingPeriod, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.MinimumBiddingPeriod):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintNftbackedloan(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x6a
	{
		size, err := m.CollectedAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNftbackedloan(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	if m.AutoRelistedCount != 0 {
		i = encodeVarintNftbackedloan(dAtA, i, uint64(m.AutoRelistedCount))
		i--
		dAtA[i] = 0x58
	}
	n6, err6 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.SuccessfulBidEndAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.SuccessfulBidEndAt):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintNftbackedloan(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0x52
	n7, err7 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.FullPaymentEndAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.FullPaymentEndAt):])
	if err7 != nil {
		return 0, err7
	}
	i -= n7
	i = encodeVarintNftbackedloan(dAtA, i, uint64(n7))
	i--
	dAtA[i] = 0x4a
	n8, err8 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.EndAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndAt):])
	if err8 != nil {
		return 0, err8
	}
	i -= n8
	i = encodeVarintNftbackedloan(dAtA, i, uint64(n8))
	i--
	dAtA[i] = 0x42
	n9, err9 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.StartedAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartedAt):])
	if err9 != nil {
		return 0, err9
	}
	i -= n9
	i = encodeVarintNftbackedloan(dAtA, i, uint64(n9))
	i--
	dAtA[i] = 0x3a
	if m.AutomaticRefinancing {
		i--
		if m.AutomaticRefinancing {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.MinimumDepositRate.Size()
		i -= size
		if _, err := m.MinimumDepositRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintNftbackedloan(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.BidToken) > 0 {
		i -= len(m.BidToken)
		copy(dAtA[i:], m.BidToken)
		i = encodeVarintNftbackedloan(dAtA, i, uint64(len(m.BidToken)))
		i--
		dAtA[i] = 0x22
	}
	if m.State != 0 {
		i = encodeVarintNftbackedloan(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintNftbackedloan(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.NftId.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNftbackedloan(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Borrowing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Borrowing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Borrowing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n11, err11 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.StartAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartAt):])
	if err11 != nil {
		return 0, err11
	}
	i -= n11
	i = encodeVarintNftbackedloan(dAtA, i, uint64(n11))
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.PaidInterestAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNftbackedloan(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNftbackedloan(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NftBid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NftBid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NftBid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Borrowings) > 0 {
		for iNdEx := len(m.Borrowings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Borrowings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNftbackedloan(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	{
		size, err := m.InterestAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNftbackedloan(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	n15, err15 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.BidTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.BidTime):])
	if err15 != nil {
		return 0, err15
	}
	i -= n15
	i = encodeVarintNftbackedloan(dAtA, i, uint64(n15))
	i--
	dAtA[i] = 0x42
	if m.AutomaticPayment {
		i--
		if m.AutomaticPayment {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	{
		size := m.DepositLendingRate.Size()
		i -= size
		if _, err := m.DepositLendingRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintNftbackedloan(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	n16, err16 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.BiddingPeriod, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.BiddingPeriod):])
	if err16 != nil {
		return 0, err16
	}
	i -= n16
	i = encodeVarintNftbackedloan(dAtA, i, uint64(n16))
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.PaidAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNftbackedloan(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.DepositAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNftbackedloan(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.BidAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNftbackedloan(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNftbackedloan(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PaymentStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaymentStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaymentStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AllPaid {
		i--
		if m.AllPaid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.State != 0 {
		i = encodeVarintNftbackedloan(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x38
	}
	n21, err21 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.BidTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.BidTime):])
	if err21 != nil {
		return 0, err21
	}
	i -= n21
	i = encodeVarintNftbackedloan(dAtA, i, uint64(n21))
	i--
	dAtA[i] = 0x32
	{
		size := m.PaidAmount.Size()
		i -= size
		if _, err := m.PaidAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintNftbackedloan(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.AutomaticPayment {
		i--
		if m.AutomaticPayment {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNftbackedloan(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintNftbackedloan(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.NftId.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNftbackedloan(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Liquidation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Liquidation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Liquidation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n24, err24 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.LiquidationDate, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LiquidationDate):])
	if err24 != nil {
		return 0, err24
	}
	i -= n24
	i = encodeVarintNftbackedloan(dAtA, i, uint64(n24))
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNftbackedloan(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Liquidations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Liquidations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Liquidations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NextLiquidation) > 0 {
		for iNdEx := len(m.NextLiquidation) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NextLiquidation[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNftbackedloan(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Liquidation != nil {
		{
			size, err := m.Liquidation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNftbackedloan(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintNftbackedloan(dAtA []byte, offset int, v uint64) int {
	offset -= sovNftbackedloan(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NftIdentifier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovNftbackedloan(uint64(l))
	}
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovNftbackedloan(uint64(l))
	}
	return n
}

func (m *BidId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NftId != nil {
		l = m.NftId.Size()
		n += 1 + l + sovNftbackedloan(uint64(l))
	}
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovNftbackedloan(uint64(l))
	}
	return n
}

func (m *Loan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NftId.Size()
	n += 1 + l + sovNftbackedloan(uint64(l))
	l = m.Loan.Size()
	n += 1 + l + sovNftbackedloan(uint64(l))
	return n
}

func (m *ListedClass) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovNftbackedloan(uint64(l))
	}
	if len(m.NftIds) > 0 {
		for _, s := range m.NftIds {
			l = len(s)
			n += 1 + l + sovNftbackedloan(uint64(l))
		}
	}
	return n
}

func (m *NftInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovNftbackedloan(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovNftbackedloan(uint64(l))
	}
	l = len(m.UriHash)
	if l > 0 {
		n += 1 + l + sovNftbackedloan(uint64(l))
	}
	return n
}

func (m *NftListing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NftId.Size()
	n += 1 + l + sovNftbackedloan(uint64(l))
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovNftbackedloan(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovNftbackedloan(uint64(m.State))
	}
	l = len(m.BidToken)
	if l > 0 {
		n += 1 + l + sovNftbackedloan(uint64(l))
	}
	l = m.MinimumDepositRate.Size()
	n += 1 + l + sovNftbackedloan(uint64(l))
	if m.AutomaticRefinancing {
		n += 2
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartedAt)
	n += 1 + l + sovNftbackedloan(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndAt)
	n += 1 + l + sovNftbackedloan(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.FullPaymentEndAt)
	n += 1 + l + sovNftbackedloan(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.SuccessfulBidEndAt)
	n += 1 + l + sovNftbackedloan(uint64(l))
	if m.AutoRelistedCount != 0 {
		n += 1 + sovNftbackedloan(uint64(m.AutoRelistedCount))
	}
	l = m.CollectedAmount.Size()
	n += 1 + l + sovNftbackedloan(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.MinimumBiddingPeriod)
	n += 1 + l + sovNftbackedloan(uint64(l))
	return n
}

func (m *Borrowing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovNftbackedloan(uint64(l))
	l = m.PaidInterestAmount.Size()
	n += 1 + l + sovNftbackedloan(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartAt)
	n += 1 + l + sovNftbackedloan(uint64(l))
	return n
}

func (m *NftBid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Id.Size()
	n += 1 + l + sovNftbackedloan(uint64(l))
	l = m.BidAmount.Size()
	n += 1 + l + sovNftbackedloan(uint64(l))
	l = m.DepositAmount.Size()
	n += 1 + l + sovNftbackedloan(uint64(l))
	l = m.PaidAmount.Size()
	n += 1 + l + sovNftbackedloan(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.BiddingPeriod)
	n += 1 + l + sovNftbackedloan(uint64(l))
	l = m.DepositLendingRate.Size()
	n += 1 + l + sovNftbackedloan(uint64(l))
	if m.AutomaticPayment {
		n += 2
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.BidTime)
	n += 1 + l + sovNftbackedloan(uint64(l))
	l = m.InterestAmount.Size()
	n += 1 + l + sovNftbackedloan(uint64(l))
	if len(m.Borrowings) > 0 {
		for _, e := range m.Borrowings {
			l = e.Size()
			n += 1 + l + sovNftbackedloan(uint64(l))
		}
	}
	return n
}

func (m *PaymentStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NftId.Size()
	n += 1 + l + sovNftbackedloan(uint64(l))
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovNftbackedloan(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovNftbackedloan(uint64(l))
	if m.AutomaticPayment {
		n += 2
	}
	l = m.PaidAmount.Size()
	n += 1 + l + sovNftbackedloan(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.BidTime)
	n += 1 + l + sovNftbackedloan(uint64(l))
	if m.State != 0 {
		n += 1 + sovNftbackedloan(uint64(m.State))
	}
	if m.AllPaid {
		n += 2
	}
	return n
}

func (m *Liquidation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovNftbackedloan(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LiquidationDate)
	n += 1 + l + sovNftbackedloan(uint64(l))
	return n
}

func (m *Liquidations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Liquidation != nil {
		l = m.Liquidation.Size()
		n += 1 + l + sovNftbackedloan(uint64(l))
	}
	if len(m.NextLiquidation) > 0 {
		for _, e := range m.NextLiquidation {
			l = e.Size()
			n += 1 + l + sovNftbackedloan(uint64(l))
		}
	}
	return n
}

func sovNftbackedloan(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNftbackedloan(x uint64) (n int) {
	return sovNftbackedloan(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NftIdentifier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNftbackedloan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NftIdentifier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NftIdentifier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftbackedloan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftbackedloan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNftbackedloan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BidId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNftbackedloan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BidId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BidId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftbackedloan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NftId == nil {
				m.NftId = &NftIdentifier{}
			}
			if err := m.NftId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftbackedloan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNftbackedloan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Loan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNftbackedloan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Loan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Loan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftbackedloan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NftId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftbackedloan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Loan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNftbackedloan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListedClass) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNftbackedloan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListedClass: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListedClass: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftbackedloan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftbackedloan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftIds = append(m.NftIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNftbackedloan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NftInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNftbackedloan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NftInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NftInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftbackedloan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftbackedloan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UriHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftbackedloan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UriHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNftbackedloan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NftListing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNftbackedloan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NftListing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NftListing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftbackedloan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NftId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftbackedloan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftbackedloan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= ListingState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftbackedloan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BidToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumDepositRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftbackedloan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinimumDepositRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutomaticRefinancing", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftbackedloan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutomaticRefinancing = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftbackedloan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.StartedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftbackedloan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.EndAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullPaymentEndAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftbackedloan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.FullPaymentEndAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuccessfulBidEndAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftbackedloan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.SuccessfulBidEndAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoRelistedCount", wireType)
			}
			m.AutoRelistedCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftbackedloan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AutoRelistedCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectedAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftbackedloan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CollectedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumBiddingPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftbackedloan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.MinimumBiddingPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNftbackedloan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Borrowing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNftbackedloan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Borrowing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Borrowing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftbackedloan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaidInterestAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftbackedloan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PaidInterestAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftbackedloan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.StartAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNftbackedloan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NftBid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNftbackedloan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NftBid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NftBid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftbackedloan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftbackedloan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BidAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftbackedloan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DepositAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaidAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftbackedloan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PaidAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BiddingPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftbackedloan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.BiddingPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositLendingRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftbackedloan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DepositLendingRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutomaticPayment", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftbackedloan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutomaticPayment = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftbackedloan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.BidTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterestAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftbackedloan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InterestAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Borrowings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftbackedloan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Borrowings = append(m.Borrowings, Borrowing{})
			if err := m.Borrowings[len(m.Borrowings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNftbackedloan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaymentStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNftbackedloan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaymentStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaymentStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftbackedloan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NftId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftbackedloan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftbackedloan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutomaticPayment", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftbackedloan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutomaticPayment = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaidAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftbackedloan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PaidAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftbackedloan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.BidTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftbackedloan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= ListingState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllPaid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftbackedloan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllPaid = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipNftbackedloan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Liquidation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNftbackedloan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Liquidation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Liquidation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftbackedloan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftbackedloan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.LiquidationDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNftbackedloan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Liquidations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNftbackedloan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Liquidations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Liquidations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liquidation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftbackedloan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Liquidation == nil {
				m.Liquidation = &Liquidation{}
			}
			if err := m.Liquidation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextLiquidation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftbackedloan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextLiquidation = append(m.NextLiquidation, Liquidation{})
			if err := m.NextLiquidation[len(m.NextLiquidation)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNftbackedloan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNftbackedloan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNftbackedloan(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNftbackedloan
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNftbackedloan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNftbackedloan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNftbackedloan
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNftbackedloan
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNftbackedloan
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNftbackedloan        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNftbackedloan          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNftbackedloan = fmt.Errorf("proto: unexpected end of group")
)
