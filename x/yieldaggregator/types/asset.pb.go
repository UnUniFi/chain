// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: yieldaggregator/asset.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type IntegrateType int32

const (
	IntegrateType_GOLANG_MOD IntegrateType = 0
	IntegrateType_COSMWASM   IntegrateType = 1
)

var IntegrateType_name = map[int32]string{
	0: "GOLANG_MOD",
	1: "COSMWASM",
}

var IntegrateType_value = map[string]int32{
	"GOLANG_MOD": 0,
	"COSMWASM":   1,
}

func (x IntegrateType) String() string {
	return proto.EnumName(IntegrateType_name, int32(x))
}

func (IntegrateType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_534963f4c8bf5bc8, []int{0}
}

type IntegrateInfo struct {
	Type IntegrateType `protobuf:"varint,1,opt,name=type,proto3,enum=ununifi.chain.yieldaggregator.IntegrateType" json:"type,omitempty"`
	// for cosmwasm contract
	ContractIbcPortId string `protobuf:"bytes,2,opt,name=contract_ibc_port_id,json=contractIbcPortId,proto3" json:"contract_ibc_port_id,omitempty"`
	// for golang module
	ModName string `protobuf:"bytes,3,opt,name=mod_name,json=modName,proto3" json:"mod_name,omitempty"`
}

func (m *IntegrateInfo) Reset()         { *m = IntegrateInfo{} }
func (m *IntegrateInfo) String() string { return proto.CompactTextString(m) }
func (*IntegrateInfo) ProtoMessage()    {}
func (*IntegrateInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_534963f4c8bf5bc8, []int{0}
}
func (m *IntegrateInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IntegrateInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IntegrateInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IntegrateInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IntegrateInfo.Merge(m, src)
}
func (m *IntegrateInfo) XXX_Size() int {
	return m.Size()
}
func (m *IntegrateInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_IntegrateInfo.DiscardUnknown(m)
}

var xxx_messageInfo_IntegrateInfo proto.InternalMessageInfo

func (m *IntegrateInfo) GetType() IntegrateType {
	if m != nil {
		return m.Type
	}
	return IntegrateType_GOLANG_MOD
}

func (m *IntegrateInfo) GetContractIbcPortId() string {
	if m != nil {
		return m.ContractIbcPortId
	}
	return ""
}

func (m *IntegrateInfo) GetModName() string {
	if m != nil {
		return m.ModName
	}
	return ""
}

type AssetCondition struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Min   string `protobuf:"bytes,2,opt,name=min,proto3" json:"min,omitempty"`
	Ratio uint32 `protobuf:"varint,3,opt,name=ratio,proto3" json:"ratio,omitempty"`
}

func (m *AssetCondition) Reset()         { *m = AssetCondition{} }
func (m *AssetCondition) String() string { return proto.CompactTextString(m) }
func (*AssetCondition) ProtoMessage()    {}
func (*AssetCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_534963f4c8bf5bc8, []int{1}
}
func (m *AssetCondition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetCondition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetCondition.Merge(m, src)
}
func (m *AssetCondition) XXX_Size() int {
	return m.Size()
}
func (m *AssetCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetCondition.DiscardUnknown(m)
}

var xxx_messageInfo_AssetCondition proto.InternalMessageInfo

func (m *AssetCondition) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *AssetCondition) GetMin() string {
	if m != nil {
		return m.Min
	}
	return ""
}

func (m *AssetCondition) GetRatio() uint32 {
	if m != nil {
		return m.Ratio
	}
	return 0
}

type AssetManagementTarget struct {
	Id                       string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AssetManagementAccountId string           `protobuf:"bytes,2,opt,name=asset_management_account_id,json=assetManagementAccountId,proto3" json:"asset_management_account_id,omitempty"`
	AccountAddress           string           `protobuf:"bytes,4,opt,name=account_address,json=accountAddress,proto3" json:"account_address,omitempty"`
	AssetConditions          []AssetCondition `protobuf:"bytes,5,rep,name=asset_conditions,json=assetConditions,proto3" json:"asset_conditions"`
	UnbondingTime            time.Duration    `protobuf:"bytes,6,opt,name=unbonding_time,json=unbondingTime,proto3,stdduration" json:"unbonding_time"`
	IntegrateInfo            IntegrateInfo    `protobuf:"bytes,7,opt,name=integrate_info,json=integrateInfo,proto3" json:"integrate_info"`
	Enabled                  bool             `protobuf:"varint,8,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (m *AssetManagementTarget) Reset()         { *m = AssetManagementTarget{} }
func (m *AssetManagementTarget) String() string { return proto.CompactTextString(m) }
func (*AssetManagementTarget) ProtoMessage()    {}
func (*AssetManagementTarget) Descriptor() ([]byte, []int) {
	return fileDescriptor_534963f4c8bf5bc8, []int{2}
}
func (m *AssetManagementTarget) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetManagementTarget) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetManagementTarget.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetManagementTarget) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetManagementTarget.Merge(m, src)
}
func (m *AssetManagementTarget) XXX_Size() int {
	return m.Size()
}
func (m *AssetManagementTarget) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetManagementTarget.DiscardUnknown(m)
}

var xxx_messageInfo_AssetManagementTarget proto.InternalMessageInfo

func (m *AssetManagementTarget) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AssetManagementTarget) GetAssetManagementAccountId() string {
	if m != nil {
		return m.AssetManagementAccountId
	}
	return ""
}

func (m *AssetManagementTarget) GetAccountAddress() string {
	if m != nil {
		return m.AccountAddress
	}
	return ""
}

func (m *AssetManagementTarget) GetAssetConditions() []AssetCondition {
	if m != nil {
		return m.AssetConditions
	}
	return nil
}

func (m *AssetManagementTarget) GetUnbondingTime() time.Duration {
	if m != nil {
		return m.UnbondingTime
	}
	return 0
}

func (m *AssetManagementTarget) GetIntegrateInfo() IntegrateInfo {
	if m != nil {
		return m.IntegrateInfo
	}
	return IntegrateInfo{}
}

func (m *AssetManagementTarget) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

type AssetManagementAccount struct {
	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Enabled bool   `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (m *AssetManagementAccount) Reset()         { *m = AssetManagementAccount{} }
func (m *AssetManagementAccount) String() string { return proto.CompactTextString(m) }
func (*AssetManagementAccount) ProtoMessage()    {}
func (*AssetManagementAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_534963f4c8bf5bc8, []int{3}
}
func (m *AssetManagementAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetManagementAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetManagementAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetManagementAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetManagementAccount.Merge(m, src)
}
func (m *AssetManagementAccount) XXX_Size() int {
	return m.Size()
}
func (m *AssetManagementAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetManagementAccount.DiscardUnknown(m)
}

var xxx_messageInfo_AssetManagementAccount proto.InternalMessageInfo

func (m *AssetManagementAccount) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AssetManagementAccount) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AssetManagementAccount) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

type FarmingOrder struct {
	Id               string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	FromAddress      string        `protobuf:"bytes,2,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	Strategy         Strategy      `protobuf:"bytes,3,opt,name=strategy,proto3" json:"strategy"`
	MaxUnbondingTime time.Duration `protobuf:"bytes,4,opt,name=max_unbonding_time,json=maxUnbondingTime,proto3,stdduration" json:"max_unbonding_time"`
	OverallRatio     uint32        `protobuf:"varint,5,opt,name=overall_ratio,json=overallRatio,proto3" json:"overall_ratio,omitempty"`
	Min              string        `protobuf:"bytes,6,opt,name=min,proto3" json:"min,omitempty"`
	Max              string        `protobuf:"bytes,7,opt,name=max,proto3" json:"max,omitempty"`
	Date             time.Time     `protobuf:"bytes,8,opt,name=date,proto3,stdtime" json:"date"`
	Active           bool          `protobuf:"varint,9,opt,name=active,proto3" json:"active,omitempty"`
}

func (m *FarmingOrder) Reset()         { *m = FarmingOrder{} }
func (m *FarmingOrder) String() string { return proto.CompactTextString(m) }
func (*FarmingOrder) ProtoMessage()    {}
func (*FarmingOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_534963f4c8bf5bc8, []int{4}
}
func (m *FarmingOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FarmingOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FarmingOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FarmingOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FarmingOrder.Merge(m, src)
}
func (m *FarmingOrder) XXX_Size() int {
	return m.Size()
}
func (m *FarmingOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_FarmingOrder.DiscardUnknown(m)
}

var xxx_messageInfo_FarmingOrder proto.InternalMessageInfo

func (m *FarmingOrder) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *FarmingOrder) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *FarmingOrder) GetStrategy() Strategy {
	if m != nil {
		return m.Strategy
	}
	return Strategy{}
}

func (m *FarmingOrder) GetMaxUnbondingTime() time.Duration {
	if m != nil {
		return m.MaxUnbondingTime
	}
	return 0
}

func (m *FarmingOrder) GetOverallRatio() uint32 {
	if m != nil {
		return m.OverallRatio
	}
	return 0
}

func (m *FarmingOrder) GetMin() string {
	if m != nil {
		return m.Min
	}
	return ""
}

func (m *FarmingOrder) GetMax() string {
	if m != nil {
		return m.Max
	}
	return ""
}

func (m *FarmingOrder) GetDate() time.Time {
	if m != nil {
		return m.Date
	}
	return time.Time{}
}

func (m *FarmingOrder) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

type UserInfo struct {
	User          string          `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Amount        []types.Coin    `protobuf:"bytes,2,rep,name=amount,proto3" json:"amount"`
	FarmingOrders []*FarmingOrder `protobuf:"bytes,3,rep,name=farming_orders,json=farmingOrders,proto3" json:"farming_orders,omitempty"`
	FarmedCounter uint64          `protobuf:"varint,4,opt,name=farmed_counter,json=farmedCounter,proto3" json:"farmed_counter,omitempty"`
}

func (m *UserInfo) Reset()         { *m = UserInfo{} }
func (m *UserInfo) String() string { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()    {}
func (*UserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_534963f4c8bf5bc8, []int{5}
}
func (m *UserInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInfo.Merge(m, src)
}
func (m *UserInfo) XXX_Size() int {
	return m.Size()
}
func (m *UserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UserInfo proto.InternalMessageInfo

func (m *UserInfo) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *UserInfo) GetAmount() []types.Coin {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *UserInfo) GetFarmingOrders() []*FarmingOrder {
	if m != nil {
		return m.FarmingOrders
	}
	return nil
}

func (m *UserInfo) GetFarmedCounter() uint64 {
	if m != nil {
		return m.FarmedCounter
	}
	return 0
}

type UserDeposit struct {
	User   string       `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Amount []types.Coin `protobuf:"bytes,2,rep,name=amount,proto3" json:"amount"`
}

func (m *UserDeposit) Reset()         { *m = UserDeposit{} }
func (m *UserDeposit) String() string { return proto.CompactTextString(m) }
func (*UserDeposit) ProtoMessage()    {}
func (*UserDeposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_534963f4c8bf5bc8, []int{6}
}
func (m *UserDeposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserDeposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserDeposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserDeposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserDeposit.Merge(m, src)
}
func (m *UserDeposit) XXX_Size() int {
	return m.Size()
}
func (m *UserDeposit) XXX_DiscardUnknown() {
	xxx_messageInfo_UserDeposit.DiscardUnknown(m)
}

var xxx_messageInfo_UserDeposit proto.InternalMessageInfo

func (m *UserDeposit) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *UserDeposit) GetAmount() []types.Coin {
	if m != nil {
		return m.Amount
	}
	return nil
}

// FarmingUnit is managing users' investment on a yield farm target
// Here, amount field is the amount withdrawable instantly, staked amount on yield farms are not calculated here
// since the value of staked amount could change after deposit - it's only determined at the time of withdrawal
// from the farm
type FarmingUnit struct {
	AccountId          string       `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	TargetId           string       `protobuf:"bytes,2,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	Amount             []types.Coin `protobuf:"bytes,3,rep,name=amount,proto3" json:"amount"`
	FarmingStartTime   string       `protobuf:"bytes,4,opt,name=farming_start_time,json=farmingStartTime,proto3" json:"farming_start_time,omitempty"`
	UnbondingStarttime time.Time    `protobuf:"bytes,5,opt,name=unbonding_starttime,json=unbondingStarttime,proto3,stdtime" json:"unbonding_starttime"`
	Owner              string       `protobuf:"bytes,6,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *FarmingUnit) Reset()         { *m = FarmingUnit{} }
func (m *FarmingUnit) String() string { return proto.CompactTextString(m) }
func (*FarmingUnit) ProtoMessage()    {}
func (*FarmingUnit) Descriptor() ([]byte, []int) {
	return fileDescriptor_534963f4c8bf5bc8, []int{7}
}
func (m *FarmingUnit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FarmingUnit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FarmingUnit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FarmingUnit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FarmingUnit.Merge(m, src)
}
func (m *FarmingUnit) XXX_Size() int {
	return m.Size()
}
func (m *FarmingUnit) XXX_DiscardUnknown() {
	xxx_messageInfo_FarmingUnit.DiscardUnknown(m)
}

var xxx_messageInfo_FarmingUnit proto.InternalMessageInfo

func (m *FarmingUnit) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *FarmingUnit) GetTargetId() string {
	if m != nil {
		return m.TargetId
	}
	return ""
}

func (m *FarmingUnit) GetAmount() []types.Coin {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *FarmingUnit) GetFarmingStartTime() string {
	if m != nil {
		return m.FarmingStartTime
	}
	return ""
}

func (m *FarmingUnit) GetUnbondingStarttime() time.Time {
	if m != nil {
		return m.UnbondingStarttime
	}
	return time.Time{}
}

func (m *FarmingUnit) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

// Strategy types
// recent30DaysHighDPRStrategy -	Invest in the best DPR destination in the last 30 days on average
// recent1DayHighDPRStrategy	- Invest in the best DPR destination in the last average day
// notHaveDPRStrategy - Invest in something that does not have a DPR.
// ManualStrategy - Manual investment, whiteTargetIdlist required.
type Strategy struct {
	StrategyType         string   `protobuf:"bytes,1,opt,name=strategy_type,json=strategyType,proto3" json:"strategy_type,omitempty"`
	WhitelistedTargetIds []string `protobuf:"bytes,2,rep,name=whitelisted_target_ids,json=whitelistedTargetIds,proto3" json:"whitelisted_target_ids,omitempty"`
	BlacklistedTargetIds []string `protobuf:"bytes,3,rep,name=blacklisted_target_ids,json=blacklistedTargetIds,proto3" json:"blacklisted_target_ids,omitempty"`
}

func (m *Strategy) Reset()         { *m = Strategy{} }
func (m *Strategy) String() string { return proto.CompactTextString(m) }
func (*Strategy) ProtoMessage()    {}
func (*Strategy) Descriptor() ([]byte, []int) {
	return fileDescriptor_534963f4c8bf5bc8, []int{8}
}
func (m *Strategy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Strategy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Strategy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Strategy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Strategy.Merge(m, src)
}
func (m *Strategy) XXX_Size() int {
	return m.Size()
}
func (m *Strategy) XXX_DiscardUnknown() {
	xxx_messageInfo_Strategy.DiscardUnknown(m)
}

var xxx_messageInfo_Strategy proto.InternalMessageInfo

func (m *Strategy) GetStrategyType() string {
	if m != nil {
		return m.StrategyType
	}
	return ""
}

func (m *Strategy) GetWhitelistedTargetIds() []string {
	if m != nil {
		return m.WhitelistedTargetIds
	}
	return nil
}

func (m *Strategy) GetBlacklistedTargetIds() []string {
	if m != nil {
		return m.BlacklistedTargetIds
	}
	return nil
}

type DailyPercent struct {
	AccountId string                                 `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	TargetId  string                                 `protobuf:"bytes,2,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	Rate      github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=rate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"rate"`
	Date      time.Time                              `protobuf:"bytes,4,opt,name=date,proto3,stdtime" json:"date"`
}

func (m *DailyPercent) Reset()         { *m = DailyPercent{} }
func (m *DailyPercent) String() string { return proto.CompactTextString(m) }
func (*DailyPercent) ProtoMessage()    {}
func (*DailyPercent) Descriptor() ([]byte, []int) {
	return fileDescriptor_534963f4c8bf5bc8, []int{9}
}
func (m *DailyPercent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DailyPercent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DailyPercent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DailyPercent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DailyPercent.Merge(m, src)
}
func (m *DailyPercent) XXX_Size() int {
	return m.Size()
}
func (m *DailyPercent) XXX_DiscardUnknown() {
	xxx_messageInfo_DailyPercent.DiscardUnknown(m)
}

var xxx_messageInfo_DailyPercent proto.InternalMessageInfo

func (m *DailyPercent) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *DailyPercent) GetTargetId() string {
	if m != nil {
		return m.TargetId
	}
	return ""
}

func (m *DailyPercent) GetDate() time.Time {
	if m != nil {
		return m.Date
	}
	return time.Time{}
}

type DepositAllocation struct {
	Id      string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OrderId string     `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	Amount  types.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
}

func (m *DepositAllocation) Reset()         { *m = DepositAllocation{} }
func (m *DepositAllocation) String() string { return proto.CompactTextString(m) }
func (*DepositAllocation) ProtoMessage()    {}
func (*DepositAllocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_534963f4c8bf5bc8, []int{10}
}
func (m *DepositAllocation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DepositAllocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DepositAllocation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DepositAllocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositAllocation.Merge(m, src)
}
func (m *DepositAllocation) XXX_Size() int {
	return m.Size()
}
func (m *DepositAllocation) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositAllocation.DiscardUnknown(m)
}

var xxx_messageInfo_DepositAllocation proto.InternalMessageInfo

func (m *DepositAllocation) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DepositAllocation) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *DepositAllocation) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func init() {
	proto.RegisterEnum("ununifi.chain.yieldaggregator.IntegrateType", IntegrateType_name, IntegrateType_value)
	proto.RegisterType((*IntegrateInfo)(nil), "ununifi.chain.yieldaggregator.IntegrateInfo")
	proto.RegisterType((*AssetCondition)(nil), "ununifi.chain.yieldaggregator.AssetCondition")
	proto.RegisterType((*AssetManagementTarget)(nil), "ununifi.chain.yieldaggregator.AssetManagementTarget")
	proto.RegisterType((*AssetManagementAccount)(nil), "ununifi.chain.yieldaggregator.AssetManagementAccount")
	proto.RegisterType((*FarmingOrder)(nil), "ununifi.chain.yieldaggregator.FarmingOrder")
	proto.RegisterType((*UserInfo)(nil), "ununifi.chain.yieldaggregator.UserInfo")
	proto.RegisterType((*UserDeposit)(nil), "ununifi.chain.yieldaggregator.UserDeposit")
	proto.RegisterType((*FarmingUnit)(nil), "ununifi.chain.yieldaggregator.FarmingUnit")
	proto.RegisterType((*Strategy)(nil), "ununifi.chain.yieldaggregator.Strategy")
	proto.RegisterType((*DailyPercent)(nil), "ununifi.chain.yieldaggregator.DailyPercent")
	proto.RegisterType((*DepositAllocation)(nil), "ununifi.chain.yieldaggregator.DepositAllocation")
}

func init() { proto.RegisterFile("yieldaggregator/asset.proto", fileDescriptor_534963f4c8bf5bc8) }

var fileDescriptor_534963f4c8bf5bc8 = []byte{
	// 1111 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x5f, 0x6f, 0x1b, 0x45,
	0x10, 0xcf, 0xd9, 0x4e, 0x62, 0x8f, 0xff, 0xd4, 0x5d, 0x42, 0x75, 0x49, 0xa8, 0x13, 0x8c, 0xa0,
	0x11, 0x34, 0x77, 0x34, 0x20, 0xc1, 0x0b, 0x12, 0x4e, 0xa2, 0x56, 0xae, 0x48, 0x52, 0x2e, 0x31,
	0x88, 0x3e, 0x70, 0x5a, 0xdf, 0xad, 0x2f, 0xab, 0xfa, 0x76, 0xad, 0xdb, 0x75, 0x12, 0x7f, 0x8b,
	0x3e, 0x22, 0xa1, 0x7e, 0x07, 0x3e, 0x46, 0x1e, 0x2b, 0x9e, 0x10, 0x0f, 0x05, 0x25, 0xdf, 0x82,
	0x27, 0xb4, 0x7b, 0x7b, 0x8e, 0xed, 0x20, 0xd2, 0x08, 0x9e, 0x7c, 0x33, 0x3b, 0x33, 0x37, 0xfb,
	0xfb, 0xfd, 0x66, 0xce, 0xb0, 0x3a, 0xa2, 0xa4, 0x1f, 0xe2, 0x28, 0x4a, 0x48, 0x84, 0x25, 0x4f,
	0x5c, 0x2c, 0x04, 0x91, 0xce, 0x20, 0xe1, 0x92, 0xa3, 0xfb, 0x43, 0x36, 0x64, 0xb4, 0x47, 0x9d,
	0xe0, 0x18, 0x53, 0xe6, 0xcc, 0x84, 0xae, 0x2c, 0x45, 0x3c, 0xe2, 0x3a, 0xd2, 0x55, 0x4f, 0x69,
	0xd2, 0xca, 0x5a, 0xc4, 0x79, 0xd4, 0x27, 0xae, 0xb6, 0xba, 0xc3, 0x9e, 0x2b, 0x69, 0x4c, 0x84,
	0xc4, 0xf1, 0xc0, 0x04, 0x34, 0x66, 0x03, 0xc2, 0x61, 0x82, 0x25, 0xe5, 0xcc, 0x9c, 0x2f, 0xcf,
	0x9e, 0x63, 0x36, 0x32, 0x47, 0xef, 0xcd, 0x76, 0x3b, 0xc0, 0x09, 0x8e, 0x45, 0x56, 0x38, 0xe0,
	0x22, 0xe6, 0xc2, 0xed, 0x62, 0x41, 0xdc, 0x93, 0x47, 0x5d, 0x22, 0xf1, 0x23, 0x37, 0xe0, 0xd4,
	0x14, 0x6e, 0xbe, 0xb2, 0xa0, 0xda, 0x66, 0x92, 0x44, 0x09, 0x96, 0xa4, 0xcd, 0x7a, 0x1c, 0x7d,
	0x0d, 0x05, 0x39, 0x1a, 0x10, 0xdb, 0x5a, 0xb7, 0x36, 0x6a, 0x5b, 0x0f, 0x9d, 0x7f, 0xbd, 0xaf,
	0x33, 0xce, 0x3d, 0x1a, 0x0d, 0x88, 0xa7, 0x33, 0x91, 0x0b, 0x4b, 0x01, 0x67, 0x32, 0xc1, 0x81,
	0xf4, 0x69, 0x37, 0xf0, 0x07, 0x3c, 0x91, 0x3e, 0x0d, 0xed, 0xdc, 0xba, 0xb5, 0x51, 0xf2, 0xee,
	0x66, 0x67, 0xed, 0x6e, 0xf0, 0x8c, 0x27, 0xb2, 0x1d, 0xa2, 0x65, 0x28, 0xc6, 0x3c, 0xf4, 0x19,
	0x8e, 0x89, 0x9d, 0xd7, 0x41, 0x8b, 0x31, 0x0f, 0xf7, 0x71, 0x4c, 0x9a, 0xfb, 0x50, 0x6b, 0x29,
	0xf4, 0x77, 0x38, 0x0b, 0xa9, 0x02, 0x04, 0x2d, 0xc1, 0x7c, 0x48, 0x18, 0x8f, 0x75, 0x83, 0x25,
	0x2f, 0x35, 0x50, 0x1d, 0xf2, 0x31, 0x65, 0xe6, 0x15, 0xea, 0x51, 0xc5, 0x69, 0x08, 0x75, 0xc5,
	0xaa, 0x97, 0x1a, 0xcd, 0x5f, 0xf2, 0xf0, 0xae, 0x2e, 0xb8, 0x87, 0x19, 0x8e, 0x48, 0x4c, 0x98,
	0x3c, 0xc2, 0x49, 0x44, 0x24, 0xaa, 0x41, 0x8e, 0x86, 0xa6, 0x68, 0x8e, 0x86, 0xe8, 0x2b, 0x58,
	0xd5, 0xbc, 0xfb, 0xf1, 0x38, 0xd2, 0xc7, 0x41, 0xc0, 0x87, 0x6c, 0xe2, 0x32, 0x36, 0x9e, 0xae,
	0xd5, 0x4a, 0x03, 0xda, 0x21, 0x7a, 0x00, 0x77, 0xb2, 0x68, 0x1c, 0x86, 0x09, 0x11, 0xc2, 0x2e,
	0xe8, 0x94, 0x9a, 0x71, 0xb7, 0x52, 0x2f, 0xfa, 0x11, 0xea, 0xe9, 0x7b, 0x82, 0xec, 0x8a, 0xc2,
	0x9e, 0x5f, 0xcf, 0x6f, 0x94, 0xb7, 0x36, 0x6f, 0xc0, 0x7e, 0x1a, 0x98, 0xed, 0xc2, 0xf9, 0x9b,
	0xb5, 0x39, 0xef, 0x0e, 0x9e, 0xf2, 0x0a, 0xf4, 0x14, 0x6a, 0x43, 0xd6, 0x55, 0x36, 0x8b, 0x7c,
	0xa5, 0x3b, 0x7b, 0x61, 0xdd, 0xda, 0x28, 0x6f, 0x2d, 0x3b, 0xa9, 0xa6, 0x9c, 0x4c, 0x53, 0xce,
	0xae, 0xd1, 0xdc, 0x76, 0x51, 0x55, 0xfa, 0xe9, 0x8f, 0x35, 0xcb, 0xab, 0x8e, 0x53, 0x8f, 0x68,
	0x4c, 0xd0, 0x0f, 0x50, 0xa3, 0x19, 0xe1, 0x3e, 0x65, 0x3d, 0x6e, 0x2f, 0xea, 0x5a, 0x6f, 0xad,
	0x12, 0xa5, 0x30, 0xd3, 0x68, 0x95, 0x4e, 0xc9, 0xce, 0x86, 0x45, 0xc2, 0x70, 0xb7, 0x4f, 0x42,
	0xbb, 0xb8, 0x6e, 0x6d, 0x14, 0xbd, 0xcc, 0x6c, 0x7e, 0x07, 0xf7, 0x5a, 0xff, 0x88, 0xf2, 0x35,
	0xca, 0x10, 0x14, 0xb4, 0x86, 0x52, 0x6e, 0xf4, 0xf3, 0x64, 0xdd, 0xfc, 0x74, 0xdd, 0xbf, 0x72,
	0x50, 0x79, 0x8c, 0x93, 0x98, 0xb2, 0xe8, 0x20, 0x09, 0x49, 0x72, 0xad, 0xdc, 0xfb, 0x50, 0xe9,
	0x25, 0x3c, 0x1e, 0xf3, 0x97, 0x96, 0x2d, 0x2b, 0x5f, 0x46, 0x5e, 0x1b, 0x8a, 0x42, 0xaa, 0x3b,
	0x44, 0x23, 0x5d, 0xbe, 0xbc, 0xf5, 0xe0, 0x06, 0x28, 0x0e, 0x4d, 0xb8, 0x41, 0x61, 0x9c, 0x8e,
	0xbe, 0x05, 0x14, 0xe3, 0x33, 0x7f, 0x86, 0xab, 0xc2, 0xdb, 0x73, 0x55, 0x8f, 0xf1, 0x59, 0x67,
	0x8a, 0xae, 0x0f, 0xa0, 0xca, 0x4f, 0x48, 0x82, 0xfb, 0x7d, 0x3f, 0x1d, 0x85, 0x79, 0x3d, 0x0a,
	0x15, 0xe3, 0xf4, 0x94, 0x2f, 0x9b, 0x9c, 0x85, 0xab, 0xc9, 0x51, 0x1e, 0x7c, 0xa6, 0xa9, 0x55,
	0x1e, 0x7c, 0x86, 0xbe, 0x84, 0x42, 0x88, 0x25, 0xd1, 0xcc, 0x94, 0xb7, 0x56, 0xae, 0x75, 0x73,
	0x94, 0xad, 0xb3, 0xb4, 0x9d, 0x97, 0xaa, 0x1d, 0x9d, 0x81, 0xee, 0xc1, 0x02, 0x0e, 0x24, 0x3d,
	0x21, 0x76, 0x49, 0xa3, 0x6f, 0xac, 0xe6, 0xaf, 0x16, 0x14, 0x3b, 0x82, 0x24, 0x9a, 0x7b, 0x04,
	0x85, 0xa1, 0x20, 0x89, 0x81, 0x5e, 0x3f, 0xa3, 0x2f, 0x60, 0x01, 0xc7, 0x8a, 0x65, 0x3b, 0xa7,
	0x87, 0x61, 0xd9, 0x49, 0x37, 0x99, 0xa3, 0x36, 0x99, 0x63, 0x36, 0x99, 0xb3, 0xc3, 0x69, 0x26,
	0x7c, 0x13, 0x8e, 0x3c, 0xa8, 0xf5, 0x52, 0x56, 0x7d, 0xae, 0x68, 0x15, 0x76, 0x5e, 0x17, 0xf8,
	0xe4, 0x06, 0x62, 0x26, 0xa5, 0xe0, 0x55, 0x7b, 0x13, 0x96, 0x40, 0x1f, 0xa6, 0x35, 0x49, 0xe8,
	0x6b, 0xe1, 0x91, 0x44, 0xf3, 0x52, 0x48, 0xc3, 0x48, 0xb8, 0x93, 0x3a, 0x9b, 0xcf, 0xa1, 0xac,
	0xee, 0xb4, 0x4b, 0x06, 0x5c, 0x50, 0xf9, 0xbf, 0x5e, 0xab, 0xf9, 0x2a, 0x07, 0x65, 0xd3, 0x62,
	0x87, 0x51, 0x89, 0xee, 0x03, 0x4c, 0x6c, 0xa3, 0xf4, 0x15, 0x25, 0x3c, 0x5e, 0x3f, 0xab, 0x50,
	0x92, 0x7a, 0xaf, 0x5d, 0xed, 0xaa, 0x62, 0xea, 0x68, 0x87, 0x13, 0x4d, 0xe4, 0x6f, 0x87, 0xed,
	0x43, 0x40, 0x19, 0xb6, 0x42, 0xe2, 0x44, 0x5e, 0x69, 0xb4, 0xe4, 0xd5, 0xcd, 0xc9, 0xa1, 0x3a,
	0xd0, 0xf2, 0xeb, 0xc0, 0x3b, 0x57, 0x6a, 0xd6, 0xf1, 0x3a, 0x7c, 0xfe, 0x16, 0x22, 0x42, 0xe3,
	0x02, 0x87, 0x59, 0xbe, 0x5a, 0xec, 0xfc, 0x94, 0x91, 0xc4, 0x48, 0x36, 0x35, 0x9a, 0x3f, 0x5b,
	0x50, 0xcc, 0x66, 0x4b, 0x09, 0x3f, 0x9b, 0x2b, 0x7f, 0xfc, 0x31, 0x2b, 0x79, 0x95, 0xcc, 0xa9,
	0x3e, 0x56, 0xe8, 0x73, 0xb8, 0x77, 0x7a, 0x4c, 0x25, 0xe9, 0x53, 0x21, 0x49, 0xe8, 0x8f, 0xe1,
	0x12, 0x9a, 0x9a, 0x92, 0xb7, 0x34, 0x71, 0x7a, 0x64, 0xa0, 0x13, 0x2a, 0xab, 0xdb, 0xc7, 0xc1,
	0x8b, 0xeb, 0x59, 0xf9, 0x34, 0x6b, 0xe2, 0x74, 0x9c, 0xd5, 0x3c, 0xb7, 0xa0, 0xb2, 0x8b, 0x69,
	0x7f, 0xf4, 0x8c, 0x24, 0x01, 0x61, 0xff, 0x8d, 0xbe, 0x6d, 0x28, 0xa8, 0x6b, 0xa4, 0x9f, 0xca,
	0x6d, 0x47, 0x81, 0xf5, 0xfb, 0x9b, 0xb5, 0x8f, 0x22, 0x2a, 0x8f, 0x87, 0x5d, 0x27, 0xe0, 0xb1,
	0x6b, 0x3e, 0xfa, 0xe9, 0xcf, 0xa6, 0x08, 0x5f, 0xb8, 0x0a, 0x05, 0xe1, 0xec, 0x92, 0xc0, 0xd3,
	0xb9, 0xe3, 0x89, 0x2e, 0xdc, 0x76, 0xa2, 0x9b, 0xa7, 0x70, 0xd7, 0x08, 0xbc, 0xd5, 0xef, 0xf3,
	0x40, 0x6f, 0xa1, 0x6b, 0xab, 0x73, 0x19, 0x8a, 0x7a, 0xf8, 0xae, 0xda, 0x5f, 0xd4, 0xf6, 0x8c,
	0xf8, 0xac, 0x5b, 0x88, 0xef, 0xe3, 0xcd, 0x89, 0x7f, 0x2a, 0x9a, 0xc0, 0x1a, 0xc0, 0x93, 0x83,
	0x6f, 0x5a, 0xfb, 0x4f, 0xfc, 0xbd, 0x83, 0xdd, 0xfa, 0x1c, 0xaa, 0x40, 0x71, 0xe7, 0xe0, 0x70,
	0xef, 0xfb, 0xd6, 0xe1, 0x5e, 0xdd, 0xda, 0x7e, 0x7a, 0x7e, 0xd1, 0xb0, 0x5e, 0x5f, 0x34, 0xac,
	0x3f, 0x2f, 0x1a, 0xd6, 0xcb, 0xcb, 0xc6, 0xdc, 0xeb, 0xcb, 0xc6, 0xdc, 0x6f, 0x97, 0x8d, 0xb9,
	0xe7, 0x9f, 0x4e, 0x20, 0xd5, 0x61, 0x1d, 0x46, 0x1f, 0x53, 0x57, 0xef, 0x04, 0xf7, 0xcc, 0x9d,
	0xfd, 0x33, 0xa5, 0x71, 0xeb, 0x2e, 0x68, 0x5c, 0x3e, 0xfb, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xc4,
	0xc4, 0x2a, 0x21, 0x1a, 0x0a, 0x00, 0x00,
}

func (m *IntegrateInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IntegrateInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IntegrateInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ModName) > 0 {
		i -= len(m.ModName)
		copy(dAtA[i:], m.ModName)
		i = encodeVarintAsset(dAtA, i, uint64(len(m.ModName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContractIbcPortId) > 0 {
		i -= len(m.ContractIbcPortId)
		copy(dAtA[i:], m.ContractIbcPortId)
		i = encodeVarintAsset(dAtA, i, uint64(len(m.ContractIbcPortId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintAsset(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AssetCondition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetCondition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetCondition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ratio != 0 {
		i = encodeVarintAsset(dAtA, i, uint64(m.Ratio))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Min) > 0 {
		i -= len(m.Min)
		copy(dAtA[i:], m.Min)
		i = encodeVarintAsset(dAtA, i, uint64(len(m.Min)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintAsset(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AssetManagementTarget) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetManagementTarget) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetManagementTarget) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	{
		size, err := m.IntegrateInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAsset(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	n2, err2 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.UnbondingTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.UnbondingTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintAsset(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x32
	if len(m.AssetConditions) > 0 {
		for iNdEx := len(m.AssetConditions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AssetConditions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAsset(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.AccountAddress) > 0 {
		i -= len(m.AccountAddress)
		copy(dAtA[i:], m.AccountAddress)
		i = encodeVarintAsset(dAtA, i, uint64(len(m.AccountAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AssetManagementAccountId) > 0 {
		i -= len(m.AssetManagementAccountId)
		copy(dAtA[i:], m.AssetManagementAccountId)
		i = encodeVarintAsset(dAtA, i, uint64(len(m.AssetManagementAccountId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintAsset(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AssetManagementAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetManagementAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetManagementAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAsset(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintAsset(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FarmingOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FarmingOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FarmingOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Date, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Date):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintAsset(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x42
	if len(m.Max) > 0 {
		i -= len(m.Max)
		copy(dAtA[i:], m.Max)
		i = encodeVarintAsset(dAtA, i, uint64(len(m.Max)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Min) > 0 {
		i -= len(m.Min)
		copy(dAtA[i:], m.Min)
		i = encodeVarintAsset(dAtA, i, uint64(len(m.Min)))
		i--
		dAtA[i] = 0x32
	}
	if m.OverallRatio != 0 {
		i = encodeVarintAsset(dAtA, i, uint64(m.OverallRatio))
		i--
		dAtA[i] = 0x28
	}
	n4, err4 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.MaxUnbondingTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.MaxUnbondingTime):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintAsset(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Strategy.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAsset(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintAsset(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintAsset(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FarmedCounter != 0 {
		i = encodeVarintAsset(dAtA, i, uint64(m.FarmedCounter))
		i--
		dAtA[i] = 0x20
	}
	if len(m.FarmingOrders) > 0 {
		for iNdEx := len(m.FarmingOrders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FarmingOrders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAsset(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAsset(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintAsset(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserDeposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserDeposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserDeposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAsset(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintAsset(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FarmingUnit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FarmingUnit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FarmingUnit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintAsset(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x32
	}
	n6, err6 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UnbondingStarttime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.UnbondingStarttime):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintAsset(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0x2a
	if len(m.FarmingStartTime) > 0 {
		i -= len(m.FarmingStartTime)
		copy(dAtA[i:], m.FarmingStartTime)
		i = encodeVarintAsset(dAtA, i, uint64(len(m.FarmingStartTime)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAsset(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.TargetId) > 0 {
		i -= len(m.TargetId)
		copy(dAtA[i:], m.TargetId)
		i = encodeVarintAsset(dAtA, i, uint64(len(m.TargetId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AccountId) > 0 {
		i -= len(m.AccountId)
		copy(dAtA[i:], m.AccountId)
		i = encodeVarintAsset(dAtA, i, uint64(len(m.AccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Strategy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Strategy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Strategy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BlacklistedTargetIds) > 0 {
		for iNdEx := len(m.BlacklistedTargetIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BlacklistedTargetIds[iNdEx])
			copy(dAtA[i:], m.BlacklistedTargetIds[iNdEx])
			i = encodeVarintAsset(dAtA, i, uint64(len(m.BlacklistedTargetIds[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.WhitelistedTargetIds) > 0 {
		for iNdEx := len(m.WhitelistedTargetIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.WhitelistedTargetIds[iNdEx])
			copy(dAtA[i:], m.WhitelistedTargetIds[iNdEx])
			i = encodeVarintAsset(dAtA, i, uint64(len(m.WhitelistedTargetIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.StrategyType) > 0 {
		i -= len(m.StrategyType)
		copy(dAtA[i:], m.StrategyType)
		i = encodeVarintAsset(dAtA, i, uint64(len(m.StrategyType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DailyPercent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DailyPercent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DailyPercent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n7, err7 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Date, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Date):])
	if err7 != nil {
		return 0, err7
	}
	i -= n7
	i = encodeVarintAsset(dAtA, i, uint64(n7))
	i--
	dAtA[i] = 0x22
	{
		size := m.Rate.Size()
		i -= size
		if _, err := m.Rate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAsset(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.TargetId) > 0 {
		i -= len(m.TargetId)
		copy(dAtA[i:], m.TargetId)
		i = encodeVarintAsset(dAtA, i, uint64(len(m.TargetId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AccountId) > 0 {
		i -= len(m.AccountId)
		copy(dAtA[i:], m.AccountId)
		i = encodeVarintAsset(dAtA, i, uint64(len(m.AccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DepositAllocation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DepositAllocation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DepositAllocation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAsset(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintAsset(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintAsset(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAsset(dAtA []byte, offset int, v uint64) int {
	offset -= sovAsset(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IntegrateInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovAsset(uint64(m.Type))
	}
	l = len(m.ContractIbcPortId)
	if l > 0 {
		n += 1 + l + sovAsset(uint64(l))
	}
	l = len(m.ModName)
	if l > 0 {
		n += 1 + l + sovAsset(uint64(l))
	}
	return n
}

func (m *AssetCondition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovAsset(uint64(l))
	}
	l = len(m.Min)
	if l > 0 {
		n += 1 + l + sovAsset(uint64(l))
	}
	if m.Ratio != 0 {
		n += 1 + sovAsset(uint64(m.Ratio))
	}
	return n
}

func (m *AssetManagementTarget) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovAsset(uint64(l))
	}
	l = len(m.AssetManagementAccountId)
	if l > 0 {
		n += 1 + l + sovAsset(uint64(l))
	}
	l = len(m.AccountAddress)
	if l > 0 {
		n += 1 + l + sovAsset(uint64(l))
	}
	if len(m.AssetConditions) > 0 {
		for _, e := range m.AssetConditions {
			l = e.Size()
			n += 1 + l + sovAsset(uint64(l))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.UnbondingTime)
	n += 1 + l + sovAsset(uint64(l))
	l = m.IntegrateInfo.Size()
	n += 1 + l + sovAsset(uint64(l))
	if m.Enabled {
		n += 2
	}
	return n
}

func (m *AssetManagementAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovAsset(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAsset(uint64(l))
	}
	if m.Enabled {
		n += 2
	}
	return n
}

func (m *FarmingOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovAsset(uint64(l))
	}
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovAsset(uint64(l))
	}
	l = m.Strategy.Size()
	n += 1 + l + sovAsset(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.MaxUnbondingTime)
	n += 1 + l + sovAsset(uint64(l))
	if m.OverallRatio != 0 {
		n += 1 + sovAsset(uint64(m.OverallRatio))
	}
	l = len(m.Min)
	if l > 0 {
		n += 1 + l + sovAsset(uint64(l))
	}
	l = len(m.Max)
	if l > 0 {
		n += 1 + l + sovAsset(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Date)
	n += 1 + l + sovAsset(uint64(l))
	if m.Active {
		n += 2
	}
	return n
}

func (m *UserInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovAsset(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovAsset(uint64(l))
		}
	}
	if len(m.FarmingOrders) > 0 {
		for _, e := range m.FarmingOrders {
			l = e.Size()
			n += 1 + l + sovAsset(uint64(l))
		}
	}
	if m.FarmedCounter != 0 {
		n += 1 + sovAsset(uint64(m.FarmedCounter))
	}
	return n
}

func (m *UserDeposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovAsset(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovAsset(uint64(l))
		}
	}
	return n
}

func (m *FarmingUnit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccountId)
	if l > 0 {
		n += 1 + l + sovAsset(uint64(l))
	}
	l = len(m.TargetId)
	if l > 0 {
		n += 1 + l + sovAsset(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovAsset(uint64(l))
		}
	}
	l = len(m.FarmingStartTime)
	if l > 0 {
		n += 1 + l + sovAsset(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UnbondingStarttime)
	n += 1 + l + sovAsset(uint64(l))
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovAsset(uint64(l))
	}
	return n
}

func (m *Strategy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StrategyType)
	if l > 0 {
		n += 1 + l + sovAsset(uint64(l))
	}
	if len(m.WhitelistedTargetIds) > 0 {
		for _, s := range m.WhitelistedTargetIds {
			l = len(s)
			n += 1 + l + sovAsset(uint64(l))
		}
	}
	if len(m.BlacklistedTargetIds) > 0 {
		for _, s := range m.BlacklistedTargetIds {
			l = len(s)
			n += 1 + l + sovAsset(uint64(l))
		}
	}
	return n
}

func (m *DailyPercent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccountId)
	if l > 0 {
		n += 1 + l + sovAsset(uint64(l))
	}
	l = len(m.TargetId)
	if l > 0 {
		n += 1 + l + sovAsset(uint64(l))
	}
	l = m.Rate.Size()
	n += 1 + l + sovAsset(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Date)
	n += 1 + l + sovAsset(uint64(l))
	return n
}

func (m *DepositAllocation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovAsset(uint64(l))
	}
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovAsset(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovAsset(uint64(l))
	return n
}

func sovAsset(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAsset(x uint64) (n int) {
	return sovAsset(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IntegrateInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAsset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IntegrateInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IntegrateInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= IntegrateType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractIbcPortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractIbcPortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAsset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAsset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetCondition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAsset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetCondition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetCondition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Min = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ratio", wireType)
			}
			m.Ratio = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ratio |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAsset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAsset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetManagementTarget) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAsset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetManagementTarget: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetManagementTarget: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetManagementAccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetManagementAccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetConditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetConditions = append(m.AssetConditions, AssetCondition{})
			if err := m.AssetConditions[len(m.AssetConditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.UnbondingTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntegrateInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IntegrateInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAsset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAsset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetManagementAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAsset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetManagementAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetManagementAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAsset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAsset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FarmingOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAsset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FarmingOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FarmingOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strategy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Strategy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxUnbondingTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.MaxUnbondingTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverallRatio", wireType)
			}
			m.OverallRatio = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OverallRatio |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Min = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Max = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Date, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAsset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAsset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAsset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FarmingOrders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FarmingOrders = append(m.FarmingOrders, &FarmingOrder{})
			if err := m.FarmingOrders[len(m.FarmingOrders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FarmedCounter", wireType)
			}
			m.FarmedCounter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FarmedCounter |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAsset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAsset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserDeposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAsset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserDeposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserDeposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAsset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAsset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FarmingUnit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAsset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FarmingUnit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FarmingUnit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FarmingStartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FarmingStartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingStarttime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UnbondingStarttime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAsset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAsset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Strategy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAsset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Strategy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Strategy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrategyType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StrategyType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhitelistedTargetIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WhitelistedTargetIds = append(m.WhitelistedTargetIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlacklistedTargetIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlacklistedTargetIds = append(m.BlacklistedTargetIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAsset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAsset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DailyPercent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAsset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DailyPercent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DailyPercent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Date, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAsset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAsset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DepositAllocation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAsset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DepositAllocation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DepositAllocation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAsset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAsset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAsset(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAsset
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAsset
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAsset
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAsset
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAsset        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAsset          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAsset = fmt.Errorf("proto: unexpected end of group")
)
