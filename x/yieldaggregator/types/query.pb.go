// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ununifi/yieldaggregator/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dec8609c4c8573d, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dec8609c4c8573d, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryAllVaultRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllVaultRequest) Reset()         { *m = QueryAllVaultRequest{} }
func (m *QueryAllVaultRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllVaultRequest) ProtoMessage()    {}
func (*QueryAllVaultRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dec8609c4c8573d, []int{2}
}
func (m *QueryAllVaultRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVaultRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVaultRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVaultRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVaultRequest.Merge(m, src)
}
func (m *QueryAllVaultRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVaultRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVaultRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVaultRequest proto.InternalMessageInfo

func (m *QueryAllVaultRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllVaultResponse struct {
	Vaults     []Vault             `protobuf:"bytes,1,rep,name=vaults,proto3" json:"vaults"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllVaultResponse) Reset()         { *m = QueryAllVaultResponse{} }
func (m *QueryAllVaultResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllVaultResponse) ProtoMessage()    {}
func (*QueryAllVaultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dec8609c4c8573d, []int{3}
}
func (m *QueryAllVaultResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVaultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVaultResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVaultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVaultResponse.Merge(m, src)
}
func (m *QueryAllVaultResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVaultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVaultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVaultResponse proto.InternalMessageInfo

func (m *QueryAllVaultResponse) GetVaults() []Vault {
	if m != nil {
		return m.Vaults
	}
	return nil
}

func (m *QueryAllVaultResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetVaultRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetVaultRequest) Reset()         { *m = QueryGetVaultRequest{} }
func (m *QueryGetVaultRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetVaultRequest) ProtoMessage()    {}
func (*QueryGetVaultRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dec8609c4c8573d, []int{4}
}
func (m *QueryGetVaultRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetVaultRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetVaultRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetVaultRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetVaultRequest.Merge(m, src)
}
func (m *QueryGetVaultRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetVaultRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetVaultRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetVaultRequest proto.InternalMessageInfo

func (m *QueryGetVaultRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetVaultResponse struct {
	Vault                  Vault                                  `protobuf:"bytes,1,opt,name=vault,proto3" json:"vault"`
	Strategies             []Strategy                             `protobuf:"bytes,2,rep,name=strategies,proto3" json:"strategies"`
	VaultAddress           string                                 `protobuf:"bytes,3,opt,name=vault_address,json=vaultAddress,proto3" json:"vault_address,omitempty"`
	TotalBondedAmount      github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=total_bonded_amount,json=totalBondedAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_bonded_amount"`
	TotalUnbondingAmount   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=total_unbonding_amount,json=totalUnbondingAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_unbonding_amount"`
	TotalWithdrawalBalance github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=total_withdrawal_balance,json=totalWithdrawalBalance,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_withdrawal_balance"`
}

func (m *QueryGetVaultResponse) Reset()         { *m = QueryGetVaultResponse{} }
func (m *QueryGetVaultResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetVaultResponse) ProtoMessage()    {}
func (*QueryGetVaultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dec8609c4c8573d, []int{5}
}
func (m *QueryGetVaultResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetVaultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetVaultResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetVaultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetVaultResponse.Merge(m, src)
}
func (m *QueryGetVaultResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetVaultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetVaultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetVaultResponse proto.InternalMessageInfo

func (m *QueryGetVaultResponse) GetVault() Vault {
	if m != nil {
		return m.Vault
	}
	return Vault{}
}

func (m *QueryGetVaultResponse) GetStrategies() []Strategy {
	if m != nil {
		return m.Strategies
	}
	return nil
}

func (m *QueryGetVaultResponse) GetVaultAddress() string {
	if m != nil {
		return m.VaultAddress
	}
	return ""
}

type QueryAllStrategyRequest struct {
	Denom      string             `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStrategyRequest) Reset()         { *m = QueryAllStrategyRequest{} }
func (m *QueryAllStrategyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllStrategyRequest) ProtoMessage()    {}
func (*QueryAllStrategyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dec8609c4c8573d, []int{6}
}
func (m *QueryAllStrategyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStrategyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStrategyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStrategyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStrategyRequest.Merge(m, src)
}
func (m *QueryAllStrategyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStrategyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStrategyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStrategyRequest proto.InternalMessageInfo

func (m *QueryAllStrategyRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *QueryAllStrategyRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllStrategyResponse struct {
	Strategies []Strategy          `protobuf:"bytes,1,rep,name=strategies,proto3" json:"strategies"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStrategyResponse) Reset()         { *m = QueryAllStrategyResponse{} }
func (m *QueryAllStrategyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllStrategyResponse) ProtoMessage()    {}
func (*QueryAllStrategyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dec8609c4c8573d, []int{7}
}
func (m *QueryAllStrategyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStrategyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStrategyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStrategyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStrategyResponse.Merge(m, src)
}
func (m *QueryAllStrategyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStrategyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStrategyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStrategyResponse proto.InternalMessageInfo

func (m *QueryAllStrategyResponse) GetStrategies() []Strategy {
	if m != nil {
		return m.Strategies
	}
	return nil
}

func (m *QueryAllStrategyResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetStrategyRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Id    uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetStrategyRequest) Reset()         { *m = QueryGetStrategyRequest{} }
func (m *QueryGetStrategyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetStrategyRequest) ProtoMessage()    {}
func (*QueryGetStrategyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dec8609c4c8573d, []int{8}
}
func (m *QueryGetStrategyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStrategyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStrategyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStrategyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStrategyRequest.Merge(m, src)
}
func (m *QueryGetStrategyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStrategyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStrategyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStrategyRequest proto.InternalMessageInfo

func (m *QueryGetStrategyRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *QueryGetStrategyRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetStrategyResponse struct {
	Strategy Strategy `protobuf:"bytes,1,opt,name=strategy,proto3" json:"strategy"`
}

func (m *QueryGetStrategyResponse) Reset()         { *m = QueryGetStrategyResponse{} }
func (m *QueryGetStrategyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetStrategyResponse) ProtoMessage()    {}
func (*QueryGetStrategyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dec8609c4c8573d, []int{9}
}
func (m *QueryGetStrategyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStrategyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStrategyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStrategyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStrategyResponse.Merge(m, src)
}
func (m *QueryGetStrategyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStrategyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStrategyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStrategyResponse proto.InternalMessageInfo

func (m *QueryGetStrategyResponse) GetStrategy() Strategy {
	if m != nil {
		return m.Strategy
	}
	return Strategy{}
}

type QueryEstimateMintAmountRequest struct {
	Id            uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DepositAmount string `protobuf:"bytes,2,opt,name=deposit_amount,json=depositAmount,proto3" json:"deposit_amount,omitempty"`
}

func (m *QueryEstimateMintAmountRequest) Reset()         { *m = QueryEstimateMintAmountRequest{} }
func (m *QueryEstimateMintAmountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEstimateMintAmountRequest) ProtoMessage()    {}
func (*QueryEstimateMintAmountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dec8609c4c8573d, []int{10}
}
func (m *QueryEstimateMintAmountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEstimateMintAmountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEstimateMintAmountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEstimateMintAmountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEstimateMintAmountRequest.Merge(m, src)
}
func (m *QueryEstimateMintAmountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEstimateMintAmountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEstimateMintAmountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEstimateMintAmountRequest proto.InternalMessageInfo

func (m *QueryEstimateMintAmountRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *QueryEstimateMintAmountRequest) GetDepositAmount() string {
	if m != nil {
		return m.DepositAmount
	}
	return ""
}

type QueryEstimateMintAmountResponse struct {
	MintAmount types.Coin `protobuf:"bytes,1,opt,name=mint_amount,json=mintAmount,proto3" json:"mint_amount"`
}

func (m *QueryEstimateMintAmountResponse) Reset()         { *m = QueryEstimateMintAmountResponse{} }
func (m *QueryEstimateMintAmountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEstimateMintAmountResponse) ProtoMessage()    {}
func (*QueryEstimateMintAmountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dec8609c4c8573d, []int{11}
}
func (m *QueryEstimateMintAmountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEstimateMintAmountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEstimateMintAmountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEstimateMintAmountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEstimateMintAmountResponse.Merge(m, src)
}
func (m *QueryEstimateMintAmountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEstimateMintAmountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEstimateMintAmountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEstimateMintAmountResponse proto.InternalMessageInfo

func (m *QueryEstimateMintAmountResponse) GetMintAmount() types.Coin {
	if m != nil {
		return m.MintAmount
	}
	return types.Coin{}
}

type QueryEstimateRedeemAmountRequest struct {
	Id         uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	BurnAmount string `protobuf:"bytes,2,opt,name=burn_amount,json=burnAmount,proto3" json:"burn_amount,omitempty"`
}

func (m *QueryEstimateRedeemAmountRequest) Reset()         { *m = QueryEstimateRedeemAmountRequest{} }
func (m *QueryEstimateRedeemAmountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEstimateRedeemAmountRequest) ProtoMessage()    {}
func (*QueryEstimateRedeemAmountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dec8609c4c8573d, []int{12}
}
func (m *QueryEstimateRedeemAmountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEstimateRedeemAmountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEstimateRedeemAmountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEstimateRedeemAmountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEstimateRedeemAmountRequest.Merge(m, src)
}
func (m *QueryEstimateRedeemAmountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEstimateRedeemAmountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEstimateRedeemAmountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEstimateRedeemAmountRequest proto.InternalMessageInfo

func (m *QueryEstimateRedeemAmountRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *QueryEstimateRedeemAmountRequest) GetBurnAmount() string {
	if m != nil {
		return m.BurnAmount
	}
	return ""
}

type QueryEstimateRedeemAmountResponse struct {
	RedeemAmount types.Coin `protobuf:"bytes,1,opt,name=redeem_amount,json=redeemAmount,proto3" json:"redeem_amount"`
}

func (m *QueryEstimateRedeemAmountResponse) Reset()         { *m = QueryEstimateRedeemAmountResponse{} }
func (m *QueryEstimateRedeemAmountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEstimateRedeemAmountResponse) ProtoMessage()    {}
func (*QueryEstimateRedeemAmountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dec8609c4c8573d, []int{13}
}
func (m *QueryEstimateRedeemAmountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEstimateRedeemAmountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEstimateRedeemAmountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEstimateRedeemAmountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEstimateRedeemAmountResponse.Merge(m, src)
}
func (m *QueryEstimateRedeemAmountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEstimateRedeemAmountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEstimateRedeemAmountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEstimateRedeemAmountResponse proto.InternalMessageInfo

func (m *QueryEstimateRedeemAmountResponse) GetRedeemAmount() types.Coin {
	if m != nil {
		return m.RedeemAmount
	}
	return types.Coin{}
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "ununifi.yieldaggregator.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "ununifi.yieldaggregator.QueryParamsResponse")
	proto.RegisterType((*QueryAllVaultRequest)(nil), "ununifi.yieldaggregator.QueryAllVaultRequest")
	proto.RegisterType((*QueryAllVaultResponse)(nil), "ununifi.yieldaggregator.QueryAllVaultResponse")
	proto.RegisterType((*QueryGetVaultRequest)(nil), "ununifi.yieldaggregator.QueryGetVaultRequest")
	proto.RegisterType((*QueryGetVaultResponse)(nil), "ununifi.yieldaggregator.QueryGetVaultResponse")
	proto.RegisterType((*QueryAllStrategyRequest)(nil), "ununifi.yieldaggregator.QueryAllStrategyRequest")
	proto.RegisterType((*QueryAllStrategyResponse)(nil), "ununifi.yieldaggregator.QueryAllStrategyResponse")
	proto.RegisterType((*QueryGetStrategyRequest)(nil), "ununifi.yieldaggregator.QueryGetStrategyRequest")
	proto.RegisterType((*QueryGetStrategyResponse)(nil), "ununifi.yieldaggregator.QueryGetStrategyResponse")
	proto.RegisterType((*QueryEstimateMintAmountRequest)(nil), "ununifi.yieldaggregator.QueryEstimateMintAmountRequest")
	proto.RegisterType((*QueryEstimateMintAmountResponse)(nil), "ununifi.yieldaggregator.QueryEstimateMintAmountResponse")
	proto.RegisterType((*QueryEstimateRedeemAmountRequest)(nil), "ununifi.yieldaggregator.QueryEstimateRedeemAmountRequest")
	proto.RegisterType((*QueryEstimateRedeemAmountResponse)(nil), "ununifi.yieldaggregator.QueryEstimateRedeemAmountResponse")
}

func init() {
	proto.RegisterFile("ununifi/yieldaggregator/query.proto", fileDescriptor_4dec8609c4c8573d)
}

var fileDescriptor_4dec8609c4c8573d = []byte{
	// 1016 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xcf, 0xba, 0xb1, 0x95, 0x3c, 0x37, 0x95, 0x98, 0x1a, 0xea, 0x5a, 0xc8, 0x4e, 0x36, 0x6d,
	0x1a, 0xb5, 0xf5, 0x6e, 0x12, 0x0e, 0xd0, 0x7f, 0x02, 0x3b, 0xd0, 0xa8, 0x48, 0x48, 0xc5, 0x25,
	0x54, 0xe2, 0x80, 0x35, 0xf6, 0x0e, 0x9b, 0x11, 0xeb, 0x19, 0x77, 0x77, 0x36, 0xc1, 0x42, 0x5c,
	0x38, 0x73, 0x40, 0xc0, 0x0d, 0x09, 0xc4, 0x15, 0x71, 0xe4, 0x43, 0x54, 0x9c, 0xaa, 0x72, 0x41,
	0x1c, 0x2a, 0x94, 0xf0, 0x41, 0xaa, 0x9d, 0x99, 0x75, 0xbd, 0x76, 0xd6, 0xde, 0x44, 0x39, 0xd9,
	0x3b, 0xfb, 0xde, 0xef, 0xcf, 0x9b, 0x79, 0x6f, 0x16, 0x56, 0x43, 0x16, 0x32, 0xfa, 0x05, 0xb5,
	0x07, 0x94, 0x78, 0x0e, 0x76, 0x5d, 0x9f, 0xb8, 0x58, 0x70, 0xdf, 0x7e, 0x12, 0x12, 0x7f, 0x60,
	0xf5, 0x7d, 0x2e, 0x38, 0xba, 0xa4, 0x83, 0xac, 0xb1, 0xa0, 0x4a, 0xc9, 0xe5, 0x2e, 0x97, 0x31,
	0x76, 0xf4, 0x4f, 0x85, 0x57, 0x2e, 0x77, 0x79, 0xd0, 0xe3, 0x41, 0x5b, 0xbd, 0x50, 0x0f, 0xfa,
	0xd5, 0x9b, 0x2e, 0xe7, 0xae, 0x47, 0x6c, 0xdc, 0xa7, 0x36, 0x66, 0x8c, 0x0b, 0x2c, 0x28, 0x67,
	0xf1, 0xdb, 0xeb, 0x2a, 0xd6, 0xee, 0xe0, 0x80, 0x28, 0x01, 0xf6, 0xfe, 0x66, 0x87, 0x08, 0xbc,
	0x69, 0xf7, 0xb1, 0x4b, 0x99, 0x0c, 0xd6, 0xb1, 0xd5, 0xd1, 0xd8, 0x38, 0xaa, 0xcb, 0x69, 0xfc,
	0xfe, 0x4a, 0x9a, 0xb1, 0x3e, 0xf6, 0x71, 0x2f, 0x66, 0xac, 0xa7, 0x45, 0x8d, 0x3d, 0xab, 0x70,
	0xb3, 0x04, 0xe8, 0xe3, 0x48, 0xd6, 0x43, 0x89, 0xd1, 0x22, 0x4f, 0x42, 0x12, 0x08, 0xf3, 0x13,
	0xb8, 0x98, 0x58, 0x0d, 0xfa, 0x9c, 0x05, 0x04, 0xdd, 0x83, 0x82, 0xe2, 0x2a, 0x1b, 0xcb, 0xc6,
	0x7a, 0x71, 0xab, 0x66, 0xa5, 0x94, 0xd1, 0x52, 0x89, 0xcd, 0xf9, 0xa7, 0x2f, 0x6a, 0x73, 0x2d,
	0x9d, 0x64, 0x7e, 0x0e, 0x25, 0x89, 0xda, 0xf0, 0xbc, 0x4f, 0x71, 0xe8, 0x09, 0xcd, 0x86, 0xee,
	0x03, 0xbc, 0x2a, 0x86, 0x86, 0x5e, 0xb3, 0x74, 0x95, 0xa3, 0x6a, 0x58, 0x6a, 0xeb, 0x74, 0x4d,
	0xac, 0x87, 0xd8, 0x25, 0x3a, 0xb7, 0x35, 0x92, 0x69, 0xfe, 0x62, 0xc0, 0xeb, 0x63, 0x04, 0x5a,
	0xf8, 0x5d, 0x28, 0xec, 0x47, 0x0b, 0x91, 0xf0, 0x73, 0xeb, 0xc5, 0xad, 0x6a, 0xaa, 0x70, 0x99,
	0x17, 0xeb, 0x56, 0x39, 0x68, 0x27, 0xa1, 0x2f, 0x27, 0xf5, 0x5d, 0x9b, 0xa9, 0x4f, 0x51, 0x27,
	0x04, 0xae, 0xe9, 0x02, 0xec, 0x10, 0x91, 0x28, 0xc0, 0x05, 0xc8, 0x51, 0x47, 0x1a, 0x9f, 0x6f,
	0xe5, 0xa8, 0x63, 0xfe, 0x3c, 0xaf, 0x8d, 0xbc, 0x0a, 0xd4, 0x46, 0x6e, 0x43, 0x5e, 0x8a, 0xd2,
	0x55, 0xca, 0xe6, 0x43, 0xa5, 0x44, 0x36, 0x02, 0xe1, 0x63, 0x41, 0x5c, 0x4a, 0x82, 0x72, 0x4e,
	0x16, 0x62, 0x25, 0x15, 0xe0, 0x91, 0x0a, 0x1d, 0x68, 0x8c, 0x91, 0x54, 0xb4, 0x0a, 0x4b, 0x12,
	0xb1, 0x8d, 0x1d, 0xc7, 0x27, 0x41, 0x50, 0x3e, 0xb7, 0x6c, 0xac, 0x2f, 0xb6, 0xce, 0xcb, 0xc5,
	0x86, 0x5a, 0x43, 0x1e, 0x5c, 0x14, 0x5c, 0x60, 0xaf, 0xdd, 0xe1, 0xcc, 0x21, 0x4e, 0x1b, 0xf7,
	0x78, 0xc8, 0x44, 0x79, 0x3e, 0x0a, 0x6d, 0xde, 0x8d, 0x30, 0xff, 0x7d, 0x51, 0x5b, 0x73, 0xa9,
	0xd8, 0x0b, 0x3b, 0x56, 0x97, 0xf7, 0x74, 0x57, 0xe9, 0x9f, 0x7a, 0xe0, 0x7c, 0x69, 0x8b, 0x41,
	0x9f, 0x04, 0xd6, 0x03, 0x26, 0x9e, 0xff, 0x59, 0x07, 0x5d, 0xee, 0x07, 0x4c, 0xb4, 0x5e, 0x93,
	0xc0, 0x4d, 0x89, 0xdb, 0x90, 0xb0, 0xc8, 0x87, 0x37, 0x14, 0x5b, 0xc8, 0x22, 0x3e, 0xca, 0xdc,
	0x98, 0x30, 0x7f, 0x06, 0x84, 0x25, 0x89, 0xbd, 0x1b, 0x43, 0x6b, 0xce, 0x7d, 0x28, 0x2b, 0xce,
	0x03, 0x2a, 0xf6, 0x1c, 0x1f, 0x1f, 0x44, 0x66, 0xb1, 0x87, 0x59, 0x97, 0x94, 0x0b, 0x67, 0xc0,
	0xaa, 0x1c, 0x3d, 0x1e, 0x82, 0x37, 0x15, 0xb6, 0x79, 0x00, 0x97, 0xe2, 0x53, 0x1e, 0x6f, 0x52,
	0x7c, 0x90, 0x4a, 0x90, 0x77, 0x08, 0xe3, 0x3d, 0x79, 0x3c, 0x16, 0x5b, 0xea, 0x61, 0xac, 0xbf,
	0x72, 0xa7, 0xee, 0xaf, 0x3f, 0x0c, 0x28, 0x4f, 0x32, 0xeb, 0x93, 0x99, 0x3c, 0x5d, 0xc6, 0xe9,
	0x4f, 0xd7, 0x99, 0x75, 0xdb, 0xbb, 0xba, 0x4e, 0x3b, 0x44, 0x64, 0xab, 0x93, 0x6a, 0xc3, 0xdc,
	0xb0, 0x0d, 0xdb, 0xda, 0x6e, 0x02, 0x40, 0xdb, 0xdd, 0x86, 0x05, 0xad, 0x79, 0xa0, 0x7b, 0x31,
	0xb3, 0xd9, 0x61, 0xa2, 0xf9, 0x18, 0xaa, 0x92, 0xe0, 0x83, 0x40, 0xd0, 0x1e, 0x16, 0xe4, 0x23,
	0xca, 0x84, 0x3a, 0x5c, 0x29, 0x93, 0x01, 0x5d, 0x85, 0x0b, 0x0e, 0xe9, 0xf3, 0x80, 0x8a, 0xf8,
	0x7c, 0xe7, 0xa4, 0x83, 0x25, 0xbd, 0xaa, 0xb2, 0xcd, 0x2e, 0xd4, 0x52, 0x81, 0xb5, 0x81, 0xf7,
	0xa0, 0xd8, 0xa3, 0x6c, 0x08, 0xa3, 0x3c, 0x5c, 0x4e, 0xd4, 0x39, 0xae, 0xf0, 0x36, 0xa7, 0x2c,
	0xde, 0xa8, 0xde, 0x10, 0xc9, 0x7c, 0x04, 0xcb, 0x09, 0x92, 0x16, 0x71, 0x08, 0xe9, 0x4d, 0xd7,
	0x5f, 0x83, 0x62, 0x27, 0xf4, 0x59, 0x52, 0x3c, 0x44, 0x4b, 0x1a, 0x94, 0xc2, 0xca, 0x14, 0x50,
	0xad, 0xfd, 0x7d, 0x58, 0xf2, 0xe5, 0xfa, 0x09, 0xd5, 0x9f, 0xf7, 0x47, 0xd0, 0xb6, 0x7e, 0x5f,
	0x84, 0xbc, 0xe4, 0x42, 0xdf, 0x19, 0x50, 0x50, 0x37, 0x16, 0xba, 0x91, 0xba, 0x8b, 0x93, 0xd7,
	0x64, 0xe5, 0x66, 0xb6, 0x60, 0xa5, 0xda, 0xbc, 0xf6, 0xed, 0xdf, 0xff, 0xff, 0x98, 0x5b, 0x41,
	0x35, 0x7b, 0xfa, 0x45, 0x8e, 0x7e, 0x30, 0x60, 0x41, 0xce, 0xef, 0x86, 0xe7, 0xa1, 0xfa, 0x74,
	0x8e, 0xb1, 0xbb, 0xb4, 0x62, 0x65, 0x0d, 0xcf, 0x2c, 0x4a, 0x5f, 0x82, 0x3f, 0x19, 0x90, 0x97,
	0xa9, 0xb3, 0x14, 0x8d, 0x5d, 0x6e, 0xb3, 0x14, 0x8d, 0x5f, 0x71, 0xe6, 0x4d, 0xa9, 0x68, 0x0d,
	0x5d, 0x99, 0xa1, 0xc8, 0xfe, 0x9a, 0x3a, 0xdf, 0xa0, 0x5f, 0x0d, 0x28, 0xc6, 0xfd, 0x15, 0x95,
	0x6b, 0x63, 0xa6, 0xff, 0xb1, 0x59, 0x50, 0xd9, 0x3c, 0x41, 0x86, 0x96, 0x78, 0x43, 0x4a, 0xbc,
	0x8a, 0x56, 0x53, 0x25, 0x8e, 0xcc, 0xb3, 0xdf, 0x0c, 0x58, 0x88, 0x11, 0x66, 0xc9, 0x9b, 0x1c,
	0x55, 0xb3, 0xe4, 0x1d, 0x33, 0x9b, 0xcc, 0x0d, 0x29, 0xef, 0x3a, 0x5a, 0xcf, 0x20, 0x4f, 0x55,
	0xf1, 0x2f, 0x03, 0xd0, 0xe4, 0xac, 0x40, 0x6f, 0x4f, 0xe7, 0x4e, 0x1d, 0x5b, 0x95, 0x77, 0x4e,
	0x9e, 0xa8, 0xb5, 0x37, 0xa4, 0xf6, 0x3b, 0xe8, 0x56, 0x96, 0xdd, 0xb7, 0x89, 0x06, 0xaa, 0x47,
	0x63, 0xa9, 0xae, 0x86, 0x01, 0x7a, 0x6e, 0x40, 0xe9, 0xb8, 0xf1, 0x81, 0x6e, 0x65, 0x53, 0x75,
	0xcc, 0x1c, 0xab, 0xdc, 0x3e, 0x4d, 0xaa, 0xb6, 0xb4, 0x2d, 0x2d, 0xdd, 0x43, 0x77, 0x4e, 0x66,
	0x49, 0xcd, 0x2a, 0x6d, 0xaa, 0xf9, 0xe1, 0xd3, 0xc3, 0xaa, 0xf1, 0xec, 0xb0, 0x6a, 0xfc, 0x77,
	0x58, 0x35, 0xbe, 0x3f, 0xaa, 0xce, 0x3d, 0x3b, 0xaa, 0xce, 0xfd, 0x73, 0x54, 0x9d, 0xfb, 0x6c,
	0x63, 0xe4, 0xe3, 0x62, 0x97, 0xed, 0x32, 0x7a, 0x9f, 0xda, 0xdd, 0x3d, 0x4c, 0x99, 0xfd, 0xd5,
	0x04, 0x91, 0xfc, 0xd4, 0xe8, 0x14, 0xe4, 0xa7, 0xff, 0x5b, 0x2f, 0x03, 0x00, 0x00, 0xff, 0xff,
	0xe5, 0x12, 0xc1, 0x67, 0x2a, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// this line is used by starport scaffolding # 2
	VaultAll(ctx context.Context, in *QueryAllVaultRequest, opts ...grpc.CallOption) (*QueryAllVaultResponse, error)
	Vault(ctx context.Context, in *QueryGetVaultRequest, opts ...grpc.CallOption) (*QueryGetVaultResponse, error)
	StrategyAll(ctx context.Context, in *QueryAllStrategyRequest, opts ...grpc.CallOption) (*QueryAllStrategyResponse, error)
	Strategy(ctx context.Context, in *QueryGetStrategyRequest, opts ...grpc.CallOption) (*QueryGetStrategyResponse, error)
	EstimateMintAmount(ctx context.Context, in *QueryEstimateMintAmountRequest, opts ...grpc.CallOption) (*QueryEstimateMintAmountResponse, error)
	EstimateRedeemAmount(ctx context.Context, in *QueryEstimateRedeemAmountRequest, opts ...grpc.CallOption) (*QueryEstimateRedeemAmountResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/ununifi.yieldaggregator.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VaultAll(ctx context.Context, in *QueryAllVaultRequest, opts ...grpc.CallOption) (*QueryAllVaultResponse, error) {
	out := new(QueryAllVaultResponse)
	err := c.cc.Invoke(ctx, "/ununifi.yieldaggregator.Query/VaultAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Vault(ctx context.Context, in *QueryGetVaultRequest, opts ...grpc.CallOption) (*QueryGetVaultResponse, error) {
	out := new(QueryGetVaultResponse)
	err := c.cc.Invoke(ctx, "/ununifi.yieldaggregator.Query/Vault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StrategyAll(ctx context.Context, in *QueryAllStrategyRequest, opts ...grpc.CallOption) (*QueryAllStrategyResponse, error) {
	out := new(QueryAllStrategyResponse)
	err := c.cc.Invoke(ctx, "/ununifi.yieldaggregator.Query/StrategyAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Strategy(ctx context.Context, in *QueryGetStrategyRequest, opts ...grpc.CallOption) (*QueryGetStrategyResponse, error) {
	out := new(QueryGetStrategyResponse)
	err := c.cc.Invoke(ctx, "/ununifi.yieldaggregator.Query/Strategy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EstimateMintAmount(ctx context.Context, in *QueryEstimateMintAmountRequest, opts ...grpc.CallOption) (*QueryEstimateMintAmountResponse, error) {
	out := new(QueryEstimateMintAmountResponse)
	err := c.cc.Invoke(ctx, "/ununifi.yieldaggregator.Query/EstimateMintAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EstimateRedeemAmount(ctx context.Context, in *QueryEstimateRedeemAmountRequest, opts ...grpc.CallOption) (*QueryEstimateRedeemAmountResponse, error) {
	out := new(QueryEstimateRedeemAmountResponse)
	err := c.cc.Invoke(ctx, "/ununifi.yieldaggregator.Query/EstimateRedeemAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// this line is used by starport scaffolding # 2
	VaultAll(context.Context, *QueryAllVaultRequest) (*QueryAllVaultResponse, error)
	Vault(context.Context, *QueryGetVaultRequest) (*QueryGetVaultResponse, error)
	StrategyAll(context.Context, *QueryAllStrategyRequest) (*QueryAllStrategyResponse, error)
	Strategy(context.Context, *QueryGetStrategyRequest) (*QueryGetStrategyResponse, error)
	EstimateMintAmount(context.Context, *QueryEstimateMintAmountRequest) (*QueryEstimateMintAmountResponse, error)
	EstimateRedeemAmount(context.Context, *QueryEstimateRedeemAmountRequest) (*QueryEstimateRedeemAmountResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) VaultAll(ctx context.Context, req *QueryAllVaultRequest) (*QueryAllVaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VaultAll not implemented")
}
func (*UnimplementedQueryServer) Vault(ctx context.Context, req *QueryGetVaultRequest) (*QueryGetVaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vault not implemented")
}
func (*UnimplementedQueryServer) StrategyAll(ctx context.Context, req *QueryAllStrategyRequest) (*QueryAllStrategyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StrategyAll not implemented")
}
func (*UnimplementedQueryServer) Strategy(ctx context.Context, req *QueryGetStrategyRequest) (*QueryGetStrategyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Strategy not implemented")
}
func (*UnimplementedQueryServer) EstimateMintAmount(ctx context.Context, req *QueryEstimateMintAmountRequest) (*QueryEstimateMintAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateMintAmount not implemented")
}
func (*UnimplementedQueryServer) EstimateRedeemAmount(ctx context.Context, req *QueryEstimateRedeemAmountRequest) (*QueryEstimateRedeemAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateRedeemAmount not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.yieldaggregator.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VaultAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllVaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VaultAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.yieldaggregator.Query/VaultAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VaultAll(ctx, req.(*QueryAllVaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Vault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetVaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Vault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.yieldaggregator.Query/Vault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Vault(ctx, req.(*QueryGetVaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StrategyAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllStrategyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StrategyAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.yieldaggregator.Query/StrategyAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StrategyAll(ctx, req.(*QueryAllStrategyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Strategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetStrategyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Strategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.yieldaggregator.Query/Strategy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Strategy(ctx, req.(*QueryGetStrategyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EstimateMintAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEstimateMintAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EstimateMintAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.yieldaggregator.Query/EstimateMintAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EstimateMintAmount(ctx, req.(*QueryEstimateMintAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EstimateRedeemAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEstimateRedeemAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EstimateRedeemAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.yieldaggregator.Query/EstimateRedeemAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EstimateRedeemAmount(ctx, req.(*QueryEstimateRedeemAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ununifi.yieldaggregator.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "VaultAll",
			Handler:    _Query_VaultAll_Handler,
		},
		{
			MethodName: "Vault",
			Handler:    _Query_Vault_Handler,
		},
		{
			MethodName: "StrategyAll",
			Handler:    _Query_StrategyAll_Handler,
		},
		{
			MethodName: "Strategy",
			Handler:    _Query_Strategy_Handler,
		},
		{
			MethodName: "EstimateMintAmount",
			Handler:    _Query_EstimateMintAmount_Handler,
		},
		{
			MethodName: "EstimateRedeemAmount",
			Handler:    _Query_EstimateRedeemAmount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ununifi/yieldaggregator/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllVaultRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVaultRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVaultRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllVaultResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVaultResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVaultResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Vaults) > 0 {
		for iNdEx := len(m.Vaults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vaults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetVaultRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetVaultRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetVaultRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetVaultResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetVaultResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetVaultResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TotalWithdrawalBalance.Size()
		i -= size
		if _, err := m.TotalWithdrawalBalance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.TotalUnbondingAmount.Size()
		i -= size
		if _, err := m.TotalUnbondingAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.TotalBondedAmount.Size()
		i -= size
		if _, err := m.TotalBondedAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.VaultAddress) > 0 {
		i -= len(m.VaultAddress)
		copy(dAtA[i:], m.VaultAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.VaultAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Strategies) > 0 {
		for iNdEx := len(m.Strategies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Strategies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Vault.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllStrategyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStrategyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStrategyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllStrategyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStrategyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStrategyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Strategies) > 0 {
		for iNdEx := len(m.Strategies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Strategies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStrategyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStrategyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStrategyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStrategyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStrategyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStrategyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Strategy.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryEstimateMintAmountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEstimateMintAmountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEstimateMintAmountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DepositAmount) > 0 {
		i -= len(m.DepositAmount)
		copy(dAtA[i:], m.DepositAmount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DepositAmount)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryEstimateMintAmountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEstimateMintAmountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEstimateMintAmountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MintAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryEstimateRedeemAmountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEstimateRedeemAmountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEstimateRedeemAmountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BurnAmount) > 0 {
		i -= len(m.BurnAmount)
		copy(dAtA[i:], m.BurnAmount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BurnAmount)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryEstimateRedeemAmountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEstimateRedeemAmountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEstimateRedeemAmountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RedeemAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllVaultRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllVaultResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Vaults) > 0 {
		for _, e := range m.Vaults {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetVaultRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetVaultResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Vault.Size()
	n += 1 + l + sovQuery(uint64(l))
	if len(m.Strategies) > 0 {
		for _, e := range m.Strategies {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = len(m.VaultAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.TotalBondedAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.TotalUnbondingAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.TotalWithdrawalBalance.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllStrategyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllStrategyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Strategies) > 0 {
		for _, e := range m.Strategies {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStrategyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetStrategyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Strategy.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryEstimateMintAmountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	l = len(m.DepositAmount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEstimateMintAmountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MintAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryEstimateRedeemAmountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	l = len(m.BurnAmount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEstimateRedeemAmountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RedeemAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVaultRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVaultRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVaultRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVaultResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVaultResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVaultResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vaults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vaults = append(m.Vaults, Vault{})
			if err := m.Vaults[len(m.Vaults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetVaultRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetVaultRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetVaultRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetVaultResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetVaultResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetVaultResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Vault.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strategies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Strategies = append(m.Strategies, Strategy{})
			if err := m.Strategies[len(m.Strategies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBondedAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalBondedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalUnbondingAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalUnbondingAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalWithdrawalBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalWithdrawalBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStrategyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStrategyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStrategyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStrategyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStrategyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStrategyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strategies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Strategies = append(m.Strategies, Strategy{})
			if err := m.Strategies[len(m.Strategies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStrategyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStrategyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStrategyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStrategyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStrategyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStrategyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strategy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Strategy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEstimateMintAmountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEstimateMintAmountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEstimateMintAmountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEstimateMintAmountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEstimateMintAmountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEstimateMintAmountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MintAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEstimateRedeemAmountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEstimateRedeemAmountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEstimateRedeemAmountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BurnAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEstimateRedeemAmountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEstimateRedeemAmountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEstimateRedeemAmountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedeemAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RedeemAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
