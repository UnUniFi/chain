// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nftmarket/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_UnUniFi_chain_types "github.com/UnUniFi/chain/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_225a8e3e0dd19415, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_225a8e3e0dd19415, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryNftListingRequest struct {
	ClassId uint64 `protobuf:"varint,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	NftId   uint64 `protobuf:"varint,2,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
}

func (m *QueryNftListingRequest) Reset()         { *m = QueryNftListingRequest{} }
func (m *QueryNftListingRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNftListingRequest) ProtoMessage()    {}
func (*QueryNftListingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_225a8e3e0dd19415, []int{2}
}
func (m *QueryNftListingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNftListingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNftListingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNftListingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNftListingRequest.Merge(m, src)
}
func (m *QueryNftListingRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNftListingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNftListingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNftListingRequest proto.InternalMessageInfo

func (m *QueryNftListingRequest) GetClassId() uint64 {
	if m != nil {
		return m.ClassId
	}
	return 0
}

func (m *QueryNftListingRequest) GetNftId() uint64 {
	if m != nil {
		return m.NftId
	}
	return 0
}

type QueryNftListingResponse struct {
	Listing NftListing `protobuf:"bytes,1,opt,name=listing,proto3" json:"listing"`
}

func (m *QueryNftListingResponse) Reset()         { *m = QueryNftListingResponse{} }
func (m *QueryNftListingResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNftListingResponse) ProtoMessage()    {}
func (*QueryNftListingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_225a8e3e0dd19415, []int{3}
}
func (m *QueryNftListingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNftListingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNftListingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNftListingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNftListingResponse.Merge(m, src)
}
func (m *QueryNftListingResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNftListingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNftListingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNftListingResponse proto.InternalMessageInfo

func (m *QueryNftListingResponse) GetListing() NftListing {
	if m != nil {
		return m.Listing
	}
	return NftListing{}
}

type QueryListedNftsRequest struct {
}

func (m *QueryListedNftsRequest) Reset()         { *m = QueryListedNftsRequest{} }
func (m *QueryListedNftsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListedNftsRequest) ProtoMessage()    {}
func (*QueryListedNftsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_225a8e3e0dd19415, []int{4}
}
func (m *QueryListedNftsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListedNftsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListedNftsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListedNftsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListedNftsRequest.Merge(m, src)
}
func (m *QueryListedNftsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListedNftsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListedNftsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListedNftsRequest proto.InternalMessageInfo

type QueryListedNftsResponse struct {
	Listing []NftListing `protobuf:"bytes,1,rep,name=listing,proto3" json:"listing"`
}

func (m *QueryListedNftsResponse) Reset()         { *m = QueryListedNftsResponse{} }
func (m *QueryListedNftsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListedNftsResponse) ProtoMessage()    {}
func (*QueryListedNftsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_225a8e3e0dd19415, []int{5}
}
func (m *QueryListedNftsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListedNftsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListedNftsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListedNftsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListedNftsResponse.Merge(m, src)
}
func (m *QueryListedNftsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListedNftsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListedNftsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListedNftsResponse proto.InternalMessageInfo

func (m *QueryListedNftsResponse) GetListing() []NftListing {
	if m != nil {
		return m.Listing
	}
	return nil
}

type QueryLoansRequest struct {
}

func (m *QueryLoansRequest) Reset()         { *m = QueryLoansRequest{} }
func (m *QueryLoansRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLoansRequest) ProtoMessage()    {}
func (*QueryLoansRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_225a8e3e0dd19415, []int{6}
}
func (m *QueryLoansRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLoansRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLoansRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLoansRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLoansRequest.Merge(m, src)
}
func (m *QueryLoansRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLoansRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLoansRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLoansRequest proto.InternalMessageInfo

type QueryLoansResponse struct {
	Loans []Loan `protobuf:"bytes,1,rep,name=loans,proto3" json:"loans"`
}

func (m *QueryLoansResponse) Reset()         { *m = QueryLoansResponse{} }
func (m *QueryLoansResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLoansResponse) ProtoMessage()    {}
func (*QueryLoansResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_225a8e3e0dd19415, []int{7}
}
func (m *QueryLoansResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLoansResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLoansResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLoansResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLoansResponse.Merge(m, src)
}
func (m *QueryLoansResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLoansResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLoansResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLoansResponse proto.InternalMessageInfo

func (m *QueryLoansResponse) GetLoans() []Loan {
	if m != nil {
		return m.Loans
	}
	return nil
}

type QueryCDPsListRequest struct {
}

func (m *QueryCDPsListRequest) Reset()         { *m = QueryCDPsListRequest{} }
func (m *QueryCDPsListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCDPsListRequest) ProtoMessage()    {}
func (*QueryCDPsListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_225a8e3e0dd19415, []int{8}
}
func (m *QueryCDPsListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCDPsListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCDPsListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCDPsListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCDPsListRequest.Merge(m, src)
}
func (m *QueryCDPsListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCDPsListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCDPsListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCDPsListRequest proto.InternalMessageInfo

type QueryCDPsListResponse struct {
}

func (m *QueryCDPsListResponse) Reset()         { *m = QueryCDPsListResponse{} }
func (m *QueryCDPsListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCDPsListResponse) ProtoMessage()    {}
func (*QueryCDPsListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_225a8e3e0dd19415, []int{9}
}
func (m *QueryCDPsListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCDPsListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCDPsListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCDPsListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCDPsListResponse.Merge(m, src)
}
func (m *QueryCDPsListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCDPsListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCDPsListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCDPsListResponse proto.InternalMessageInfo

type QueryNftBidsRequest struct {
	ClassId uint64 `protobuf:"varint,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	NftId   uint64 `protobuf:"varint,2,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
}

func (m *QueryNftBidsRequest) Reset()         { *m = QueryNftBidsRequest{} }
func (m *QueryNftBidsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNftBidsRequest) ProtoMessage()    {}
func (*QueryNftBidsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_225a8e3e0dd19415, []int{10}
}
func (m *QueryNftBidsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNftBidsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNftBidsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNftBidsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNftBidsRequest.Merge(m, src)
}
func (m *QueryNftBidsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNftBidsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNftBidsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNftBidsRequest proto.InternalMessageInfo

func (m *QueryNftBidsRequest) GetClassId() uint64 {
	if m != nil {
		return m.ClassId
	}
	return 0
}

func (m *QueryNftBidsRequest) GetNftId() uint64 {
	if m != nil {
		return m.NftId
	}
	return 0
}

type QueryNftBidsResponse struct {
	Bids []NftBid `protobuf:"bytes,1,rep,name=bids,proto3" json:"bids"`
}

func (m *QueryNftBidsResponse) Reset()         { *m = QueryNftBidsResponse{} }
func (m *QueryNftBidsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNftBidsResponse) ProtoMessage()    {}
func (*QueryNftBidsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_225a8e3e0dd19415, []int{11}
}
func (m *QueryNftBidsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNftBidsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNftBidsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNftBidsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNftBidsResponse.Merge(m, src)
}
func (m *QueryNftBidsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNftBidsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNftBidsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNftBidsResponse proto.InternalMessageInfo

func (m *QueryNftBidsResponse) GetBids() []NftBid {
	if m != nil {
		return m.Bids
	}
	return nil
}

type QueryBidderBidsRequest struct {
	Bidder github_com_UnUniFi_chain_types.StringAccAddress `protobuf:"bytes,1,opt,name=bidder,proto3,customtype=github.com/UnUniFi/chain/types.StringAccAddress" json:"bidder" yaml:"bidder"`
}

func (m *QueryBidderBidsRequest) Reset()         { *m = QueryBidderBidsRequest{} }
func (m *QueryBidderBidsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBidderBidsRequest) ProtoMessage()    {}
func (*QueryBidderBidsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_225a8e3e0dd19415, []int{12}
}
func (m *QueryBidderBidsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBidderBidsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBidderBidsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBidderBidsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBidderBidsRequest.Merge(m, src)
}
func (m *QueryBidderBidsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBidderBidsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBidderBidsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBidderBidsRequest proto.InternalMessageInfo

type QueryBidderBidsResponse struct {
	Bids []NftBid `protobuf:"bytes,1,rep,name=bids,proto3" json:"bids"`
}

func (m *QueryBidderBidsResponse) Reset()         { *m = QueryBidderBidsResponse{} }
func (m *QueryBidderBidsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBidderBidsResponse) ProtoMessage()    {}
func (*QueryBidderBidsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_225a8e3e0dd19415, []int{13}
}
func (m *QueryBidderBidsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBidderBidsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBidderBidsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBidderBidsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBidderBidsResponse.Merge(m, src)
}
func (m *QueryBidderBidsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBidderBidsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBidderBidsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBidderBidsResponse proto.InternalMessageInfo

func (m *QueryBidderBidsResponse) GetBids() []NftBid {
	if m != nil {
		return m.Bids
	}
	return nil
}

type QueryRewardsRequest struct {
	Address uint64 `protobuf:"varint,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryRewardsRequest) Reset()         { *m = QueryRewardsRequest{} }
func (m *QueryRewardsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRewardsRequest) ProtoMessage()    {}
func (*QueryRewardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_225a8e3e0dd19415, []int{14}
}
func (m *QueryRewardsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardsRequest.Merge(m, src)
}
func (m *QueryRewardsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardsRequest proto.InternalMessageInfo

func (m *QueryRewardsRequest) GetAddress() uint64 {
	if m != nil {
		return m.Address
	}
	return 0
}

type QueryRewardsResponse struct {
	Rewards []types.Coin `protobuf:"bytes,1,rep,name=rewards,proto3" json:"rewards"`
}

func (m *QueryRewardsResponse) Reset()         { *m = QueryRewardsResponse{} }
func (m *QueryRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRewardsResponse) ProtoMessage()    {}
func (*QueryRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_225a8e3e0dd19415, []int{15}
}
func (m *QueryRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardsResponse.Merge(m, src)
}
func (m *QueryRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardsResponse proto.InternalMessageInfo

func (m *QueryRewardsResponse) GetRewards() []types.Coin {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "ununifi.nftmarket.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "ununifi.nftmarket.QueryParamsResponse")
	proto.RegisterType((*QueryNftListingRequest)(nil), "ununifi.nftmarket.QueryNftListingRequest")
	proto.RegisterType((*QueryNftListingResponse)(nil), "ununifi.nftmarket.QueryNftListingResponse")
	proto.RegisterType((*QueryListedNftsRequest)(nil), "ununifi.nftmarket.QueryListedNftsRequest")
	proto.RegisterType((*QueryListedNftsResponse)(nil), "ununifi.nftmarket.QueryListedNftsResponse")
	proto.RegisterType((*QueryLoansRequest)(nil), "ununifi.nftmarket.QueryLoansRequest")
	proto.RegisterType((*QueryLoansResponse)(nil), "ununifi.nftmarket.QueryLoansResponse")
	proto.RegisterType((*QueryCDPsListRequest)(nil), "ununifi.nftmarket.QueryCDPsListRequest")
	proto.RegisterType((*QueryCDPsListResponse)(nil), "ununifi.nftmarket.QueryCDPsListResponse")
	proto.RegisterType((*QueryNftBidsRequest)(nil), "ununifi.nftmarket.QueryNftBidsRequest")
	proto.RegisterType((*QueryNftBidsResponse)(nil), "ununifi.nftmarket.QueryNftBidsResponse")
	proto.RegisterType((*QueryBidderBidsRequest)(nil), "ununifi.nftmarket.QueryBidderBidsRequest")
	proto.RegisterType((*QueryBidderBidsResponse)(nil), "ununifi.nftmarket.QueryBidderBidsResponse")
	proto.RegisterType((*QueryRewardsRequest)(nil), "ununifi.nftmarket.QueryRewardsRequest")
	proto.RegisterType((*QueryRewardsResponse)(nil), "ununifi.nftmarket.QueryRewardsResponse")
}

func init() { proto.RegisterFile("nftmarket/query.proto", fileDescriptor_225a8e3e0dd19415) }

var fileDescriptor_225a8e3e0dd19415 = []byte{
	// 854 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xcf, 0x4f, 0x03, 0x45,
	0x18, 0xed, 0x22, 0x6d, 0x71, 0x8c, 0x07, 0x86, 0x5f, 0xed, 0x8a, 0x0b, 0x6e, 0xa0, 0xfc, 0x88,
	0xd9, 0x09, 0x60, 0x42, 0x24, 0xf1, 0x40, 0x21, 0x2a, 0x6a, 0x1a, 0xa8, 0x21, 0x31, 0x5e, 0x70,
	0xbb, 0xbb, 0x5d, 0x26, 0xb6, 0xb3, 0x65, 0x67, 0x8a, 0x02, 0xe9, 0x45, 0x2f, 0x26, 0x5e, 0x4c,
	0xf0, 0xee, 0xbf, 0xc3, 0x91, 0xc4, 0x8b, 0xf1, 0x40, 0x0c, 0x78, 0xf1, 0xea, 0x5f, 0x60, 0x76,
	0xe6, 0xdb, 0x6d, 0x61, 0x77, 0xad, 0x3f, 0x6e, 0xdd, 0xef, 0x7b, 0xf3, 0xde, 0x9b, 0x99, 0x6f,
	0x5e, 0x8a, 0xe6, 0x58, 0x5b, 0x74, 0xed, 0xf0, 0x4b, 0x4f, 0x90, 0x8b, 0xbe, 0x17, 0x5e, 0x59,
	0xbd, 0x30, 0x10, 0x01, 0x9e, 0xee, 0xb3, 0x3e, 0xa3, 0x6d, 0x6a, 0x25, 0x6d, 0x7d, 0xd6, 0x0f,
	0xfc, 0x40, 0x76, 0x49, 0xf4, 0x4b, 0x01, 0xf5, 0x45, 0x3f, 0x08, 0xfc, 0x8e, 0x47, 0xec, 0x1e,
	0x25, 0x36, 0x63, 0x81, 0xb0, 0x05, 0x0d, 0x18, 0x87, 0xee, 0xa6, 0x13, 0xf0, 0x6e, 0xc0, 0x49,
	0xcb, 0xe6, 0x9e, 0xe2, 0x27, 0x97, 0x5b, 0x2d, 0x4f, 0xd8, 0x5b, 0xa4, 0x67, 0xfb, 0x94, 0x49,
	0x30, 0x60, 0x8d, 0x51, 0x6c, 0x8c, 0x72, 0x02, 0x1a, 0xf7, 0xab, 0x43, 0xa7, 0xc9, 0x2f, 0xd5,
	0x32, 0x67, 0x11, 0x3e, 0x89, 0xc8, 0x8f, 0xed, 0xd0, 0xee, 0xf2, 0xa6, 0x77, 0xd1, 0xf7, 0xb8,
	0x30, 0x1b, 0x68, 0xe6, 0x59, 0x95, 0xf7, 0x02, 0xc6, 0x3d, 0xbc, 0x8b, 0x4a, 0x3d, 0x59, 0xa9,
	0x68, 0xcb, 0xda, 0xfa, 0x6b, 0xdb, 0x55, 0x2b, 0xb5, 0x57, 0x4b, 0x2d, 0xa9, 0x4f, 0xde, 0x3d,
	0x2c, 0x15, 0x9a, 0x00, 0x37, 0x3f, 0x42, 0xf3, 0x92, 0xaf, 0xd1, 0x16, 0x9f, 0x50, 0x2e, 0x28,
	0xf3, 0x41, 0x09, 0x57, 0xd1, 0x94, 0xd3, 0xb1, 0x39, 0x3f, 0xa3, 0xae, 0x24, 0x9d, 0x6c, 0x96,
	0xe5, 0xf7, 0x91, 0x8b, 0xe7, 0x50, 0x89, 0xb5, 0x45, 0xd4, 0x98, 0x90, 0x8d, 0x22, 0x6b, 0x8b,
	0x23, 0xd7, 0xfc, 0x0c, 0x2d, 0xa4, 0xb8, 0xc0, 0xdf, 0x7b, 0xa8, 0xdc, 0x51, 0x25, 0x30, 0xf8,
	0x66, 0x86, 0xc1, 0xe1, 0x3a, 0x30, 0x19, 0xaf, 0x31, 0x2b, 0xe0, 0x32, 0x6a, 0x7b, 0x6e, 0xa3,
	0x2d, 0x92, 0xf3, 0x88, 0x35, 0x47, 0x3b, 0x59, 0x9a, 0xaf, 0xfc, 0x6b, 0xcd, 0x19, 0x34, 0xad,
	0x98, 0x03, 0x9b, 0x25, 0x72, 0x47, 0x70, 0x29, 0x50, 0x04, 0xa5, 0x1d, 0x54, 0xec, 0x44, 0x05,
	0xd0, 0x59, 0xc8, 0xd0, 0x89, 0x16, 0x80, 0x82, 0xc2, 0x9a, 0xf3, 0x68, 0x56, 0x52, 0x1d, 0x1c,
	0x1e, 0xf3, 0xc8, 0x42, 0x2c, 0xb1, 0x80, 0xe6, 0x5e, 0xd4, 0x95, 0x8a, 0xf9, 0x01, 0x5c, 0x7d,
	0xa3, 0x2d, 0xea, 0xd4, 0xe5, 0xff, 0xfd, 0x9e, 0x3e, 0x06, 0xe5, 0x84, 0x28, 0xd9, 0xc6, 0x64,
	0x8b, 0xba, 0xf1, 0x2e, 0xaa, 0xd9, 0xa7, 0x55, 0xa7, 0x2e, 0xec, 0x43, 0x82, 0xcd, 0x6b, 0xb8,
	0x9a, 0x3a, 0x75, 0x5d, 0x2f, 0x1c, 0x35, 0xf6, 0x05, 0x2a, 0xb5, 0x64, 0x51, 0xda, 0x7a, 0xb5,
	0xfe, 0x61, 0xb4, 0xea, 0xd7, 0x87, 0x25, 0xe2, 0x53, 0x71, 0xde, 0x6f, 0x59, 0x4e, 0xd0, 0x25,
	0xa7, 0xec, 0x94, 0xd1, 0xf7, 0x29, 0x71, 0xce, 0x6d, 0xca, 0x88, 0xb8, 0xea, 0x79, 0xdc, 0xfa,
	0x54, 0x84, 0x94, 0xf9, 0xfb, 0x8e, 0xb3, 0xef, 0xba, 0xa1, 0xc7, 0xf9, 0x9f, 0x0f, 0x4b, 0xaf,
	0x5f, 0xd9, 0xdd, 0xce, 0x9e, 0xa9, 0xe8, 0xcc, 0x26, 0xf0, 0x9a, 0x0d, 0xb8, 0xfc, 0x51, 0xed,
	0xff, 0xb3, 0x17, 0x02, 0x27, 0xdc, 0xf4, 0xbe, 0xb2, 0xc3, 0xe1, 0x46, 0x2a, 0xa8, 0x6c, 0x2b,
	0x2b, 0xf1, 0x01, 0xc3, 0xa7, 0x79, 0x02, 0x27, 0x99, 0x2c, 0x00, 0xf5, 0x77, 0x51, 0x39, 0x54,
	0xa5, 0xc4, 0x80, 0x0a, 0x02, 0x2b, 0x0a, 0x02, 0x0b, 0x82, 0xc0, 0x3a, 0x08, 0x68, 0x3c, 0x14,
	0x31, 0x7e, 0xfb, 0x8f, 0x29, 0x54, 0x94, 0x9c, 0xf8, 0x1a, 0x95, 0xd4, 0x93, 0xc5, 0xab, 0x19,
	0xf6, 0xd3, 0xd9, 0xa0, 0xd7, 0xc6, 0xc1, 0x60, 0x90, 0xde, 0xfa, 0xe6, 0xe7, 0xdf, 0x6f, 0x27,
	0xde, 0xc0, 0x55, 0x02, 0xf8, 0x61, 0xf6, 0x10, 0x15, 0x0b, 0xf8, 0x27, 0x0d, 0xa1, 0xe1, 0xd3,
	0xc0, 0x1b, 0x79, 0xcc, 0xa9, 0xd8, 0xd0, 0x37, 0xff, 0x09, 0x14, 0x8c, 0xec, 0x49, 0x23, 0xef,
	0xe0, 0xed, 0x0c, 0x23, 0xd1, 0xe0, 0xc2, 0x53, 0x24, 0x37, 0xf1, 0x80, 0x0f, 0xc8, 0x8d, 0x1a,
	0xe8, 0x01, 0xfe, 0x5e, 0x43, 0x68, 0xf8, 0xe8, 0xf3, 0x1d, 0xa6, 0x22, 0x23, 0xdf, 0x61, 0x3a,
	0x43, 0xcc, 0x9a, 0x74, 0xb8, 0x8c, 0x8d, 0x0c, 0x87, 0x1d, 0x09, 0x3f, 0x63, 0x91, 0xfc, 0x25,
	0x2a, 0xca, 0x48, 0xc0, 0x2b, 0xb9, 0xe4, 0x23, 0x31, 0xa2, 0xaf, 0x8e, 0x41, 0x81, 0xfa, 0xb2,
	0x54, 0xd7, 0x71, 0x25, 0x4b, 0x5d, 0xca, 0x7d, 0xab, 0xa1, 0xa9, 0x38, 0x28, 0xf0, 0x5a, 0x1e,
	0xeb, 0x8b, 0x88, 0xd1, 0xd7, 0xc7, 0x03, 0xc1, 0xc1, 0x8a, 0x74, 0x60, 0xe0, 0xc5, 0x0c, 0x07,
	0x8e, 0xdb, 0xe3, 0xf2, 0x8a, 0xf0, 0xad, 0x86, 0xca, 0x10, 0x26, 0xb8, 0xf6, 0x37, 0xf7, 0x3f,
	0x92, 0x0e, 0xfa, 0xda, 0x58, 0x1c, 0x58, 0xd8, 0x95, 0x16, 0xb6, 0x30, 0xc9, 0x19, 0x92, 0xe8,
	0xe5, 0x66, 0x4e, 0xc8, 0x8f, 0x1a, 0x42, 0xc3, 0x64, 0xc8, 0x9f, 0x90, 0x54, 0x72, 0xe5, 0x4f,
	0x48, 0x3a, 0x68, 0x4c, 0x22, 0xed, 0x6d, 0xe0, 0xb5, 0x0c, 0x7b, 0x2a, 0xa6, 0xc0, 0xa1, 0xfa,
	0x18, 0xe0, 0xef, 0x34, 0x54, 0x86, 0xbc, 0xc8, 0x3f, 0xac, 0xe7, 0x09, 0x94, 0x7f, 0x58, 0x2f,
	0x82, 0xc7, 0x7c, 0x5b, 0xba, 0xa9, 0xe1, 0x95, 0x0c, 0x37, 0x90, 0x30, 0xe4, 0x06, 0xd2, 0x6b,
	0x50, 0x3f, 0xbc, 0x7b, 0x34, 0xb4, 0xfb, 0x47, 0x43, 0xfb, 0xed, 0xd1, 0xd0, 0x7e, 0x78, 0x32,
	0x0a, 0xf7, 0x4f, 0x46, 0xe1, 0x97, 0x27, 0xa3, 0xf0, 0xf9, 0x66, 0x6e, 0x46, 0x7f, 0x3d, 0xc2,
	0x28, 0xf3, 0xba, 0x55, 0x92, 0xff, 0x57, 0x76, 0xfe, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xf4, 0x06,
	0xd4, 0x5e, 0x76, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	NftListing(ctx context.Context, in *QueryNftListingRequest, opts ...grpc.CallOption) (*QueryNftListingResponse, error)
	ListedNfts(ctx context.Context, in *QueryListedNftsRequest, opts ...grpc.CallOption) (*QueryListedNftsResponse, error)
	Loans(ctx context.Context, in *QueryLoansRequest, opts ...grpc.CallOption) (*QueryLoansResponse, error)
	CDPsList(ctx context.Context, in *QueryCDPsListRequest, opts ...grpc.CallOption) (*QueryCDPsListResponse, error)
	NftBids(ctx context.Context, in *QueryNftBidsRequest, opts ...grpc.CallOption) (*QueryNftBidsResponse, error)
	BidderBids(ctx context.Context, in *QueryBidderBidsRequest, opts ...grpc.CallOption) (*QueryBidderBidsResponse, error)
	Rewards(ctx context.Context, in *QueryRewardsRequest, opts ...grpc.CallOption) (*QueryRewardsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/ununifi.nftmarket.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NftListing(ctx context.Context, in *QueryNftListingRequest, opts ...grpc.CallOption) (*QueryNftListingResponse, error) {
	out := new(QueryNftListingResponse)
	err := c.cc.Invoke(ctx, "/ununifi.nftmarket.Query/NftListing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListedNfts(ctx context.Context, in *QueryListedNftsRequest, opts ...grpc.CallOption) (*QueryListedNftsResponse, error) {
	out := new(QueryListedNftsResponse)
	err := c.cc.Invoke(ctx, "/ununifi.nftmarket.Query/ListedNfts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Loans(ctx context.Context, in *QueryLoansRequest, opts ...grpc.CallOption) (*QueryLoansResponse, error) {
	out := new(QueryLoansResponse)
	err := c.cc.Invoke(ctx, "/ununifi.nftmarket.Query/Loans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CDPsList(ctx context.Context, in *QueryCDPsListRequest, opts ...grpc.CallOption) (*QueryCDPsListResponse, error) {
	out := new(QueryCDPsListResponse)
	err := c.cc.Invoke(ctx, "/ununifi.nftmarket.Query/CDPsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NftBids(ctx context.Context, in *QueryNftBidsRequest, opts ...grpc.CallOption) (*QueryNftBidsResponse, error) {
	out := new(QueryNftBidsResponse)
	err := c.cc.Invoke(ctx, "/ununifi.nftmarket.Query/NftBids", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BidderBids(ctx context.Context, in *QueryBidderBidsRequest, opts ...grpc.CallOption) (*QueryBidderBidsResponse, error) {
	out := new(QueryBidderBidsResponse)
	err := c.cc.Invoke(ctx, "/ununifi.nftmarket.Query/BidderBids", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Rewards(ctx context.Context, in *QueryRewardsRequest, opts ...grpc.CallOption) (*QueryRewardsResponse, error) {
	out := new(QueryRewardsResponse)
	err := c.cc.Invoke(ctx, "/ununifi.nftmarket.Query/Rewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	NftListing(context.Context, *QueryNftListingRequest) (*QueryNftListingResponse, error)
	ListedNfts(context.Context, *QueryListedNftsRequest) (*QueryListedNftsResponse, error)
	Loans(context.Context, *QueryLoansRequest) (*QueryLoansResponse, error)
	CDPsList(context.Context, *QueryCDPsListRequest) (*QueryCDPsListResponse, error)
	NftBids(context.Context, *QueryNftBidsRequest) (*QueryNftBidsResponse, error)
	BidderBids(context.Context, *QueryBidderBidsRequest) (*QueryBidderBidsResponse, error)
	Rewards(context.Context, *QueryRewardsRequest) (*QueryRewardsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) NftListing(ctx context.Context, req *QueryNftListingRequest) (*QueryNftListingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NftListing not implemented")
}
func (*UnimplementedQueryServer) ListedNfts(ctx context.Context, req *QueryListedNftsRequest) (*QueryListedNftsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListedNfts not implemented")
}
func (*UnimplementedQueryServer) Loans(ctx context.Context, req *QueryLoansRequest) (*QueryLoansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Loans not implemented")
}
func (*UnimplementedQueryServer) CDPsList(ctx context.Context, req *QueryCDPsListRequest) (*QueryCDPsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CDPsList not implemented")
}
func (*UnimplementedQueryServer) NftBids(ctx context.Context, req *QueryNftBidsRequest) (*QueryNftBidsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NftBids not implemented")
}
func (*UnimplementedQueryServer) BidderBids(ctx context.Context, req *QueryBidderBidsRequest) (*QueryBidderBidsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BidderBids not implemented")
}
func (*UnimplementedQueryServer) Rewards(ctx context.Context, req *QueryRewardsRequest) (*QueryRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rewards not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.nftmarket.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NftListing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNftListingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NftListing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.nftmarket.Query/NftListing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NftListing(ctx, req.(*QueryNftListingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListedNfts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListedNftsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListedNfts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.nftmarket.Query/ListedNfts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListedNfts(ctx, req.(*QueryListedNftsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Loans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLoansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Loans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.nftmarket.Query/Loans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Loans(ctx, req.(*QueryLoansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CDPsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCDPsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CDPsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.nftmarket.Query/CDPsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CDPsList(ctx, req.(*QueryCDPsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NftBids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNftBidsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NftBids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.nftmarket.Query/NftBids",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NftBids(ctx, req.(*QueryNftBidsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BidderBids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBidderBidsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BidderBids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.nftmarket.Query/BidderBids",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BidderBids(ctx, req.(*QueryBidderBidsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Rewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Rewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ununifi.nftmarket.Query/Rewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Rewards(ctx, req.(*QueryRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ununifi.nftmarket.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "NftListing",
			Handler:    _Query_NftListing_Handler,
		},
		{
			MethodName: "ListedNfts",
			Handler:    _Query_ListedNfts_Handler,
		},
		{
			MethodName: "Loans",
			Handler:    _Query_Loans_Handler,
		},
		{
			MethodName: "CDPsList",
			Handler:    _Query_CDPsList_Handler,
		},
		{
			MethodName: "NftBids",
			Handler:    _Query_NftBids_Handler,
		},
		{
			MethodName: "BidderBids",
			Handler:    _Query_BidderBids_Handler,
		},
		{
			MethodName: "Rewards",
			Handler:    _Query_Rewards_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nftmarket/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryNftListingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNftListingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNftListingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NftId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.NftId))
		i--
		dAtA[i] = 0x10
	}
	if m.ClassId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ClassId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryNftListingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNftListingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNftListingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Listing.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryListedNftsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListedNftsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListedNftsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryListedNftsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListedNftsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListedNftsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Listing) > 0 {
		for iNdEx := len(m.Listing) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Listing[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLoansRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLoansRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLoansRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryLoansResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLoansResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLoansResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Loans) > 0 {
		for iNdEx := len(m.Loans) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Loans[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryCDPsListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCDPsListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCDPsListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryCDPsListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCDPsListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCDPsListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryNftBidsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNftBidsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNftBidsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NftId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.NftId))
		i--
		dAtA[i] = 0x10
	}
	if m.ClassId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ClassId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryNftBidsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNftBidsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNftBidsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bids) > 0 {
		for iNdEx := len(m.Bids) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bids[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBidderBidsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBidderBidsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBidderBidsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Bidder.Size()
		i -= size
		if _, err := m.Bidder.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryBidderBidsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBidderBidsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBidderBidsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bids) > 0 {
		for iNdEx := len(m.Bids) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bids[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRewardsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Address != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Address))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryNftListingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClassId != 0 {
		n += 1 + sovQuery(uint64(m.ClassId))
	}
	if m.NftId != 0 {
		n += 1 + sovQuery(uint64(m.NftId))
	}
	return n
}

func (m *QueryNftListingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Listing.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryListedNftsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryListedNftsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Listing) > 0 {
		for _, e := range m.Listing {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryLoansRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryLoansResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Loans) > 0 {
		for _, e := range m.Loans {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryCDPsListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryCDPsListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryNftBidsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClassId != 0 {
		n += 1 + sovQuery(uint64(m.ClassId))
	}
	if m.NftId != 0 {
		n += 1 + sovQuery(uint64(m.NftId))
	}
	return n
}

func (m *QueryNftBidsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Bids) > 0 {
		for _, e := range m.Bids {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryBidderBidsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Bidder.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryBidderBidsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Bids) > 0 {
		for _, e := range m.Bids {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryRewardsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Address != 0 {
		n += 1 + sovQuery(uint64(m.Address))
	}
	return n
}

func (m *QueryRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNftListingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNftListingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNftListingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			m.ClassId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			m.NftId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NftId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNftListingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNftListingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNftListingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Listing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Listing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListedNftsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListedNftsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListedNftsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListedNftsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListedNftsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListedNftsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Listing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Listing = append(m.Listing, NftListing{})
			if err := m.Listing[len(m.Listing)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLoansRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLoansRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLoansRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLoansResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLoansResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLoansResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Loans = append(m.Loans, Loan{})
			if err := m.Loans[len(m.Loans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCDPsListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCDPsListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCDPsListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCDPsListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCDPsListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCDPsListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNftBidsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNftBidsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNftBidsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			m.ClassId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			m.NftId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NftId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNftBidsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNftBidsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNftBidsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bids = append(m.Bids, NftBid{})
			if err := m.Bids[len(m.Bids)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBidderBidsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBidderBidsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBidderBidsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Bidder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBidderBidsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBidderBidsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBidderBidsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bids = append(m.Bids, NftBid{})
			if err := m.Bids[len(m.Bids)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			m.Address = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Address |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, types.Coin{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
