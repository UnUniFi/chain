// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nftmarket/nftmarket.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ListingType int32

const (
	ListingType_DIRECT_ASSET_BORROW      ListingType = 0
	ListingType_SYNTHETIC_ASSET_CREATION ListingType = 1
	ListingType_LATE_SHIPPING            ListingType = 2
)

var ListingType_name = map[int32]string{
	0: "DIRECT_ASSET_BORROW",
	1: "SYNTHETIC_ASSET_CREATION",
	2: "LATE_SHIPPING",
}

var ListingType_value = map[string]int32{
	"DIRECT_ASSET_BORROW":      0,
	"SYNTHETIC_ASSET_CREATION": 1,
	"LATE_SHIPPING":            2,
}

func (x ListingType) String() string {
	return proto.EnumName(ListingType_name, int32(x))
}

func (ListingType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f0570683065f368b, []int{0}
}

type ListingState int32

const (
	ListingState_SELLING        ListingState = 0
	ListingState_BIDDING        ListingState = 1
	ListingState_LIQUIDATION    ListingState = 2
	ListingState_END_LISTING    ListingState = 3
	ListingState_SUCCESSFUL_BID ListingState = 4
)

var ListingState_name = map[int32]string{
	0: "SELLING",
	1: "BIDDING",
	2: "LIQUIDATION",
	3: "END_LISTING",
	4: "SUCCESSFUL_BID",
}

var ListingState_value = map[string]int32{
	"SELLING":        0,
	"BIDDING":        1,
	"LIQUIDATION":    2,
	"END_LISTING":    3,
	"SUCCESSFUL_BID": 4,
}

func (x ListingState) String() string {
	return proto.EnumName(ListingState_name, int32(x))
}

func (ListingState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f0570683065f368b, []int{1}
}

type NftIdentifier struct {
	ClassId string `protobuf:"bytes,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	NftId   string `protobuf:"bytes,2,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
}

func (m *NftIdentifier) Reset()         { *m = NftIdentifier{} }
func (m *NftIdentifier) String() string { return proto.CompactTextString(m) }
func (*NftIdentifier) ProtoMessage()    {}
func (*NftIdentifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0570683065f368b, []int{0}
}
func (m *NftIdentifier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NftIdentifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NftIdentifier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NftIdentifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NftIdentifier.Merge(m, src)
}
func (m *NftIdentifier) XXX_Size() int {
	return m.Size()
}
func (m *NftIdentifier) XXX_DiscardUnknown() {
	xxx_messageInfo_NftIdentifier.DiscardUnknown(m)
}

var xxx_messageInfo_NftIdentifier proto.InternalMessageInfo

func (m *NftIdentifier) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *NftIdentifier) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

type Loan struct {
	NftId NftIdentifier `protobuf:"bytes,1,opt,name=nft_id,json=nftId,proto3" json:"nft_id"`
	Loan  types.Coin    `protobuf:"bytes,2,opt,name=loan,proto3" json:"loan"`
}

func (m *Loan) Reset()         { *m = Loan{} }
func (m *Loan) String() string { return proto.CompactTextString(m) }
func (*Loan) ProtoMessage()    {}
func (*Loan) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0570683065f368b, []int{1}
}
func (m *Loan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Loan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Loan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Loan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Loan.Merge(m, src)
}
func (m *Loan) XXX_Size() int {
	return m.Size()
}
func (m *Loan) XXX_DiscardUnknown() {
	xxx_messageInfo_Loan.DiscardUnknown(m)
}

var xxx_messageInfo_Loan proto.InternalMessageInfo

func (m *Loan) GetNftId() NftIdentifier {
	if m != nil {
		return m.NftId
	}
	return NftIdentifier{}
}

func (m *Loan) GetLoan() types.Coin {
	if m != nil {
		return m.Loan
	}
	return types.Coin{}
}

type NftListing struct {
	NftId             NftIdentifier                          `protobuf:"bytes,1,opt,name=nft_id,json=nftId,proto3" json:"nft_id"`
	Owner             string                                 `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	ListingType       ListingType                            `protobuf:"varint,3,opt,name=listing_type,json=listingType,proto3,enum=ununifi.nftmarket.ListingType" json:"listing_type,omitempty"`
	State             ListingState                           `protobuf:"varint,4,opt,name=state,proto3,enum=ununifi.nftmarket.ListingState" json:"state,omitempty"`
	BidToken          string                                 `protobuf:"bytes,5,opt,name=bid_token,json=bidToken,proto3" json:"bid_token,omitempty"`
	MinBid            github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=min_bid,json=minBid,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"min_bid" yaml:"min_bid"`
	BidActiveRank     uint64                                 `protobuf:"varint,7,opt,name=bid_active_rank,json=bidActiveRank,proto3" json:"bid_active_rank,omitempty"`
	StartedAt         time.Time                              `protobuf:"bytes,8,opt,name=started_at,json=startedAt,proto3,stdtime" json:"started_at" yaml:"started_at"`
	EndAt             time.Time                              `protobuf:"bytes,9,opt,name=end_at,json=endAt,proto3,stdtime" json:"end_at" yaml:"end_at"`
	AutoRelistedCount uint64                                 `protobuf:"varint,10,opt,name=auto_relisted_count,json=autoRelistedCount,proto3" json:"auto_relisted_count,omitempty"`
}

func (m *NftListing) Reset()         { *m = NftListing{} }
func (m *NftListing) String() string { return proto.CompactTextString(m) }
func (*NftListing) ProtoMessage()    {}
func (*NftListing) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0570683065f368b, []int{2}
}
func (m *NftListing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NftListing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NftListing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NftListing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NftListing.Merge(m, src)
}
func (m *NftListing) XXX_Size() int {
	return m.Size()
}
func (m *NftListing) XXX_DiscardUnknown() {
	xxx_messageInfo_NftListing.DiscardUnknown(m)
}

var xxx_messageInfo_NftListing proto.InternalMessageInfo

func (m *NftListing) GetNftId() NftIdentifier {
	if m != nil {
		return m.NftId
	}
	return NftIdentifier{}
}

func (m *NftListing) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *NftListing) GetListingType() ListingType {
	if m != nil {
		return m.ListingType
	}
	return ListingType_DIRECT_ASSET_BORROW
}

func (m *NftListing) GetState() ListingState {
	if m != nil {
		return m.State
	}
	return ListingState_SELLING
}

func (m *NftListing) GetBidToken() string {
	if m != nil {
		return m.BidToken
	}
	return ""
}

func (m *NftListing) GetBidActiveRank() uint64 {
	if m != nil {
		return m.BidActiveRank
	}
	return 0
}

func (m *NftListing) GetStartedAt() time.Time {
	if m != nil {
		return m.StartedAt
	}
	return time.Time{}
}

func (m *NftListing) GetEndAt() time.Time {
	if m != nil {
		return m.EndAt
	}
	return time.Time{}
}

func (m *NftListing) GetAutoRelistedCount() uint64 {
	if m != nil {
		return m.AutoRelistedCount
	}
	return 0
}

type NftBid struct {
	NftId            NftIdentifier                          `protobuf:"bytes,1,opt,name=nft_id,json=nftId,proto3" json:"nft_id"`
	Bidder           string                                 `protobuf:"bytes,2,opt,name=bidder,proto3" json:"bidder,omitempty"`
	Amount           types.Coin                             `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
	AutomaticPayment bool                                   `protobuf:"varint,4,opt,name=automatic_payment,json=automaticPayment,proto3" json:"automatic_payment,omitempty"`
	PaidAmount       github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=paid_amount,json=paidAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"paid_amount" yaml:"paid_amount"`
}

func (m *NftBid) Reset()         { *m = NftBid{} }
func (m *NftBid) String() string { return proto.CompactTextString(m) }
func (*NftBid) ProtoMessage()    {}
func (*NftBid) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0570683065f368b, []int{3}
}
func (m *NftBid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NftBid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NftBid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NftBid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NftBid.Merge(m, src)
}
func (m *NftBid) XXX_Size() int {
	return m.Size()
}
func (m *NftBid) XXX_DiscardUnknown() {
	xxx_messageInfo_NftBid.DiscardUnknown(m)
}

var xxx_messageInfo_NftBid proto.InternalMessageInfo

func (m *NftBid) GetNftId() NftIdentifier {
	if m != nil {
		return m.NftId
	}
	return NftIdentifier{}
}

func (m *NftBid) GetBidder() string {
	if m != nil {
		return m.Bidder
	}
	return ""
}

func (m *NftBid) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *NftBid) GetAutomaticPayment() bool {
	if m != nil {
		return m.AutomaticPayment
	}
	return false
}

type Params struct {
	MinStakingForListing               github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=min_staking_for_listing,json=minStakingForListing,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"min_staking_for_listing" yaml:"min_staking_for_listing"`
	DefaultBidActiveRank               uint64                                 `protobuf:"varint,2,opt,name=default_bid_active_rank,json=defaultBidActiveRank,proto3" json:"default_bid_active_rank,omitempty"`
	BidTokens                          []string                               `protobuf:"bytes,3,rep,name=bid_tokens,json=bidTokens,proto3" json:"bid_tokens,omitempty"`
	AutoRelistingCountIfNoBid          uint64                                 `protobuf:"varint,4,opt,name=auto_relisting_count_if_no_bid,json=autoRelistingCountIfNoBid,proto3" json:"auto_relisting_count_if_no_bid,omitempty"`
	NftListingDelaySeconds             uint64                                 `protobuf:"varint,5,opt,name=nft_listing_delay_seconds,json=nftListingDelaySeconds,proto3" json:"nft_listing_delay_seconds,omitempty"`
	NftListingPeriodInitial            uint64                                 `protobuf:"varint,6,opt,name=nft_listing_period_initial,json=nftListingPeriodInitial,proto3" json:"nft_listing_period_initial,omitempty"`
	NftListingCancelRequiredSeconds    uint64                                 `protobuf:"varint,7,opt,name=nft_listing_cancel_required_seconds,json=nftListingCancelRequiredSeconds,proto3" json:"nft_listing_cancel_required_seconds,omitempty"`
	NftListingCancelFeePercentage      uint64                                 `protobuf:"varint,8,opt,name=nft_listing_cancel_fee_percentage,json=nftListingCancelFeePercentage,proto3" json:"nft_listing_cancel_fee_percentage,omitempty"`
	NftListingGapTime                  uint64                                 `protobuf:"varint,9,opt,name=nft_listing_gap_time,json=nftListingGapTime,proto3" json:"nft_listing_gap_time,omitempty"`
	BidCancelRequiredSeconds           uint64                                 `protobuf:"varint,10,opt,name=bid_cancel_required_seconds,json=bidCancelRequiredSeconds,proto3" json:"bid_cancel_required_seconds,omitempty"`
	BidTokenDisburseSecondsAfterCancel uint64                                 `protobuf:"varint,11,opt,name=bid_token_disburse_seconds_after_cancel,json=bidTokenDisburseSecondsAfterCancel,proto3" json:"bid_token_disburse_seconds_after_cancel,omitempty"`
	NftListingFullPaymentPeriod        uint64                                 `protobuf:"varint,12,opt,name=nft_listing_full_payment_period,json=nftListingFullPaymentPeriod,proto3" json:"nft_listing_full_payment_period,omitempty"`
	NftListingNftDeliveryPeriod        uint64                                 `protobuf:"varint,13,opt,name=nft_listing_nft_delivery_period,json=nftListingNftDeliveryPeriod,proto3" json:"nft_listing_nft_delivery_period,omitempty"`
	NftCreatorSharePercentage          uint64                                 `protobuf:"varint,14,opt,name=nft_creator_share_percentage,json=nftCreatorSharePercentage,proto3" json:"nft_creator_share_percentage,omitempty"`
	MarketAdministrator                string                                 `protobuf:"bytes,15,opt,name=market_administrator,json=marketAdministrator,proto3" json:"market_administrator,omitempty"`
	NftListingCommissionFee            types.Coin                             `protobuf:"bytes,16,opt,name=nft_listing_commission_fee,json=nftListingCommissionFee,proto3" json:"nft_listing_commission_fee"`
	NftListingExtendSeconds            uint64                                 `protobuf:"varint,17,opt,name=nft_listing_extend_seconds,json=nftListingExtendSeconds,proto3" json:"nft_listing_extend_seconds,omitempty"`
	NftListingPeriodExtendFeePerHour   types.Coin                             `protobuf:"bytes,18,opt,name=nft_listing_period_extend_fee_per_hour,json=nftListingPeriodExtendFeePerHour,proto3" json:"nft_listing_period_extend_fee_per_hour"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0570683065f368b, []int{4}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetDefaultBidActiveRank() uint64 {
	if m != nil {
		return m.DefaultBidActiveRank
	}
	return 0
}

func (m *Params) GetBidTokens() []string {
	if m != nil {
		return m.BidTokens
	}
	return nil
}

func (m *Params) GetAutoRelistingCountIfNoBid() uint64 {
	if m != nil {
		return m.AutoRelistingCountIfNoBid
	}
	return 0
}

func (m *Params) GetNftListingDelaySeconds() uint64 {
	if m != nil {
		return m.NftListingDelaySeconds
	}
	return 0
}

func (m *Params) GetNftListingPeriodInitial() uint64 {
	if m != nil {
		return m.NftListingPeriodInitial
	}
	return 0
}

func (m *Params) GetNftListingCancelRequiredSeconds() uint64 {
	if m != nil {
		return m.NftListingCancelRequiredSeconds
	}
	return 0
}

func (m *Params) GetNftListingCancelFeePercentage() uint64 {
	if m != nil {
		return m.NftListingCancelFeePercentage
	}
	return 0
}

func (m *Params) GetNftListingGapTime() uint64 {
	if m != nil {
		return m.NftListingGapTime
	}
	return 0
}

func (m *Params) GetBidCancelRequiredSeconds() uint64 {
	if m != nil {
		return m.BidCancelRequiredSeconds
	}
	return 0
}

func (m *Params) GetBidTokenDisburseSecondsAfterCancel() uint64 {
	if m != nil {
		return m.BidTokenDisburseSecondsAfterCancel
	}
	return 0
}

func (m *Params) GetNftListingFullPaymentPeriod() uint64 {
	if m != nil {
		return m.NftListingFullPaymentPeriod
	}
	return 0
}

func (m *Params) GetNftListingNftDeliveryPeriod() uint64 {
	if m != nil {
		return m.NftListingNftDeliveryPeriod
	}
	return 0
}

func (m *Params) GetNftCreatorSharePercentage() uint64 {
	if m != nil {
		return m.NftCreatorSharePercentage
	}
	return 0
}

func (m *Params) GetMarketAdministrator() string {
	if m != nil {
		return m.MarketAdministrator
	}
	return ""
}

func (m *Params) GetNftListingCommissionFee() types.Coin {
	if m != nil {
		return m.NftListingCommissionFee
	}
	return types.Coin{}
}

func (m *Params) GetNftListingExtendSeconds() uint64 {
	if m != nil {
		return m.NftListingExtendSeconds
	}
	return 0
}

func (m *Params) GetNftListingPeriodExtendFeePerHour() types.Coin {
	if m != nil {
		return m.NftListingPeriodExtendFeePerHour
	}
	return types.Coin{}
}

type EventListNft struct {
	Owner   string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	ClassId string `protobuf:"bytes,2,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	NftId   string `protobuf:"bytes,3,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
}

func (m *EventListNft) Reset()         { *m = EventListNft{} }
func (m *EventListNft) String() string { return proto.CompactTextString(m) }
func (*EventListNft) ProtoMessage()    {}
func (*EventListNft) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0570683065f368b, []int{5}
}
func (m *EventListNft) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventListNft) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventListNft.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventListNft) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventListNft.Merge(m, src)
}
func (m *EventListNft) XXX_Size() int {
	return m.Size()
}
func (m *EventListNft) XXX_DiscardUnknown() {
	xxx_messageInfo_EventListNft.DiscardUnknown(m)
}

var xxx_messageInfo_EventListNft proto.InternalMessageInfo

func (m *EventListNft) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *EventListNft) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *EventListNft) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

type EventCancelListNfting struct {
	Owner   string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	ClassId string `protobuf:"bytes,2,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	NftId   string `protobuf:"bytes,3,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
}

func (m *EventCancelListNfting) Reset()         { *m = EventCancelListNfting{} }
func (m *EventCancelListNfting) String() string { return proto.CompactTextString(m) }
func (*EventCancelListNfting) ProtoMessage()    {}
func (*EventCancelListNfting) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0570683065f368b, []int{6}
}
func (m *EventCancelListNfting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCancelListNfting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCancelListNfting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCancelListNfting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCancelListNfting.Merge(m, src)
}
func (m *EventCancelListNfting) XXX_Size() int {
	return m.Size()
}
func (m *EventCancelListNfting) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCancelListNfting.DiscardUnknown(m)
}

var xxx_messageInfo_EventCancelListNfting proto.InternalMessageInfo

func (m *EventCancelListNfting) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *EventCancelListNfting) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *EventCancelListNfting) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

type EventExpandListingPeriod struct {
	Owner   string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	ClassId string `protobuf:"bytes,2,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	NftId   string `protobuf:"bytes,3,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
}

func (m *EventExpandListingPeriod) Reset()         { *m = EventExpandListingPeriod{} }
func (m *EventExpandListingPeriod) String() string { return proto.CompactTextString(m) }
func (*EventExpandListingPeriod) ProtoMessage()    {}
func (*EventExpandListingPeriod) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0570683065f368b, []int{7}
}
func (m *EventExpandListingPeriod) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventExpandListingPeriod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventExpandListingPeriod.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventExpandListingPeriod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventExpandListingPeriod.Merge(m, src)
}
func (m *EventExpandListingPeriod) XXX_Size() int {
	return m.Size()
}
func (m *EventExpandListingPeriod) XXX_DiscardUnknown() {
	xxx_messageInfo_EventExpandListingPeriod.DiscardUnknown(m)
}

var xxx_messageInfo_EventExpandListingPeriod proto.InternalMessageInfo

func (m *EventExpandListingPeriod) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *EventExpandListingPeriod) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *EventExpandListingPeriod) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

type EventEndListNfting struct {
	Owner   string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	ClassId string `protobuf:"bytes,2,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	NftId   string `protobuf:"bytes,3,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
}

func (m *EventEndListNfting) Reset()         { *m = EventEndListNfting{} }
func (m *EventEndListNfting) String() string { return proto.CompactTextString(m) }
func (*EventEndListNfting) ProtoMessage()    {}
func (*EventEndListNfting) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0570683065f368b, []int{8}
}
func (m *EventEndListNfting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventEndListNfting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventEndListNfting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventEndListNfting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventEndListNfting.Merge(m, src)
}
func (m *EventEndListNfting) XXX_Size() int {
	return m.Size()
}
func (m *EventEndListNfting) XXX_DiscardUnknown() {
	xxx_messageInfo_EventEndListNfting.DiscardUnknown(m)
}

var xxx_messageInfo_EventEndListNfting proto.InternalMessageInfo

func (m *EventEndListNfting) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *EventEndListNfting) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *EventEndListNfting) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

type EventPlaceBid struct {
	Bidder  string `protobuf:"bytes,1,opt,name=bidder,proto3" json:"bidder,omitempty"`
	ClassId string `protobuf:"bytes,2,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	NftId   string `protobuf:"bytes,3,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
	Amount  string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *EventPlaceBid) Reset()         { *m = EventPlaceBid{} }
func (m *EventPlaceBid) String() string { return proto.CompactTextString(m) }
func (*EventPlaceBid) ProtoMessage()    {}
func (*EventPlaceBid) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0570683065f368b, []int{9}
}
func (m *EventPlaceBid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPlaceBid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPlaceBid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPlaceBid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPlaceBid.Merge(m, src)
}
func (m *EventPlaceBid) XXX_Size() int {
	return m.Size()
}
func (m *EventPlaceBid) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPlaceBid.DiscardUnknown(m)
}

var xxx_messageInfo_EventPlaceBid proto.InternalMessageInfo

func (m *EventPlaceBid) GetBidder() string {
	if m != nil {
		return m.Bidder
	}
	return ""
}

func (m *EventPlaceBid) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *EventPlaceBid) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

func (m *EventPlaceBid) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type EventCancelBid struct {
	Bidder  string `protobuf:"bytes,1,opt,name=bidder,proto3" json:"bidder,omitempty"`
	ClassId string `protobuf:"bytes,2,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	NftId   string `protobuf:"bytes,3,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
}

func (m *EventCancelBid) Reset()         { *m = EventCancelBid{} }
func (m *EventCancelBid) String() string { return proto.CompactTextString(m) }
func (*EventCancelBid) ProtoMessage()    {}
func (*EventCancelBid) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0570683065f368b, []int{10}
}
func (m *EventCancelBid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCancelBid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCancelBid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCancelBid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCancelBid.Merge(m, src)
}
func (m *EventCancelBid) XXX_Size() int {
	return m.Size()
}
func (m *EventCancelBid) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCancelBid.DiscardUnknown(m)
}

var xxx_messageInfo_EventCancelBid proto.InternalMessageInfo

func (m *EventCancelBid) GetBidder() string {
	if m != nil {
		return m.Bidder
	}
	return ""
}

func (m *EventCancelBid) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *EventCancelBid) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

type EventPayFullBid struct {
	Bidder  string `protobuf:"bytes,1,opt,name=bidder,proto3" json:"bidder,omitempty"`
	ClassId string `protobuf:"bytes,2,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	NftId   string `protobuf:"bytes,3,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
}

func (m *EventPayFullBid) Reset()         { *m = EventPayFullBid{} }
func (m *EventPayFullBid) String() string { return proto.CompactTextString(m) }
func (*EventPayFullBid) ProtoMessage()    {}
func (*EventPayFullBid) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0570683065f368b, []int{11}
}
func (m *EventPayFullBid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPayFullBid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPayFullBid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPayFullBid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPayFullBid.Merge(m, src)
}
func (m *EventPayFullBid) XXX_Size() int {
	return m.Size()
}
func (m *EventPayFullBid) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPayFullBid.DiscardUnknown(m)
}

var xxx_messageInfo_EventPayFullBid proto.InternalMessageInfo

func (m *EventPayFullBid) GetBidder() string {
	if m != nil {
		return m.Bidder
	}
	return ""
}

func (m *EventPayFullBid) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *EventPayFullBid) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

type EventBorrow struct {
	Borrower string `protobuf:"bytes,1,opt,name=borrower,proto3" json:"borrower,omitempty"`
	ClassId  string `protobuf:"bytes,2,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	NftId    string `protobuf:"bytes,3,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
	Amount   string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *EventBorrow) Reset()         { *m = EventBorrow{} }
func (m *EventBorrow) String() string { return proto.CompactTextString(m) }
func (*EventBorrow) ProtoMessage()    {}
func (*EventBorrow) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0570683065f368b, []int{12}
}
func (m *EventBorrow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventBorrow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBorrow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventBorrow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBorrow.Merge(m, src)
}
func (m *EventBorrow) XXX_Size() int {
	return m.Size()
}
func (m *EventBorrow) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBorrow.DiscardUnknown(m)
}

var xxx_messageInfo_EventBorrow proto.InternalMessageInfo

func (m *EventBorrow) GetBorrower() string {
	if m != nil {
		return m.Borrower
	}
	return ""
}

func (m *EventBorrow) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *EventBorrow) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

func (m *EventBorrow) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type EventRepay struct {
	Repayer string `protobuf:"bytes,1,opt,name=repayer,proto3" json:"repayer,omitempty"`
	ClassId string `protobuf:"bytes,2,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	NftId   string `protobuf:"bytes,3,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
	Amount  string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *EventRepay) Reset()         { *m = EventRepay{} }
func (m *EventRepay) String() string { return proto.CompactTextString(m) }
func (*EventRepay) ProtoMessage()    {}
func (*EventRepay) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0570683065f368b, []int{13}
}
func (m *EventRepay) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventRepay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventRepay.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventRepay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRepay.Merge(m, src)
}
func (m *EventRepay) XXX_Size() int {
	return m.Size()
}
func (m *EventRepay) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRepay.DiscardUnknown(m)
}

var xxx_messageInfo_EventRepay proto.InternalMessageInfo

func (m *EventRepay) GetRepayer() string {
	if m != nil {
		return m.Repayer
	}
	return ""
}

func (m *EventRepay) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *EventRepay) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

func (m *EventRepay) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type EventLiquidate struct {
	Liquidator string `protobuf:"bytes,1,opt,name=liquidator,proto3" json:"liquidator,omitempty"`
	ClassId    string `protobuf:"bytes,2,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	NftId      string `protobuf:"bytes,3,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
}

func (m *EventLiquidate) Reset()         { *m = EventLiquidate{} }
func (m *EventLiquidate) String() string { return proto.CompactTextString(m) }
func (*EventLiquidate) ProtoMessage()    {}
func (*EventLiquidate) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0570683065f368b, []int{14}
}
func (m *EventLiquidate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventLiquidate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventLiquidate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventLiquidate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventLiquidate.Merge(m, src)
}
func (m *EventLiquidate) XXX_Size() int {
	return m.Size()
}
func (m *EventLiquidate) XXX_DiscardUnknown() {
	xxx_messageInfo_EventLiquidate.DiscardUnknown(m)
}

var xxx_messageInfo_EventLiquidate proto.InternalMessageInfo

func (m *EventLiquidate) GetLiquidator() string {
	if m != nil {
		return m.Liquidator
	}
	return ""
}

func (m *EventLiquidate) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *EventLiquidate) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

func init() {
	proto.RegisterEnum("ununifi.nftmarket.ListingType", ListingType_name, ListingType_value)
	proto.RegisterEnum("ununifi.nftmarket.ListingState", ListingState_name, ListingState_value)
	proto.RegisterType((*NftIdentifier)(nil), "ununifi.nftmarket.NftIdentifier")
	proto.RegisterType((*Loan)(nil), "ununifi.nftmarket.Loan")
	proto.RegisterType((*NftListing)(nil), "ununifi.nftmarket.NftListing")
	proto.RegisterType((*NftBid)(nil), "ununifi.nftmarket.NftBid")
	proto.RegisterType((*Params)(nil), "ununifi.nftmarket.Params")
	proto.RegisterType((*EventListNft)(nil), "ununifi.nftmarket.EventListNft")
	proto.RegisterType((*EventCancelListNfting)(nil), "ununifi.nftmarket.EventCancelListNfting")
	proto.RegisterType((*EventExpandListingPeriod)(nil), "ununifi.nftmarket.EventExpandListingPeriod")
	proto.RegisterType((*EventEndListNfting)(nil), "ununifi.nftmarket.EventEndListNfting")
	proto.RegisterType((*EventPlaceBid)(nil), "ununifi.nftmarket.EventPlaceBid")
	proto.RegisterType((*EventCancelBid)(nil), "ununifi.nftmarket.EventCancelBid")
	proto.RegisterType((*EventPayFullBid)(nil), "ununifi.nftmarket.EventPayFullBid")
	proto.RegisterType((*EventBorrow)(nil), "ununifi.nftmarket.EventBorrow")
	proto.RegisterType((*EventRepay)(nil), "ununifi.nftmarket.EventRepay")
	proto.RegisterType((*EventLiquidate)(nil), "ununifi.nftmarket.EventLiquidate")
}

func init() { proto.RegisterFile("nftmarket/nftmarket.proto", fileDescriptor_f0570683065f368b) }

var fileDescriptor_f0570683065f368b = []byte{
	// 1457 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xef, 0x6e, 0x13, 0x47,
	0x10, 0x8f, 0x13, 0xc7, 0x49, 0xc6, 0xf9, 0xbb, 0x04, 0x72, 0x09, 0x60, 0xa7, 0xae, 0x44, 0x23,
	0xaa, 0xda, 0x02, 0x84, 0xaa, 0xb6, 0x42, 0xad, 0xff, 0x85, 0x58, 0xb2, 0x8c, 0x7b, 0x76, 0x4a,
	0xa1, 0xa8, 0xa7, 0xb5, 0x6f, 0xcf, 0x59, 0xe5, 0x6e, 0xd7, 0xb9, 0x5b, 0x07, 0xdc, 0x17, 0xe8,
	0xb7, 0x8a, 0x07, 0xe9, 0x83, 0xf0, 0x11, 0xa9, 0x5f, 0xaa, 0x7e, 0x48, 0x2b, 0x78, 0x03, 0x9e,
	0xa0, 0xda, 0x3f, 0xb6, 0x2f, 0x69, 0x50, 0x89, 0xc8, 0x27, 0xdf, 0xdc, 0xcc, 0xfc, 0x66, 0xe6,
	0xe6, 0x37, 0xb3, 0x6b, 0xd8, 0x64, 0x9e, 0x08, 0x70, 0x78, 0x48, 0x44, 0x61, 0xfc, 0x94, 0xef,
	0x87, 0x5c, 0x70, 0xb4, 0x36, 0x60, 0x03, 0x46, 0x3d, 0x9a, 0x1f, 0x2b, 0xb6, 0xd6, 0x7b, 0xbc,
	0xc7, 0x95, 0xb6, 0x20, 0x9f, 0xb4, 0xe1, 0x56, 0xb6, 0xc7, 0x79, 0xcf, 0x27, 0x05, 0x25, 0x75,
	0x06, 0x5e, 0x41, 0xd0, 0x80, 0x44, 0x02, 0x07, 0x7d, 0x63, 0x90, 0xe9, 0xf2, 0x28, 0xe0, 0x51,
	0xa1, 0x83, 0x23, 0x52, 0x38, 0xbe, 0xd3, 0x21, 0x02, 0xdf, 0x29, 0x74, 0x39, 0x65, 0x5a, 0x9f,
	0x2b, 0xc2, 0x52, 0xc3, 0x13, 0x35, 0x97, 0x30, 0x41, 0x3d, 0x4a, 0x42, 0xb4, 0x09, 0xf3, 0x5d,
	0x1f, 0x47, 0x91, 0x43, 0x5d, 0x2b, 0xb1, 0x9d, 0xd8, 0x59, 0xb0, 0xe7, 0x94, 0x5c, 0x73, 0xd1,
	0x55, 0x48, 0x31, 0x4f, 0x48, 0xc5, 0xb4, 0x52, 0xcc, 0x32, 0xe9, 0x99, 0xfb, 0x05, 0x92, 0x75,
	0x8e, 0x19, 0x7a, 0x30, 0x56, 0x4b, 0xbf, 0xf4, 0xdd, 0xed, 0xfc, 0x7f, 0xaa, 0xc8, 0x9f, 0x8a,
	0x55, 0x4a, 0xbe, 0x3a, 0xc9, 0x4e, 0x19, 0x18, 0x74, 0x0f, 0x92, 0x3e, 0xc7, 0x4c, 0x61, 0xa7,
	0xef, 0x6e, 0xe6, 0x75, 0xe2, 0x79, 0x99, 0x78, 0xde, 0x24, 0x9e, 0x2f, 0x73, 0xca, 0x8c, 0x97,
	0x32, 0xce, 0xfd, 0x91, 0x04, 0x68, 0x78, 0xa2, 0x4e, 0x23, 0x41, 0x59, 0xef, 0x63, 0x53, 0x58,
	0x87, 0x59, 0xfe, 0x9c, 0x91, 0x70, 0x54, 0x9f, 0x12, 0x50, 0x11, 0x16, 0x7d, 0x8d, 0xef, 0x88,
	0x61, 0x9f, 0x58, 0x33, 0xdb, 0x89, 0x9d, 0xe5, 0xbb, 0x99, 0x73, 0xa0, 0x4d, 0x1a, 0xed, 0x61,
	0x9f, 0xd8, 0x69, 0x7f, 0x22, 0xa0, 0xfb, 0x30, 0x1b, 0x09, 0x2c, 0x88, 0x95, 0x54, 0xbe, 0xd9,
	0xf7, 0xfb, 0xb6, 0xa4, 0x99, 0xad, 0xad, 0xd1, 0x75, 0x58, 0xe8, 0x50, 0xd7, 0x11, 0xfc, 0x90,
	0x30, 0x6b, 0x56, 0xe5, 0x34, 0xdf, 0xa1, 0x6e, 0x5b, 0xca, 0xe8, 0x09, 0xcc, 0x05, 0x94, 0x39,
	0x1d, 0xea, 0x5a, 0x29, 0xa9, 0x2a, 0x7d, 0x27, 0x4b, 0xf9, 0xeb, 0x24, 0x7b, 0xab, 0x47, 0xc5,
	0xc1, 0xa0, 0x93, 0xef, 0xf2, 0xa0, 0x60, 0xba, 0xaf, 0x7f, 0xbe, 0x88, 0xdc, 0xc3, 0x82, 0x2c,
	0x21, 0xca, 0xd7, 0x98, 0x78, 0x77, 0x92, 0x5d, 0x1e, 0xe2, 0xc0, 0xff, 0x3a, 0x67, 0x60, 0x72,
	0x76, 0x2a, 0xa0, 0xac, 0x44, 0x5d, 0x74, 0x0b, 0x56, 0x64, 0x5c, 0xdc, 0x15, 0xf4, 0x98, 0x38,
	0x21, 0x66, 0x87, 0xd6, 0xdc, 0x76, 0x62, 0x27, 0x69, 0x2f, 0x75, 0xa8, 0x5b, 0x54, 0x6f, 0x6d,
	0xcc, 0x0e, 0xd1, 0x8f, 0x00, 0x91, 0xc0, 0xa1, 0x20, 0xae, 0x83, 0x85, 0x35, 0xaf, 0x3e, 0xf9,
	0x56, 0x5e, 0x53, 0x32, 0x3f, 0xa2, 0x64, 0xbe, 0x3d, 0xa2, 0x64, 0xe9, 0xa6, 0xcc, 0xf0, 0xdd,
	0x49, 0x76, 0x4d, 0xc7, 0x9d, 0xf8, 0xe6, 0x5e, 0xfe, 0x9d, 0x4d, 0xd8, 0x0b, 0xe6, 0x45, 0x51,
	0xa0, 0x3a, 0xa4, 0x08, 0x53, 0xa8, 0x0b, 0xff, 0x8b, 0xba, 0x69, 0x50, 0x97, 0x34, 0xaa, 0xf6,
	0xd3, 0x88, 0xb3, 0x84, 0x49, 0xb4, 0x3c, 0x5c, 0xc1, 0x03, 0xc1, 0x9d, 0x90, 0xc8, 0xa6, 0x10,
	0xd7, 0xe9, 0xf2, 0x01, 0x13, 0x16, 0xa8, 0x9a, 0xd6, 0xa4, 0xca, 0x36, 0x9a, 0xb2, 0x54, 0xe4,
	0x7e, 0x9f, 0x86, 0x54, 0xc3, 0x13, 0xf2, 0x53, 0x7c, 0x24, 0xa3, 0xae, 0x41, 0xaa, 0x43, 0x5d,
	0x77, 0x4c, 0x29, 0x23, 0xa1, 0x2f, 0x21, 0x85, 0x03, 0x95, 0xc4, 0xcc, 0x87, 0xd1, 0xdd, 0x98,
	0xa3, 0xcf, 0x41, 0xe5, 0x1b, 0x60, 0x41, 0xbb, 0x4e, 0x1f, 0x0f, 0x03, 0xc2, 0x84, 0x62, 0xd5,
	0xbc, 0xbd, 0x3a, 0x56, 0x34, 0xf5, 0x7b, 0x44, 0x20, 0xdd, 0xc7, 0xb2, 0x91, 0x3a, 0x94, 0x62,
	0x50, 0xa9, 0x72, 0x61, 0x9a, 0x20, 0xfd, 0x61, 0x63, 0x50, 0x39, 0x1b, 0xa4, 0x54, 0xd4, 0xc2,
	0x6f, 0x00, 0xa9, 0x26, 0x0e, 0x71, 0x10, 0xa1, 0x5f, 0x13, 0xb0, 0x21, 0xe9, 0x14, 0x09, 0x7c,
	0x28, 0x07, 0xc6, 0xe3, 0xa1, 0x63, 0x06, 0x41, 0x6f, 0x93, 0x52, 0xf3, 0xc2, 0xe1, 0x33, 0x13,
	0x96, 0x9e, 0x03, 0x9b, 0xb3, 0xd7, 0x03, 0xca, 0x5a, 0x5a, 0xb1, 0xcb, 0xc3, 0xd1, 0x2a, 0xb8,
	0x0f, 0x1b, 0x2e, 0xf1, 0xf0, 0xc0, 0x17, 0xce, 0x59, 0x2e, 0x4f, 0xab, 0xbe, 0xaf, 0x1b, 0x75,
	0xe9, 0x14, 0xa5, 0x6f, 0x02, 0x8c, 0x47, 0x2e, 0xb2, 0x66, 0xb6, 0x67, 0x76, 0x16, 0xec, 0x85,
	0xd1, 0xcc, 0x45, 0xa8, 0x08, 0x99, 0x18, 0x93, 0x64, 0x2a, 0x8a, 0x4a, 0x0e, 0xf5, 0x1c, 0xc6,
	0xd5, 0x2c, 0x26, 0x15, 0xf8, 0xe6, 0x84, 0x54, 0x94, 0xf5, 0x14, 0xab, 0x6a, 0x5e, 0x83, 0x4b,
	0x46, 0x7d, 0xa5, 0x16, 0xff, 0x28, 0x7d, 0xc7, 0x25, 0x3e, 0x1e, 0x3a, 0x11, 0xe9, 0x72, 0xe6,
	0x46, 0xaa, 0x45, 0x49, 0xfb, 0x1a, 0x1b, 0xaf, 0xb4, 0x8a, 0x54, 0xb7, 0xb4, 0x16, 0x7d, 0x03,
	0x5b, 0x71, 0xd7, 0x3e, 0x09, 0x29, 0x77, 0x1d, 0xca, 0xa8, 0xa0, 0xd8, 0x57, 0x5b, 0x20, 0x69,
	0x6f, 0x4c, 0x7c, 0x9b, 0x4a, 0x5f, 0xd3, 0x6a, 0x54, 0x87, 0x4f, 0xe3, 0xce, 0x5d, 0xcc, 0xba,
	0xc4, 0x77, 0x42, 0x72, 0x34, 0xa0, 0x21, 0x71, 0xc7, 0x19, 0xe8, 0x41, 0xcf, 0x4e, 0x50, 0xca,
	0xca, 0xd0, 0x36, 0x76, 0xa3, 0x54, 0xf6, 0xe0, 0x93, 0x73, 0xd0, 0x3c, 0x42, 0x64, 0x56, 0x5d,
	0xc2, 0x04, 0xee, 0x11, 0xb5, 0x11, 0x92, 0xf6, 0xcd, 0xb3, 0x58, 0xbb, 0x84, 0x34, 0xc7, 0x46,
	0xa8, 0x00, 0xeb, 0x71, 0xa4, 0x1e, 0xee, 0x3b, 0xf2, 0x10, 0x53, 0x83, 0x9f, 0xb4, 0xd7, 0x26,
	0xce, 0x0f, 0x71, 0x5f, 0x0e, 0x3d, 0x7a, 0x00, 0xd7, 0x65, 0x8b, 0xde, 0x57, 0x80, 0x9e, 0x6a,
	0xab, 0x43, 0xdd, 0xf3, 0x33, 0x6f, 0xc1, 0x67, 0xe3, 0x0e, 0x3b, 0x2e, 0x8d, 0x3a, 0x83, 0x30,
	0x22, 0x23, 0x6f, 0x07, 0x7b, 0x82, 0x84, 0x06, 0xdb, 0x4a, 0x2b, 0xa8, 0xdc, 0xa8, 0xfd, 0x15,
	0x63, 0x6c, 0x90, 0x8a, 0xd2, 0x54, 0xc7, 0x40, 0x15, 0xc8, 0xc6, 0x8b, 0xf0, 0x06, 0xbe, 0x3f,
	0x9a, 0x4e, 0xd3, 0x26, 0x6b, 0x51, 0x81, 0x5d, 0x9f, 0xd4, 0xb3, 0x3b, 0xf0, 0x7d, 0x33, 0xa9,
	0xba, 0x53, 0x67, 0x51, 0xe4, 0xb3, 0x4b, 0x7c, 0x7a, 0x4c, 0xc2, 0xe1, 0x08, 0x65, 0xe9, 0x2c,
	0x4a, 0xc3, 0x13, 0x15, 0x63, 0x63, 0x50, 0xbe, 0x85, 0x1b, 0xd2, 0xb3, 0x1b, 0x12, 0x2c, 0x78,
	0xe8, 0x44, 0x07, 0x38, 0x3c, 0xd5, 0x95, 0x65, 0xcd, 0x50, 0xe6, 0x89, 0xb2, 0x36, 0x69, 0x49,
	0x8b, 0x58, 0x47, 0xee, 0xc0, 0xba, 0xde, 0x6c, 0x0e, 0x76, 0x03, 0xca, 0x68, 0x24, 0x42, 0x69,
	0x66, 0xad, 0xa8, 0x15, 0x76, 0x45, 0xeb, 0x8a, 0x71, 0x15, 0x7a, 0x76, 0x9a, 0x99, 0x5d, 0x1e,
	0x04, 0x34, 0x8a, 0x28, 0x67, 0x92, 0x12, 0xd6, 0xea, 0x87, 0xed, 0xb8, 0x18, 0x75, 0xcb, 0x63,
	0x80, 0x5d, 0x42, 0xce, 0xf2, 0x9e, 0xbc, 0x10, 0x72, 0xc9, 0x8f, 0x1a, 0xbe, 0x76, 0x96, 0xf7,
	0x55, 0xa5, 0x1f, 0xf5, 0xfb, 0x08, 0x6e, 0x9d, 0x33, 0x34, 0x06, 0xc3, 0x10, 0xd6, 0x39, 0xe0,
	0x83, 0xd0, 0x42, 0x1f, 0x96, 0xe6, 0xf6, 0xd9, 0x09, 0xd3, 0xf1, 0x34, 0xab, 0xf7, 0xf8, 0x20,
	0xcc, 0xfd, 0x00, 0x8b, 0xd5, 0x63, 0xc2, 0x94, 0x55, 0xc3, 0x13, 0x93, 0x7b, 0x45, 0x22, 0x7e,
	0xaf, 0x88, 0xdf, 0xb4, 0xa6, 0xdf, 0x77, 0xd3, 0x9a, 0x89, 0xdf, 0xb4, 0x1c, 0xb8, 0xaa, 0x70,
	0x35, 0xe9, 0x0c, 0xba, 0x5c, 0x76, 0x97, 0x15, 0xa0, 0x03, 0x96, 0x0a, 0x50, 0x7d, 0xd1, 0xc7,
	0xcc, 0x3d, 0x55, 0xe4, 0xa5, 0xc5, 0x78, 0x06, 0x48, 0xc7, 0xd0, 0x01, 0x2e, 0xb9, 0x82, 0x23,
	0x58, 0x52, 0xe8, 0x4d, 0x1f, 0x77, 0x89, 0x5c, 0xb7, 0x93, 0x13, 0x38, 0x71, 0xea, 0x04, 0xbe,
	0x30, 0xb4, 0x44, 0x32, 0x07, 0x69, 0x52, 0x23, 0x99, 0xb3, 0xf0, 0x29, 0x2c, 0xc7, 0xba, 0x72,
	0xa9, 0x31, 0x73, 0x3f, 0xc1, 0x8a, 0x2e, 0x07, 0x0f, 0xe5, 0xba, 0xb8, 0x5c, 0xf0, 0x08, 0xd2,
	0x0a, 0xbc, 0xc4, 0xc3, 0x90, 0x3f, 0x47, 0x5b, 0x30, 0xdf, 0x51, 0x4f, 0x63, 0xe8, 0xb1, 0x7c,
	0x89, 0x5f, 0xab, 0x0f, 0xa0, 0x82, 0xda, 0xa4, 0x8f, 0x87, 0xc8, 0x82, 0xb9, 0x50, 0x3e, 0x8c,
	0x43, 0x8e, 0xc4, 0x4b, 0x8c, 0xd8, 0x31, 0xfd, 0xa9, 0xd3, 0xa3, 0x01, 0x75, 0xe5, 0xbd, 0x3a,
	0x03, 0xe0, 0x1b, 0x81, 0x8f, 0x02, 0xc7, 0xde, 0x5c, 0x3c, 0xf6, 0xed, 0xc7, 0x90, 0x8e, 0x5d,
	0xfe, 0xd1, 0x06, 0x5c, 0xa9, 0xd4, 0xec, 0x6a, 0xb9, 0xed, 0x14, 0x5b, 0xad, 0x6a, 0xdb, 0x29,
	0x3d, 0xb2, 0xed, 0x47, 0x8f, 0x57, 0xa7, 0xd0, 0x0d, 0xb0, 0x5a, 0x4f, 0x1a, 0xed, 0xbd, 0x6a,
	0xbb, 0x56, 0x36, 0xba, 0xb2, 0x5d, 0x2d, 0xb6, 0x6b, 0x8f, 0x1a, 0xab, 0x09, 0xb4, 0x06, 0x4b,
	0xf5, 0x62, 0xbb, 0xea, 0xb4, 0xf6, 0x6a, 0xcd, 0x66, 0xad, 0xf1, 0x70, 0x75, 0xfa, 0xf6, 0xcf,
	0xb0, 0x18, 0xff, 0x67, 0x80, 0xd2, 0x30, 0xd7, 0xaa, 0xd6, 0xeb, 0x52, 0x39, 0x25, 0x85, 0x52,
	0xad, 0x52, 0x91, 0x42, 0x02, 0xad, 0x40, 0xba, 0x5e, 0xfb, 0x7e, 0xbf, 0x56, 0xd1, 0x68, 0xd3,
	0xf2, 0x45, 0xb5, 0x51, 0x71, 0xea, 0xb5, 0x56, 0x5b, 0x5a, 0xcc, 0x20, 0x04, 0xcb, 0xad, 0xfd,
	0x72, 0xb9, 0xda, 0x6a, 0xed, 0xee, 0xd7, 0x9d, 0x52, 0xad, 0xb2, 0x9a, 0x2c, 0x55, 0x5e, 0xbd,
	0xc9, 0x24, 0x5e, 0xbf, 0xc9, 0x24, 0xfe, 0x79, 0x93, 0x49, 0xbc, 0x7c, 0x9b, 0x99, 0x7a, 0xfd,
	0x36, 0x33, 0xf5, 0xe7, 0xdb, 0xcc, 0xd4, 0xd3, 0xdb, 0xb1, 0x0b, 0xda, 0x3e, 0xdb, 0x67, 0x74,
	0x97, 0x16, 0xba, 0x07, 0x98, 0xb2, 0xc2, 0x8b, 0xc9, 0xff, 0x55, 0x7d, 0x51, 0xeb, 0xa4, 0xd4,
	0xb5, 0xfc, 0xde, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x47, 0xda, 0xc0, 0xf7, 0xd3, 0x0e, 0x00,
	0x00,
}

func (m *NftIdentifier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NftIdentifier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NftIdentifier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintNftmarket(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintNftmarket(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Loan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Loan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Loan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Loan.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNftmarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.NftId.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNftmarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NftListing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NftListing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NftListing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AutoRelistedCount != 0 {
		i = encodeVarintNftmarket(dAtA, i, uint64(m.AutoRelistedCount))
		i--
		dAtA[i] = 0x50
	}
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.EndAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.EndAt):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintNftmarket(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x4a
	n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartedAt):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintNftmarket(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x42
	if m.BidActiveRank != 0 {
		i = encodeVarintNftmarket(dAtA, i, uint64(m.BidActiveRank))
		i--
		dAtA[i] = 0x38
	}
	{
		size := m.MinBid.Size()
		i -= size
		if _, err := m.MinBid.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintNftmarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.BidToken) > 0 {
		i -= len(m.BidToken)
		copy(dAtA[i:], m.BidToken)
		i = encodeVarintNftmarket(dAtA, i, uint64(len(m.BidToken)))
		i--
		dAtA[i] = 0x2a
	}
	if m.State != 0 {
		i = encodeVarintNftmarket(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x20
	}
	if m.ListingType != 0 {
		i = encodeVarintNftmarket(dAtA, i, uint64(m.ListingType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintNftmarket(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.NftId.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNftmarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NftBid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NftBid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NftBid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.PaidAmount.Size()
		i -= size
		if _, err := m.PaidAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintNftmarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.AutomaticPayment {
		i--
		if m.AutomaticPayment {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNftmarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintNftmarket(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.NftId.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNftmarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.NftListingPeriodExtendFeePerHour.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNftmarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x92
	if m.NftListingExtendSeconds != 0 {
		i = encodeVarintNftmarket(dAtA, i, uint64(m.NftListingExtendSeconds))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	{
		size, err := m.NftListingCommissionFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNftmarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	if len(m.MarketAdministrator) > 0 {
		i -= len(m.MarketAdministrator)
		copy(dAtA[i:], m.MarketAdministrator)
		i = encodeVarintNftmarket(dAtA, i, uint64(len(m.MarketAdministrator)))
		i--
		dAtA[i] = 0x7a
	}
	if m.NftCreatorSharePercentage != 0 {
		i = encodeVarintNftmarket(dAtA, i, uint64(m.NftCreatorSharePercentage))
		i--
		dAtA[i] = 0x70
	}
	if m.NftListingNftDeliveryPeriod != 0 {
		i = encodeVarintNftmarket(dAtA, i, uint64(m.NftListingNftDeliveryPeriod))
		i--
		dAtA[i] = 0x68
	}
	if m.NftListingFullPaymentPeriod != 0 {
		i = encodeVarintNftmarket(dAtA, i, uint64(m.NftListingFullPaymentPeriod))
		i--
		dAtA[i] = 0x60
	}
	if m.BidTokenDisburseSecondsAfterCancel != 0 {
		i = encodeVarintNftmarket(dAtA, i, uint64(m.BidTokenDisburseSecondsAfterCancel))
		i--
		dAtA[i] = 0x58
	}
	if m.BidCancelRequiredSeconds != 0 {
		i = encodeVarintNftmarket(dAtA, i, uint64(m.BidCancelRequiredSeconds))
		i--
		dAtA[i] = 0x50
	}
	if m.NftListingGapTime != 0 {
		i = encodeVarintNftmarket(dAtA, i, uint64(m.NftListingGapTime))
		i--
		dAtA[i] = 0x48
	}
	if m.NftListingCancelFeePercentage != 0 {
		i = encodeVarintNftmarket(dAtA, i, uint64(m.NftListingCancelFeePercentage))
		i--
		dAtA[i] = 0x40
	}
	if m.NftListingCancelRequiredSeconds != 0 {
		i = encodeVarintNftmarket(dAtA, i, uint64(m.NftListingCancelRequiredSeconds))
		i--
		dAtA[i] = 0x38
	}
	if m.NftListingPeriodInitial != 0 {
		i = encodeVarintNftmarket(dAtA, i, uint64(m.NftListingPeriodInitial))
		i--
		dAtA[i] = 0x30
	}
	if m.NftListingDelaySeconds != 0 {
		i = encodeVarintNftmarket(dAtA, i, uint64(m.NftListingDelaySeconds))
		i--
		dAtA[i] = 0x28
	}
	if m.AutoRelistingCountIfNoBid != 0 {
		i = encodeVarintNftmarket(dAtA, i, uint64(m.AutoRelistingCountIfNoBid))
		i--
		dAtA[i] = 0x20
	}
	if len(m.BidTokens) > 0 {
		for iNdEx := len(m.BidTokens) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BidTokens[iNdEx])
			copy(dAtA[i:], m.BidTokens[iNdEx])
			i = encodeVarintNftmarket(dAtA, i, uint64(len(m.BidTokens[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.DefaultBidActiveRank != 0 {
		i = encodeVarintNftmarket(dAtA, i, uint64(m.DefaultBidActiveRank))
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.MinStakingForListing.Size()
		i -= size
		if _, err := m.MinStakingForListing.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintNftmarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EventListNft) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventListNft) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventListNft) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintNftmarket(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintNftmarket(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintNftmarket(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCancelListNfting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCancelListNfting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCancelListNfting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintNftmarket(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintNftmarket(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintNftmarket(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventExpandListingPeriod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventExpandListingPeriod) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventExpandListingPeriod) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintNftmarket(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintNftmarket(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintNftmarket(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventEndListNfting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventEndListNfting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventEndListNfting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintNftmarket(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintNftmarket(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintNftmarket(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventPlaceBid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPlaceBid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPlaceBid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintNftmarket(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintNftmarket(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintNftmarket(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintNftmarket(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCancelBid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCancelBid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCancelBid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintNftmarket(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintNftmarket(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintNftmarket(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventPayFullBid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPayFullBid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPayFullBid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintNftmarket(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintNftmarket(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintNftmarket(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventBorrow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBorrow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBorrow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintNftmarket(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintNftmarket(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintNftmarket(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Borrower) > 0 {
		i -= len(m.Borrower)
		copy(dAtA[i:], m.Borrower)
		i = encodeVarintNftmarket(dAtA, i, uint64(len(m.Borrower)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventRepay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventRepay) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventRepay) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintNftmarket(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintNftmarket(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintNftmarket(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Repayer) > 0 {
		i -= len(m.Repayer)
		copy(dAtA[i:], m.Repayer)
		i = encodeVarintNftmarket(dAtA, i, uint64(len(m.Repayer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventLiquidate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventLiquidate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventLiquidate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintNftmarket(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintNftmarket(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Liquidator) > 0 {
		i -= len(m.Liquidator)
		copy(dAtA[i:], m.Liquidator)
		i = encodeVarintNftmarket(dAtA, i, uint64(len(m.Liquidator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintNftmarket(dAtA []byte, offset int, v uint64) int {
	offset -= sovNftmarket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NftIdentifier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovNftmarket(uint64(l))
	}
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovNftmarket(uint64(l))
	}
	return n
}

func (m *Loan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NftId.Size()
	n += 1 + l + sovNftmarket(uint64(l))
	l = m.Loan.Size()
	n += 1 + l + sovNftmarket(uint64(l))
	return n
}

func (m *NftListing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NftId.Size()
	n += 1 + l + sovNftmarket(uint64(l))
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovNftmarket(uint64(l))
	}
	if m.ListingType != 0 {
		n += 1 + sovNftmarket(uint64(m.ListingType))
	}
	if m.State != 0 {
		n += 1 + sovNftmarket(uint64(m.State))
	}
	l = len(m.BidToken)
	if l > 0 {
		n += 1 + l + sovNftmarket(uint64(l))
	}
	l = m.MinBid.Size()
	n += 1 + l + sovNftmarket(uint64(l))
	if m.BidActiveRank != 0 {
		n += 1 + sovNftmarket(uint64(m.BidActiveRank))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartedAt)
	n += 1 + l + sovNftmarket(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.EndAt)
	n += 1 + l + sovNftmarket(uint64(l))
	if m.AutoRelistedCount != 0 {
		n += 1 + sovNftmarket(uint64(m.AutoRelistedCount))
	}
	return n
}

func (m *NftBid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NftId.Size()
	n += 1 + l + sovNftmarket(uint64(l))
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovNftmarket(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovNftmarket(uint64(l))
	if m.AutomaticPayment {
		n += 2
	}
	l = m.PaidAmount.Size()
	n += 1 + l + sovNftmarket(uint64(l))
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MinStakingForListing.Size()
	n += 1 + l + sovNftmarket(uint64(l))
	if m.DefaultBidActiveRank != 0 {
		n += 1 + sovNftmarket(uint64(m.DefaultBidActiveRank))
	}
	if len(m.BidTokens) > 0 {
		for _, s := range m.BidTokens {
			l = len(s)
			n += 1 + l + sovNftmarket(uint64(l))
		}
	}
	if m.AutoRelistingCountIfNoBid != 0 {
		n += 1 + sovNftmarket(uint64(m.AutoRelistingCountIfNoBid))
	}
	if m.NftListingDelaySeconds != 0 {
		n += 1 + sovNftmarket(uint64(m.NftListingDelaySeconds))
	}
	if m.NftListingPeriodInitial != 0 {
		n += 1 + sovNftmarket(uint64(m.NftListingPeriodInitial))
	}
	if m.NftListingCancelRequiredSeconds != 0 {
		n += 1 + sovNftmarket(uint64(m.NftListingCancelRequiredSeconds))
	}
	if m.NftListingCancelFeePercentage != 0 {
		n += 1 + sovNftmarket(uint64(m.NftListingCancelFeePercentage))
	}
	if m.NftListingGapTime != 0 {
		n += 1 + sovNftmarket(uint64(m.NftListingGapTime))
	}
	if m.BidCancelRequiredSeconds != 0 {
		n += 1 + sovNftmarket(uint64(m.BidCancelRequiredSeconds))
	}
	if m.BidTokenDisburseSecondsAfterCancel != 0 {
		n += 1 + sovNftmarket(uint64(m.BidTokenDisburseSecondsAfterCancel))
	}
	if m.NftListingFullPaymentPeriod != 0 {
		n += 1 + sovNftmarket(uint64(m.NftListingFullPaymentPeriod))
	}
	if m.NftListingNftDeliveryPeriod != 0 {
		n += 1 + sovNftmarket(uint64(m.NftListingNftDeliveryPeriod))
	}
	if m.NftCreatorSharePercentage != 0 {
		n += 1 + sovNftmarket(uint64(m.NftCreatorSharePercentage))
	}
	l = len(m.MarketAdministrator)
	if l > 0 {
		n += 1 + l + sovNftmarket(uint64(l))
	}
	l = m.NftListingCommissionFee.Size()
	n += 2 + l + sovNftmarket(uint64(l))
	if m.NftListingExtendSeconds != 0 {
		n += 2 + sovNftmarket(uint64(m.NftListingExtendSeconds))
	}
	l = m.NftListingPeriodExtendFeePerHour.Size()
	n += 2 + l + sovNftmarket(uint64(l))
	return n
}

func (m *EventListNft) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovNftmarket(uint64(l))
	}
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovNftmarket(uint64(l))
	}
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovNftmarket(uint64(l))
	}
	return n
}

func (m *EventCancelListNfting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovNftmarket(uint64(l))
	}
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovNftmarket(uint64(l))
	}
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovNftmarket(uint64(l))
	}
	return n
}

func (m *EventExpandListingPeriod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovNftmarket(uint64(l))
	}
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovNftmarket(uint64(l))
	}
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovNftmarket(uint64(l))
	}
	return n
}

func (m *EventEndListNfting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovNftmarket(uint64(l))
	}
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovNftmarket(uint64(l))
	}
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovNftmarket(uint64(l))
	}
	return n
}

func (m *EventPlaceBid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovNftmarket(uint64(l))
	}
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovNftmarket(uint64(l))
	}
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovNftmarket(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovNftmarket(uint64(l))
	}
	return n
}

func (m *EventCancelBid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovNftmarket(uint64(l))
	}
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovNftmarket(uint64(l))
	}
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovNftmarket(uint64(l))
	}
	return n
}

func (m *EventPayFullBid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovNftmarket(uint64(l))
	}
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovNftmarket(uint64(l))
	}
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovNftmarket(uint64(l))
	}
	return n
}

func (m *EventBorrow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Borrower)
	if l > 0 {
		n += 1 + l + sovNftmarket(uint64(l))
	}
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovNftmarket(uint64(l))
	}
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovNftmarket(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovNftmarket(uint64(l))
	}
	return n
}

func (m *EventRepay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Repayer)
	if l > 0 {
		n += 1 + l + sovNftmarket(uint64(l))
	}
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovNftmarket(uint64(l))
	}
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovNftmarket(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovNftmarket(uint64(l))
	}
	return n
}

func (m *EventLiquidate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Liquidator)
	if l > 0 {
		n += 1 + l + sovNftmarket(uint64(l))
	}
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovNftmarket(uint64(l))
	}
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovNftmarket(uint64(l))
	}
	return n
}

func sovNftmarket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNftmarket(x uint64) (n int) {
	return sovNftmarket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NftIdentifier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNftmarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NftIdentifier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NftIdentifier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNftmarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNftmarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Loan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNftmarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Loan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Loan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NftId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Loan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNftmarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNftmarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NftListing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNftmarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NftListing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NftListing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NftId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListingType", wireType)
			}
			m.ListingType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ListingType |= ListingType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= ListingState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BidToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinBid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinBid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidActiveRank", wireType)
			}
			m.BidActiveRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BidActiveRank |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.EndAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoRelistedCount", wireType)
			}
			m.AutoRelistedCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AutoRelistedCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNftmarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNftmarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NftBid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNftmarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NftBid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NftBid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NftId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutomaticPayment", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutomaticPayment = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaidAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PaidAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNftmarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNftmarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNftmarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinStakingForListing", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinStakingForListing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultBidActiveRank", wireType)
			}
			m.DefaultBidActiveRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultBidActiveRank |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidTokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BidTokens = append(m.BidTokens, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoRelistingCountIfNoBid", wireType)
			}
			m.AutoRelistingCountIfNoBid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AutoRelistingCountIfNoBid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftListingDelaySeconds", wireType)
			}
			m.NftListingDelaySeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NftListingDelaySeconds |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftListingPeriodInitial", wireType)
			}
			m.NftListingPeriodInitial = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NftListingPeriodInitial |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftListingCancelRequiredSeconds", wireType)
			}
			m.NftListingCancelRequiredSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NftListingCancelRequiredSeconds |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftListingCancelFeePercentage", wireType)
			}
			m.NftListingCancelFeePercentage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NftListingCancelFeePercentage |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftListingGapTime", wireType)
			}
			m.NftListingGapTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NftListingGapTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidCancelRequiredSeconds", wireType)
			}
			m.BidCancelRequiredSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BidCancelRequiredSeconds |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidTokenDisburseSecondsAfterCancel", wireType)
			}
			m.BidTokenDisburseSecondsAfterCancel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BidTokenDisburseSecondsAfterCancel |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftListingFullPaymentPeriod", wireType)
			}
			m.NftListingFullPaymentPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NftListingFullPaymentPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftListingNftDeliveryPeriod", wireType)
			}
			m.NftListingNftDeliveryPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NftListingNftDeliveryPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftCreatorSharePercentage", wireType)
			}
			m.NftCreatorSharePercentage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NftCreatorSharePercentage |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketAdministrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketAdministrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftListingCommissionFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NftListingCommissionFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftListingExtendSeconds", wireType)
			}
			m.NftListingExtendSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NftListingExtendSeconds |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftListingPeriodExtendFeePerHour", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NftListingPeriodExtendFeePerHour.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNftmarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNftmarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventListNft) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNftmarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventListNft: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventListNft: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNftmarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNftmarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCancelListNfting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNftmarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCancelListNfting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCancelListNfting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNftmarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNftmarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventExpandListingPeriod) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNftmarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventExpandListingPeriod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventExpandListingPeriod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNftmarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNftmarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventEndListNfting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNftmarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventEndListNfting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventEndListNfting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNftmarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNftmarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPlaceBid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNftmarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPlaceBid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPlaceBid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNftmarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNftmarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCancelBid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNftmarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCancelBid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCancelBid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNftmarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNftmarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPayFullBid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNftmarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPayFullBid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPayFullBid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNftmarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNftmarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventBorrow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNftmarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBorrow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBorrow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Borrower", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Borrower = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNftmarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNftmarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventRepay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNftmarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventRepay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventRepay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repayer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Repayer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNftmarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNftmarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventLiquidate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNftmarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventLiquidate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventLiquidate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liquidator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Liquidator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftmarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftmarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNftmarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNftmarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNftmarket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNftmarket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNftmarket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNftmarket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNftmarket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNftmarket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNftmarket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNftmarket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNftmarket = fmt.Errorf("proto: unexpected end of group")
)
